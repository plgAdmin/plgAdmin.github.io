"use strict";var _oMultiDiff;function _typeof(Y){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(Y){return typeof Y}:function(Y){return Y&&"function"==typeof Symbol&&Y.constructor===Symbol&&Y!==Symbol.prototype?"symbol":typeof Y})(Y)}function _defineProperty(Y,Z,L){return Z in Y?Object.defineProperty(Y,Z,{value:L,enumerable:!0,configurable:!0,writable:!0}):Y[Z]=L,Y}var strChineseFirstPY="",oMultiDiff=(_defineProperty(_oMultiDiff={19969:"DZ",19975:"WM",19988:"QJ",20048:"YL",20056:"SC",20060:"NM",20094:"QG",20127:"QJ",20167:"QC",20193:"YG",20250:"KH",20256:"ZC",20282:"SC",20285:"QJG",20291:"TD",20314:"YD",20340:"NE",20375:"TD",20389:"YJ",20391:"CZ",20415:"PB",20446:"YS",20447:"SQ",20504:"TC",20608:"KG",20854:"QJ",20857:"ZC",20911:"PF"},"20504","TC"),_defineProperty(_oMultiDiff,"20608","KG"),_defineProperty(_oMultiDiff,"20854","QJ"),_defineProperty(_oMultiDiff,"20857","ZC"),_defineProperty(_oMultiDiff,"20911","PF"),_defineProperty(_oMultiDiff,"20985","AW"),_defineProperty(_oMultiDiff,"21032","PB"),_defineProperty(_oMultiDiff,"21048","XQ"),_defineProperty(_oMultiDiff,"21049","SC"),_defineProperty(_oMultiDiff,"21089","YS"),_defineProperty(_oMultiDiff,"21119","JC"),_defineProperty(_oMultiDiff,"21242","SB"),_defineProperty(_oMultiDiff,"21273","SC"),_defineProperty(_oMultiDiff,"21305","YP"),_defineProperty(_oMultiDiff,"21306","QO"),_defineProperty(_oMultiDiff,"21330","ZC"),_defineProperty(_oMultiDiff,"21333","SDC"),_defineProperty(_oMultiDiff,"21345","QK"),_defineProperty(_oMultiDiff,"21378","CA"),_defineProperty(_oMultiDiff,"21397","SC"),_defineProperty(_oMultiDiff,"21414","XS"),_defineProperty(_oMultiDiff,"21442","SC"),_defineProperty(_oMultiDiff,"21477","JG"),_defineProperty(_oMultiDiff,"21480","TD"),_defineProperty(_oMultiDiff,"21484","ZS"),_defineProperty(_oMultiDiff,"21494","YX"),_defineProperty(_oMultiDiff,"21505","YX"),_defineProperty(_oMultiDiff,"21512","HG"),_defineProperty(_oMultiDiff,"21523","XH"),_defineProperty(_oMultiDiff,"21537","PB"),_defineProperty(_oMultiDiff,"21542","PF"),_defineProperty(_oMultiDiff,"21549","KH"),_defineProperty(_oMultiDiff,"21571","E"),_defineProperty(_oMultiDiff,"21574","DA"),_defineProperty(_oMultiDiff,"21588","TD"),_defineProperty(_oMultiDiff,"21589","O"),_defineProperty(_oMultiDiff,"21618","ZC"),_defineProperty(_oMultiDiff,"21621","KHA"),_defineProperty(_oMultiDiff,"21632","ZJ"),_defineProperty(_oMultiDiff,"21654","KG"),_defineProperty(_oMultiDiff,"21679","LKG"),_defineProperty(_oMultiDiff,"21683","KH"),_defineProperty(_oMultiDiff,"21710","A"),_defineProperty(_oMultiDiff,"21719","YH"),_defineProperty(_oMultiDiff,"21734","WOE"),_defineProperty(_oMultiDiff,"21769","A"),_defineProperty(_oMultiDiff,"21780","WN"),_defineProperty(_oMultiDiff,"21804","XH"),_defineProperty(_oMultiDiff,"21834","A"),_defineProperty(_oMultiDiff,"21899","ZD"),_defineProperty(_oMultiDiff,"21903","RN"),_defineProperty(_oMultiDiff,"21908","WO"),_defineProperty(_oMultiDiff,"21939","ZC"),_defineProperty(_oMultiDiff,"21956","SA"),_defineProperty(_oMultiDiff,"21964","YA"),_defineProperty(_oMultiDiff,"21970","TD"),_defineProperty(_oMultiDiff,"22003","A"),_defineProperty(_oMultiDiff,"22031","JG"),_defineProperty(_oMultiDiff,"22040","XS"),_defineProperty(_oMultiDiff,"22060","ZC"),_defineProperty(_oMultiDiff,"22066","ZC"),_defineProperty(_oMultiDiff,"22079","MH"),_defineProperty(_oMultiDiff,"22129","XJ"),_defineProperty(_oMultiDiff,"22179","XA"),_defineProperty(_oMultiDiff,"22237","NJ"),_defineProperty(_oMultiDiff,"22244","TD"),_defineProperty(_oMultiDiff,"22280","JQ"),_defineProperty(_oMultiDiff,"22300","YH"),_defineProperty(_oMultiDiff,"22313","XW"),_defineProperty(_oMultiDiff,"22331","YQ"),_defineProperty(_oMultiDiff,"22343","YJ"),_defineProperty(_oMultiDiff,"22351","PH"),_defineProperty(_oMultiDiff,"22395","DC"),_defineProperty(_oMultiDiff,"22412","TD"),_defineProperty(_oMultiDiff,"22484","PB"),_defineProperty(_oMultiDiff,"22500","PB"),_defineProperty(_oMultiDiff,"22534","ZD"),_defineProperty(_oMultiDiff,"22549","DH"),_defineProperty(_oMultiDiff,"22561","PB"),_defineProperty(_oMultiDiff,"22612","TD"),_defineProperty(_oMultiDiff,"22771","KQ"),_defineProperty(_oMultiDiff,"22831","HB"),_defineProperty(_oMultiDiff,"22841","JG"),_defineProperty(_oMultiDiff,"22855","QJ"),_defineProperty(_oMultiDiff,"22865","XQ"),_defineProperty(_oMultiDiff,"23013","ML"),_defineProperty(_oMultiDiff,"23081","WM"),_defineProperty(_oMultiDiff,"23487","SX"),_defineProperty(_oMultiDiff,"23558","QJ"),_defineProperty(_oMultiDiff,"23561","YW"),_defineProperty(_oMultiDiff,"23586","YW"),_defineProperty(_oMultiDiff,"23614","YW"),_defineProperty(_oMultiDiff,"23615","SN"),_defineProperty(_oMultiDiff,"23631","PB"),_defineProperty(_oMultiDiff,"23646","ZS"),_defineProperty(_oMultiDiff,"23663","ZT"),_defineProperty(_oMultiDiff,"23673","YG"),_defineProperty(_oMultiDiff,"23762","TD"),_defineProperty(_oMultiDiff,"23769","ZS"),_defineProperty(_oMultiDiff,"23780","QJ"),_defineProperty(_oMultiDiff,"23884","QK"),_defineProperty(_oMultiDiff,"24055","XH"),_defineProperty(_oMultiDiff,"24113","DC"),_defineProperty(_oMultiDiff,"24162","ZC"),_defineProperty(_oMultiDiff,"24191","GA"),_defineProperty(_oMultiDiff,"24273","QJ"),_defineProperty(_oMultiDiff,"24324","NL"),_defineProperty(_oMultiDiff,"24377","TD"),_defineProperty(_oMultiDiff,"24378","QJ"),_defineProperty(_oMultiDiff,"24439","PF"),_defineProperty(_oMultiDiff,"24554","ZS"),_defineProperty(_oMultiDiff,"24683","TD"),_defineProperty(_oMultiDiff,"24694","WE"),_defineProperty(_oMultiDiff,"24733","LK"),_defineProperty(_oMultiDiff,"24925","TN"),_defineProperty(_oMultiDiff,"25094","ZG"),_defineProperty(_oMultiDiff,"25100","XQ"),_defineProperty(_oMultiDiff,"25103","XH"),_defineProperty(_oMultiDiff,"25153","PB"),_defineProperty(_oMultiDiff,"25170","PB"),_defineProperty(_oMultiDiff,"25179","KG"),_defineProperty(_oMultiDiff,"25203","PB"),_defineProperty(_oMultiDiff,"25240","ZS"),_defineProperty(_oMultiDiff,"25282","FB"),_defineProperty(_oMultiDiff,"25303","NA"),_defineProperty(_oMultiDiff,"25324","KG"),_defineProperty(_oMultiDiff,"25341","ZY"),_defineProperty(_oMultiDiff,"25373","WZ"),_defineProperty(_oMultiDiff,"25375","XJ"),_defineProperty(_oMultiDiff,"25384","A"),_defineProperty(_oMultiDiff,"25457","A"),_defineProperty(_oMultiDiff,"25528","SD"),_defineProperty(_oMultiDiff,"25530","SC"),_defineProperty(_oMultiDiff,"25552","TD"),_defineProperty(_oMultiDiff,"25774","ZC"),_defineProperty(_oMultiDiff,"25874","ZC"),_defineProperty(_oMultiDiff,"26044","YW"),_defineProperty(_oMultiDiff,"26080","WM"),_defineProperty(_oMultiDiff,"26292","PB"),_defineProperty(_oMultiDiff,"26333","PB"),_defineProperty(_oMultiDiff,"26355","ZY"),_defineProperty(_oMultiDiff,"26366","CZ"),_defineProperty(_oMultiDiff,"26397","ZC"),_defineProperty(_oMultiDiff,"26399","QJ"),_defineProperty(_oMultiDiff,"26415","ZS"),_defineProperty(_oMultiDiff,"26451","SB"),_defineProperty(_oMultiDiff,"26526","ZC"),_defineProperty(_oMultiDiff,"26552","JG"),_defineProperty(_oMultiDiff,"26561","TD"),_defineProperty(_oMultiDiff,"26588","JG"),_defineProperty(_oMultiDiff,"26597","CZ"),_defineProperty(_oMultiDiff,"26629","ZS"),_defineProperty(_oMultiDiff,"26638","YL"),_defineProperty(_oMultiDiff,"26646","XQ"),_defineProperty(_oMultiDiff,"26653","KG"),_defineProperty(_oMultiDiff,"26657","XJ"),_defineProperty(_oMultiDiff,"26727","HG"),_defineProperty(_oMultiDiff,"26894","ZC"),_defineProperty(_oMultiDiff,"26937","ZS"),_defineProperty(_oMultiDiff,"26946","ZC"),_defineProperty(_oMultiDiff,"26999","KJ"),_defineProperty(_oMultiDiff,"27099","KJ"),_defineProperty(_oMultiDiff,"27449","YQ"),_defineProperty(_oMultiDiff,"27481","XS"),_defineProperty(_oMultiDiff,"27542","ZS"),_defineProperty(_oMultiDiff,"27663","ZS"),_defineProperty(_oMultiDiff,"27748","TS"),_defineProperty(_oMultiDiff,"27784","SC"),_defineProperty(_oMultiDiff,"27788","ZD"),_defineProperty(_oMultiDiff,"27795","TD"),_defineProperty(_oMultiDiff,"27812","O"),_defineProperty(_oMultiDiff,"27850","PB"),_defineProperty(_oMultiDiff,"27852","MB"),_defineProperty(_oMultiDiff,"27895","SL"),_defineProperty(_oMultiDiff,"27898","PL"),_defineProperty(_oMultiDiff,"27973","QJ"),_defineProperty(_oMultiDiff,"27981","KH"),_defineProperty(_oMultiDiff,"27986","HX"),_defineProperty(_oMultiDiff,"27994","XJ"),_defineProperty(_oMultiDiff,"28044","YC"),_defineProperty(_oMultiDiff,"28065","WG"),_defineProperty(_oMultiDiff,"28177","SM"),_defineProperty(_oMultiDiff,"28267","QJ"),_defineProperty(_oMultiDiff,"28291","KH"),_defineProperty(_oMultiDiff,"28337","ZQ"),_defineProperty(_oMultiDiff,"28463","TL"),_defineProperty(_oMultiDiff,"28548","DC"),_defineProperty(_oMultiDiff,"28601","TD"),_defineProperty(_oMultiDiff,"28689","PB"),_defineProperty(_oMultiDiff,"28805","JG"),_defineProperty(_oMultiDiff,"28820","QG"),_defineProperty(_oMultiDiff,"28846","PB"),_defineProperty(_oMultiDiff,"28952","TD"),_defineProperty(_oMultiDiff,"28975","ZC"),_defineProperty(_oMultiDiff,"29100","A"),_defineProperty(_oMultiDiff,"29325","QJ"),_defineProperty(_oMultiDiff,"29575","SL"),_defineProperty(_oMultiDiff,"29602","FB"),_defineProperty(_oMultiDiff,"30010","TD"),_defineProperty(_oMultiDiff,"30044","CX"),_defineProperty(_oMultiDiff,"30058","PF"),_defineProperty(_oMultiDiff,"30091","YSP"),_defineProperty(_oMultiDiff,"30111","YN"),_defineProperty(_oMultiDiff,"30229","XJ"),_defineProperty(_oMultiDiff,"30427","SC"),_defineProperty(_oMultiDiff,"30465","SX"),_defineProperty(_oMultiDiff,"30631","YQ"),_defineProperty(_oMultiDiff,"30655","QJ"),_defineProperty(_oMultiDiff,"30684","QJG"),_defineProperty(_oMultiDiff,"30707","SD"),_defineProperty(_oMultiDiff,"30729","XH"),_defineProperty(_oMultiDiff,"30796","LG"),_defineProperty(_oMultiDiff,"30917","PB"),_defineProperty(_oMultiDiff,"31074","NM"),_defineProperty(_oMultiDiff,"31085","JZ"),_defineProperty(_oMultiDiff,"31109","SC"),_defineProperty(_oMultiDiff,"31181","ZC"),_defineProperty(_oMultiDiff,"31192","MLB"),_defineProperty(_oMultiDiff,"31293","JQ"),_defineProperty(_oMultiDiff,"31400","YX"),_defineProperty(_oMultiDiff,"31584","YJ"),_defineProperty(_oMultiDiff,"31896","ZN"),_defineProperty(_oMultiDiff,"31909","ZY"),_defineProperty(_oMultiDiff,"31995","XJ"),_defineProperty(_oMultiDiff,"32321","PF"),_defineProperty(_oMultiDiff,"32327","ZY"),_defineProperty(_oMultiDiff,"32418","HG"),_defineProperty(_oMultiDiff,"32420","XQ"),_defineProperty(_oMultiDiff,"32421","HG"),_defineProperty(_oMultiDiff,"32438","LG"),_defineProperty(_oMultiDiff,"32473","GJ"),_defineProperty(_oMultiDiff,"32488","TD"),_defineProperty(_oMultiDiff,"32521","QJ"),_defineProperty(_oMultiDiff,"32527","PB"),_defineProperty(_oMultiDiff,"32562","ZSQ"),_defineProperty(_oMultiDiff,"32564","JZ"),_defineProperty(_oMultiDiff,"32735","ZD"),_defineProperty(_oMultiDiff,"32793","PB"),_defineProperty(_oMultiDiff,"33071","PF"),_defineProperty(_oMultiDiff,"33098","XL"),_defineProperty(_oMultiDiff,"33100","YA"),_defineProperty(_oMultiDiff,"33152","PB"),_defineProperty(_oMultiDiff,"33261","CX"),_defineProperty(_oMultiDiff,"33324","BP"),_defineProperty(_oMultiDiff,"33333","TD"),_defineProperty(_oMultiDiff,"33406","YA"),_defineProperty(_oMultiDiff,"33426","WM"),_defineProperty(_oMultiDiff,"33432","PB"),_defineProperty(_oMultiDiff,"33445","JG"),_defineProperty(_oMultiDiff,"33486","ZN"),_defineProperty(_oMultiDiff,"33493","TS"),_defineProperty(_oMultiDiff,"33507","QJ"),_defineProperty(_oMultiDiff,"33540","QJ"),_defineProperty(_oMultiDiff,"33544","ZC"),_defineProperty(_oMultiDiff,"33564","XQ"),_defineProperty(_oMultiDiff,"33617","YT"),_defineProperty(_oMultiDiff,"33632","QJ"),_defineProperty(_oMultiDiff,"33636","XH"),_defineProperty(_oMultiDiff,"33637","YX"),_defineProperty(_oMultiDiff,"33694","WG"),_defineProperty(_oMultiDiff,"33705","PF"),_defineProperty(_oMultiDiff,"33728","YW"),_defineProperty(_oMultiDiff,"33882","SR"),_defineProperty(_oMultiDiff,"34067","WM"),_defineProperty(_oMultiDiff,"34074","YW"),_defineProperty(_oMultiDiff,"34121","QJ"),_defineProperty(_oMultiDiff,"34255","ZC"),_defineProperty(_oMultiDiff,"34259","XL"),_defineProperty(_oMultiDiff,"34425","JH"),_defineProperty(_oMultiDiff,"34430","XH"),_defineProperty(_oMultiDiff,"34485","KH"),_defineProperty(_oMultiDiff,"34503","YS"),_defineProperty(_oMultiDiff,"34532","HG"),_defineProperty(_oMultiDiff,"34552","XS"),_defineProperty(_oMultiDiff,"34558","YE"),_defineProperty(_oMultiDiff,"34593","ZL"),_defineProperty(_oMultiDiff,"34660","YQ"),_defineProperty(_oMultiDiff,"34892","XH"),_defineProperty(_oMultiDiff,"34928","SC"),_defineProperty(_oMultiDiff,"34999","QJ"),_defineProperty(_oMultiDiff,"35048","PB"),_defineProperty(_oMultiDiff,"35059","SC"),_defineProperty(_oMultiDiff,"35098","ZC"),_defineProperty(_oMultiDiff,"35203","TQ"),_defineProperty(_oMultiDiff,"35265","JX"),_defineProperty(_oMultiDiff,"35299","JX"),_defineProperty(_oMultiDiff,"35782","SZ"),_defineProperty(_oMultiDiff,"35828","YS"),_defineProperty(_oMultiDiff,"35830","E"),_defineProperty(_oMultiDiff,"35843","TD"),_defineProperty(_oMultiDiff,"35895","YG"),_defineProperty(_oMultiDiff,"35977","MH"),_defineProperty(_oMultiDiff,"36158","JG"),_defineProperty(_oMultiDiff,"36228","QJ"),_defineProperty(_oMultiDiff,"36426","XQ"),_defineProperty(_oMultiDiff,"36466","DC"),_defineProperty(_oMultiDiff,"36710","JC"),_defineProperty(_oMultiDiff,"36711","ZYG"),_defineProperty(_oMultiDiff,"36767","PB"),_defineProperty(_oMultiDiff,"36866","SK"),_defineProperty(_oMultiDiff,"36951","YW"),_defineProperty(_oMultiDiff,"37034","YX"),_defineProperty(_oMultiDiff,"37063","XH"),_defineProperty(_oMultiDiff,"37218","ZC"),_defineProperty(_oMultiDiff,"37325","ZC"),_defineProperty(_oMultiDiff,"38063","PB"),_defineProperty(_oMultiDiff,"38079","TD"),_defineProperty(_oMultiDiff,"38085","QY"),_defineProperty(_oMultiDiff,"38107","DC"),_defineProperty(_oMultiDiff,"38116","TD"),_defineProperty(_oMultiDiff,"38123","YD"),_defineProperty(_oMultiDiff,"38224","HG"),_defineProperty(_oMultiDiff,"38241","XTC"),_defineProperty(_oMultiDiff,"38271","ZC"),_defineProperty(_oMultiDiff,"38415","YE"),_defineProperty(_oMultiDiff,"38426","KH"),_defineProperty(_oMultiDiff,"38461","YD"),_defineProperty(_oMultiDiff,"38463","AE"),_defineProperty(_oMultiDiff,"38466","PB"),_defineProperty(_oMultiDiff,"38477","XJ"),_defineProperty(_oMultiDiff,"38518","YT"),_defineProperty(_oMultiDiff,"38551","WK"),_defineProperty(_oMultiDiff,"38585","ZC"),_defineProperty(_oMultiDiff,"38704","XS"),_defineProperty(_oMultiDiff,"38739","LJ"),_defineProperty(_oMultiDiff,"38761","GJ"),_defineProperty(_oMultiDiff,"38808","SQ"),_defineProperty(_oMultiDiff,"39048","JG"),_defineProperty(_oMultiDiff,"39049","XJ"),_defineProperty(_oMultiDiff,"39052","HG"),_defineProperty(_oMultiDiff,"39076","CZ"),_defineProperty(_oMultiDiff,"39271","XT"),_defineProperty(_oMultiDiff,"39534","TD"),_defineProperty(_oMultiDiff,"39552","TD"),_defineProperty(_oMultiDiff,"39584","PB"),_defineProperty(_oMultiDiff,"39647","SB"),_defineProperty(_oMultiDiff,"39730","LG"),_defineProperty(_oMultiDiff,"39748","TPB"),_defineProperty(_oMultiDiff,"40109","ZQ"),_defineProperty(_oMultiDiff,"40479","ND"),_defineProperty(_oMultiDiff,"40516","HG"),_defineProperty(_oMultiDiff,"40536","HG"),_defineProperty(_oMultiDiff,"40583","QJ"),_defineProperty(_oMultiDiff,"40765","YQ"),_defineProperty(_oMultiDiff,"40784","QJ"),_defineProperty(_oMultiDiff,"40840","YK"),_defineProperty(_oMultiDiff,"40863","QJG"),_oMultiDiff);function makePy(Y){if("string"!=typeof Y)throw new Error(-1,"函数makePy需要字符串类型参数!");for(var Z=new Array,L=0,X=Y.length;L<X;L++){var J=Y.charAt(L);Z.push(checkCh(J))}return mkRslt(Z)}function checkCh(Y){var Z=Y.charCodeAt(0);return 40869<Z||Z<19968?Y:oMultiDiff[Z]?oMultiDiff[Z]:strChineseFirstPY.charAt(Z-19968)}function mkRslt(Y){for(var Z=[""],L=0,X=Y.length;L<X;L++){var J=Y[L],S=J.length;if(1==S)for(var e=0;e<Z.length;e++)Z[e]+=J;else{var D=Z.slice(0);for(Z=[],e=0;e<S;e++){for(var C=D.slice(0),i=0;i<C.length;i++)C[i]+=J.charAt(e);Z=Z.concat(C)}}}return Z}String.prototype.trim=function(){return this.replace(/(^\s*)|(\s*$)/g,"")};var pinyin={};pinyin.makePy=makePy,Date.prototype.format=function(Y){var Z={"M+":this.getMonth()+1,"d+":this.getDate(),"h+":this.getHours(),"m+":this.getMinutes(),"s+":this.getSeconds(),"q+":Math.floor((this.getMonth()+3)/3),S:this.getMilliseconds()};for(var L in/(y+)/.test(Y)&&(Y=Y.replace(RegExp.$1,(this.getFullYear()+"").substr(4-RegExp.$1.length))),Z)new RegExp("("+L+")").test(Y)&&(Y=Y.replace(RegExp.$1,1==RegExp.$1.length?Z[L]:("00"+Z[L]).substr((""+Z[L]).length)));return Y},"undefined"!=typeof dhtmlXCalendarObject&&dhtmlXCalendarObject&&(dhtmlXCalendarObject.prototype.langData.ch={dateformat:"%Y-%m-%d",monthesFNames:["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"],monthesSNames:["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"],daysFNames:["星期天","星期一","星期二","星期三","星期四","星期五","星期六"],daysSNames:["日","一","二","三","四","五","六"],weekstart:"周日",weekname:"星期",today:"今天",clear:"清除"},dhtmlXCalendarObject.prototype.lang="ch");var Prolog={},GridBasePath="/prologui/components/PlgGrid/codebase/images",token=localStorage.getItem("authorization");Prolog.getTop=function(Y){var Z=Y.offsetTop;return null!=Y.offsetParent&&(Z+=Prolog.getTop(Y.offsetParent)),Z},Prolog.getLeft=function(Y){var Z=Y.offsetLeft;return null!=Y.offsetParent&&(Z+=Prolog.getLeft(Y.offsetParent)),Z},Prolog.hasJson=function(Y,Z){for(var L=0;L<Y.length;L++){var X=!0;for(var J in Y[L])if(Y[L][J]!=Z[J]){X=!1;break}if(X)return L}return-1},Prolog.ajax=function(X){var Y=$.extend(!0,{timeout:3e4,dataType:"json"},X);Y.error=function(Y,Z,L){layer.msg(Z),X.error&&X.error(Y,Z,L)},Y.beforeSend=function(Y){Y.setRequestHeader("Authorization",token),X.beforeSend&&X.beforeSend(Y)},$.ajax(Y)},Prolog.syncAjax=function(X){var Y=$.extend(!0,{timeout:3e4},X);Y.error=function(Y,Z,L){layer.msg(Z),X.error&&X.error(Y,Z,L)},Y.async=!1,Y.beforeSend=function(Y){Y.setRequestHeader("Authorization",token),X.beforeSend&&X.beforeSend(Y)},$.ajax(Y)},Prolog.getFormById=function(Y,Z,L){var X=null,J=Prolog.getJsonData("/japi/sysform2/form","GET",{systemId:Y,menuId:Z,formId:L,id:Y+"_"+Z+"_"+L});if(null!=J&&1==J.success)if(null!=J.data&&null!=J.data.fields){X=new PrologForm;var S=JSON.parse(J.data.fields);X.init(S)}else layer.msg("未定义表单内容");return X},Prolog.createRandomId=function(){return(new Date).getTime()+Math.random().toString().substr(2,5)},Prolog.loading=function(Y){var Z=PlgDialog.loading();return $("#layui-layer-shade"+Z).appendTo("#"+Y),$("#layui-layer"+Z).appendTo("#"+Y),$("#layui-layer"+Z).css("left","50%"),$("#layui-layer"+Z).css("margin-left","-90px"),$("#layui-layer"+Z).css("top","200px"),Z},Prolog.closeLoading=function(Y){layer.close(Y)},Prolog.loading2=function(){var Y=PlgDialog.load(2,{shade:[.6,"#fff"]});return function(){PlgDialog.close(Y)}},Prolog.delGridRowData=function(Z,L,X,J,S,Y){if(!1===Y){if(null==Z.getSelectedRowId()&&S.length<1)return void PlgDialog.msg("请选择行!")}else if(null==Z.getCheckedIds())return void PlgDialog.msg("请选择行!");PlgDialog.confirm("是否删除吗？",{title:"删除提示",btn:["确定","取消"],zIndex:layer.zIndex},function(Y){PlgDialog.close(Y),""===X&&(X="post"),""===J&&(J="application/x-www-form-urlencoded"),layer.msg("数据处理中..."),Prolog.ajax({url:L,type:X,contentType:J,data:S,success:function(Y){"object"!=_typeof(Y)&&(Y=JSON.parse(Y)),Y.success?(Z.reload(),layer.closeAll()):layer.open({type:1,offset:"auto",id:"layerError",area:["500px"],title:"错误提示",content:'<div style="padding: 10px;">'+$.parseJSON(Y).message+"</div>",btn:"关闭",btnAlign:"r",shade:0,yes:function(){layer.closeAll()}})},error:function(){}})})};
"use strict";!function(n,e){e.use(["layer"],function(){var a=e.layer;a.config({anim:0,zIndex:1e4,shade:.5,btnAlign:"r",fixed:!1});var n=a;n.showUploadDialog=function(i){var n={title:"上传文件",skin:"layui-layer-lan",closeBtn:1,type:1,resize:!0,btn:["上传","取消"],btn1:function(n,e){PlgDialog.close(n)},btn2:function(n,e){PlgDialog.close(n)},area:["300px","300px"],content:'<div id="xx-win-dd-1"></div>',success:function(n,e){new PlgForm({items:[{type:"upload",name:"files",url:i}]}).renderTo("xx-win-dd-1")}};a.open(n)},n.showGridDialog=function(t,o,n){var e={title:n.title?n.title:"",skin:"layui-layer-lan",closeBtn:1,type:1,resize:!0,tipsMore:!0,btn:["选择","取消"],btn1:function(n,e){var i=t.getSelectedRowId();if(i){var l=t.getSelectedRowData();o&&o(i,l),PlgDialog.close(n)}else a.msg("为选择数据")},btn2:function(n,e){PlgDialog.close(n)},area:[n.width+"px",n.height+"px"],content:'<div id="'+panelId+'-win-grid-1"></div>',success:function(n,l){t.renderTo(panelId+"-win-grid-1"),t.loadData(),t.on("onRowDblClicked",function(n,e){var i=t.getUserData(n,"data");o&&o(n,i),PlgDialog.close(l)})}};1==type&&(e.btn=["保存","取消"],e.btn2=e.btn3,e.btn3=null),PlgDialog.open(e)},n.loading2=function(){var n=PlgDialog.load(2,{shade:[.6,"#fff"]});return function(){PlgDialog.close(n)}},window.PlgDialog=n})}(jQuery,layui);
"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function eXcell_button(e){e&&(this.cell=e,this.grid=this.cell.parentNode.grid),this.edit=function(){},this.isDisabled=function(){return!0},this.setValue=function(e){var t=this.cell.parentNode.idd,l=JSON.stringify(this.grid.getUserData(t,"data"));l=l.replaceAll("'","");for(var a=(e=e.replaceAll(",",";")).split(";"),n="",i=0;i<a.length;i++){var r=a[i],s=r.substring(0,r.indexOf("^"));n+="<div class='plg-divider plg-divider-vertical'></div><a class='' href='javascript:void(0);' onclick='"+r.substring(r.indexOf("^")+1)+'("'+t+'",'+l+")' >"+s+"</a>"}n=n.substring(n.indexOf("<a")),this.setCValue(n,e)}}function eXcell_selectTable(e){e&&(this.cell=e,this.grid=this.cell.parentNode.grid,this.cell.selectTable=null,this.cellIndex=e.cellIndex,this.cellColumnId=this.grid.columnIds[this.cellIndex]),this.setValue=function(t){if(null!=t){var e=this.cell.parentNode.idd,l=(this.cell.parentNode,this.grid.getUserData(e,"data"));if(null!=l&&""!=l||(l={}),"object"==_typeof(t))this.setCValue(t.text),this.cell.selectTable_value=t.value,this.cell.selectTable_text=t.text;else try{var a=JSON.parse(t);this.setCValue(a.text);var n=a.value;"object"==_typeof(n)&&(n=JSON.stringify(n)),this.cell.selectTable_value=n,this.cell.selectTable_text=a.text}catch(e){this.setCValue(t),this.cell.selectTable_value=t,this.cell.selectTable_text=t}l[this.cellColumnId]=t,this.grid.setUserData(e,"data",l)}},this.getValue=function(){return this.cell.selectTable_value||""},this.edit=function(){for(var a,e=this.cell.selectTable_value,t=this.cell.selectTable_text,l=this.grid.opts,n=0;n<l.columns.length;n++)if(l.columns[n].id==this.cellColumnId){a=l.columns[n];break}var i=a.table;this.cell.innerHTML="<div id='selectTable_xcell_00001'></div>";var r=this;i.beforeLoad&&(0,i.beforeLoad)(i);l={renderer:"selectTable_xcell_00001",items:[{type:"settings",position:"label-left",labelWidth:0,inputWidth:50},{type:"selectTable",table:i,fieldText:a.fieldText,fieldValue:a.fieldValue,name:this.cellColumnId,label:"",placeholder:"单击选择",listener:{afterClose:function(e,t,l){(r.cell.innerHTML="",r.setValue({text:e,value:t}),a.listener&&a.listener.afterClose)&&(0,a.listener.afterClose)(e,t,l)},init:function(e){a.listener&&a.listener.init&&(0,a.listener.init)(e)},afterSelect:function(e,t,l){a.listener&&a.listener.afterSelect&&(0,a.listener.afterSelect)(e,t,l)}}}]};var s=new PlgForm(l);this.cell.selectTable=s,null!=e&&null!=t&&s.getDForm().setData(this.cellColumnId,t,e)},this.detach=function(){return!1}}String.prototype.replaceAll=function(e,t){var l=new RegExp(e,"g");return this.replace(l,t)},eXcell_button.prototype=new eXcell,eXcell_selectTable.prototype=new eXcell,function(U){U.fn.initPlgGrid=function(e){var t=new a(e),l=U(this).attr("id");return t.renderTo(l),t};var a=function(e){var c,i,n,u,r,s,o,d,g,h,l,p,f,m,b,v,y,x,t={title:"",renderer:"",columns:[],multiselect:!1,url:"data.json",type:"get",pageNum:"pageNum",pageSize:"pageSize",params:{pageSize:10,pageNum:1},contentType:"application/x-www-form-urlencoded",page:!0,imagePath:"../../../assets/PlgGrid/",totalCount:"totalCount",toolbar:[],formData:[],pagebar:{buttons:[],type:"full"}};c=U.extend({},t,e),this.opts=c;var a,C,w,S=new Array,D=Prolog.createRandomId(),A=c.params.pageNum?c.params.pageNum:t.params.pageNum,T=c.params.pageSize?c.params.pageSize:t.params.pageSize,N=1;function P(e){U("#"+(a=e)).empty(),e+"-colsetting-"+D,u=e+"-panel-"+D,o=e+"-toolbar-"+D,d=e+"-pagebar-panel-"+D,r=e+"-pagebar-"+D,s=e+"-panel-grid-"+D,g=e+"-panel-grid-title-"+D,function(){if((i=document.createElement("div")).className="plg-grid-panel",i.setAttribute("id",u),c.title&&""!=c.title){var e=document.createElement("div");e.className="plg-grid-title",e.setAttribute("id",g),e.innerHTML=c.title,i.appendChild(e)}if(c.toolbar&&0<c.toolbar.length){var t=document.createElement("div");t.setAttribute("id",o),t.className="plg-toolbar",i.appendChild(t)}var l=document.createElement("div");if(l.setAttribute("id",s),l.className="plg-grid",i.appendChild(l),1==c.page){var a=document.createElement("div");if(a.className="plg-grid-pagebar",a.setAttribute("id",d),function(e){if(c.pagebar&&c.pagebar.buttons&&0<c.pagebar.buttons.length)for(var t=0;t<c.pagebar.buttons.length;t++){var l=c.pagebar.buttons[t],a=document.createElement("button");a.className="layui-btn pagebar-button layui-btn-disabled "+(null!=l.className?l.className:""),a.innerHTML=l.text,l.name&&a.setAttribute("name",l.name),e.appendChild(a),S.push(a)}}(a),c.page){var n=document.createElement("div");n.setAttribute("id",r),a.appendChild(n)}i.appendChild(a)}}(),U("#"+e).append(i),function(e){h=new dhtmlXGridObject(e);var t=null==c.imagePath?GridBasePath:c.imagePath;t&&0<t.length&&(t="/"!=t.substr(t.length-1,1)?t+"/":t,h.setImagePath(t));var l=c.columns.slice(0);v=new Array,y=new Array,x=new Array;var a=new Array,n=new Array,i=new Array,r=new Array,r=new Array,s=new Array;v.push("chbx000"),y.push("<a href='javascript:void(0);' class='plg-grid-first-col'><i class='layui-icon layui-icon-component'></i></a>"),i.push("text-align:center"),a.push("30"),n.push("center"),r.push("ro"),s.push("int"),x.push(!1),c.multiselect&&(v.push("chbx001"),y.push('<img src="'+h._imgURL+'dhxgrid_web/item_chk0.gif" class="plg-grid-second-col" title="">'),i.push("text-align:center"),a.push("28"),n.push("center"),r.push("ch"),s.push("na"),x.push(!1));s.push("str");for(var o=0;o<l.length;o++)v.push(l[o].id),y.push(null==l[o].name?l[o].id:l[o].name),a.push(null==l[o].width?"*":l[o].width),n.push(null==l[o].align?"left":l[o].align),i.push(null==l[o].align?"text-align:left":"text-align:"+l[o].align),r.push(null==l[o].type?"ro":l[o].type),s.push(null==l[o].sort?"str":l[o].sort),l[o].hidden?(x.push(!0),c.multiselect?h.setColumnHidden(o+2,!0):h.setColumnHidden(o+1,!0)):x.push(!1);h.setColumnIds(v.toString()),h.setHeader(y.toString(),null,i),h.setInitWidths(a.toString()),h.setColAlign(n.toString()),h.setColTypes(r.toString()),h.setColSorting(s.toString()),c.filters&&(c.multiselect?h.attachHeader(",,"+c.filters.toString()):h.attachHeader(","+c.filters.toString()));h.enableMultiselect(c.multiselect),h.enableAutoHeight(!1),h.enableRowsHover(!0,"plg-grid-hover"),h.opts=c,h.attachEvent("onAfterSorting",function(e,t,l){I()}),h.attachEvent("onResizeEnd",function(e){I()}),h.attachEvent("onCheck",function(e,t,l){if(1==t&&c.multiselect){k();var a=U("#"+u+" .plg-grid-second-col"),n=a.attr("src");return h.getAllRowIds(",").split(",").length==h.getCheckedRows(1).split(",").length?a.attr("src",n.replaceAll("chk0","chk1")):a.attr("src",n.replaceAll("chk1","chk0")),!0}return!0}),h.attachEvent("onHeaderClick",function(e,t){if(0==e)return function(e){for(var t='<div class="layui-form plg-clsset-form" >',l=c.multiselect?2:1;l<v.length;l++)t+='<div class=" layui-form-item plg-clsset-item"><input type="checkbox"  lay-filter="plgclssetitem" index='+l+' name="'+v[l]+'" lay-skin="primary" title="'+y[l]+'" '+(x[l]?"":"checked")+"></div>";t+='<div style="clear:both;margin:0px;height:1px;">&nbsp;</div>',t+="</div>",PlgDialog.tips(t,e,{tips:[3,"#fff"],time:0,shade:.001,shadeClose:!0,success:function(){layui.form.render("checkbox"),layui.form.on("checkbox(plgclssetitem)",function(e){var t=U(e.elem).attr("index");e.elem.checked?(h.setColumnHidden(t,!1),x[t]=!1):(h.setColumnHidden(t,!0),x[t]=!0)})}})}("#"+u+" .plg-grid-first-col i"),!1;if(1!=e)return!0;if(c.multiselect){var l=U("#"+u+" .plg-grid-second-col"),a=l.attr("src");-1<a.indexOf("chk0")?(E(!0),l.attr("src",a.replaceAll("chk0","chk1"))):(E(!1),l.attr("src",a.replaceAll("chk1","chk0"))),event.stopPropagation()}return!0})}(s),h.init(),c.toolbar&&c.toolbar.length&&(l=new PlgForm({renderer:o,items:c.toolbar}),U("#"+o).addClass("plg-toolbar")),function(){if(null!=c.formData){p=new PlgForm({items:c.formData}),f=new Array;for(var e=0;e<c.formData.length;e++)R(c.formData[e])}}(),setTimeout(function(){I()},300),U("#"+a).addClass("grid-container-full")}function I(){var e=U("#"+a).height()-50-(U("#"+o).height()?U("#"+o).height():0)-(U("#"+g).height()?U("#"+g).height():0)-(U("#"+d).height()?U("#"+d).height():0);U("#"+s+" .gridbox").css("min-height",e+"px"),U("#"+s+" .gridbox").css("height",e+"px"),U("#"+s+" .objbox").css("min-height",e-20+"px"),U("#"+s+" .objbox").css("height",e-20+"px"),U("#"+u).css("height","auto")}function k(){var e=h.getCheckedRows(1);if(null!=e&&""!=e)for(var t=0;t<S.length;t++){(l=U(S[t])).hasClass("layui-btn-disabled")&&l.removeClass("layui-btn-disabled")}else for(t=0;t<S.length;t++){var l;(l=U(S[t])).hasClass("layui-btn-disabled")||l.addClass("layui-btn-disabled")}}function R(e){if(null!=e.editable&&0==e.editable&&f.push(e.name),e.list&&0<e.list.length)for(var t=0;t<e.list.length;t++)R(e.list[t])}function _(e,t){A=e.curr,T=e.limit,t||H()}function E(e){for(var t=h.getRowsNum(),l=e?1:0,a=0;a<t;a++)h.cellByIndex(a,1).setValue(l);k()}function j(e,t){if(e)return V(),O(e),void z();t&&(C=t);if(V(),null!=c.url&&""!=c.url){var l=c.params;if(c.page)if("object"==_typeof(l))l[c.pageNum]=A,l[c.pageSize]=T;else{var a=JSON.parse(l);a[c.pageNum]=A,a[c.pageSize]=T,l=JSON.stringify(a)}Prolog.ajax({url:c.url,type:c.type,data:l,contentType:c.contentType,success:function(e){O(e),z(),C&&C(!0)},error:function(){z(),C&&C(!1)}})}}function H(e,t){h.clearAll(),j(e,t)}function O(e){if("object"!=_typeof(e)&&(e=JSON.parse(e)),null!=e.success&&0==e.success)return z(),void PlgDialog.msg(e.message);if(e.data&&""!=e.data){var t;t=e.data.list?e.data.list:e.data,N=(A-1)*T+1;try{h.parse(function(e){for(var t,l=new Array,a=c.columns,n=0;n<e.length;n++){var i=e[n],r=new Array;c.multiselect?(r.push(N),r.push(0)):r.push(N),N+=1;for(var s=0;s<a.length;s++){var o=a[s].id;a[s].render&&(t=a[s].render(i[o],i))?r.push(t):r.push(i[o])}l.push({id:i[a[0].id],data:r,userdata:{data:i}})}return{rows:l}}(t),"json"),k(),I()}catch(e){return void PlgDialog.msg("数据错误！")}if(c.page&&function(e,t,l){if(0!=c.page){T=null==T?0:T,t=null==t?0:t,U("#"+e).empty(),n=layui.laypage;var a=["prev","page","next","limit","refresh","skip","count"];c.pagebar&&"simple"==c.pagebar.type?a=["prev","page","next","refresh","count"]:c.pagebar&&"min"==c.pagebar.type&&(a=["prev","next","count"]),n.render({elem:e,count:t,limit:T,curr:l,limits:[5,10,20,30,50,100,200,500,1e3],groups:5,theme:"plg",prev:'<i class="layui-icon layui-icon-left"></i>',next:'<i class="layui-icon layui-icon-right"></i>',layout:a,jump:_})}}(r,e.data[c.totalCount],A),c.multiselect){var l=U("#"+u+" .plg-grid-second-col"),a=l.attr("src");l.attr("src",a.replaceAll("chk1","chk0"))}}else PlgDialog.msg("数据为空")}this.attachPageBarEvent=function(a){U("#"+d).on("click",".pagebar-button",function(){var e=U(this);if(!e.hasClass("layui-btn-disabled")){var t=e.attr("name"),l=h.getCheckedRows(1);a(t,l)}})},this.showDialog=function(a,e,t,l,i,r){m&&m(a,e,t,l,i);var s=this;if(null!=p)if(1!=a||s.getSelectedRowId()){var n={title:e,closeBtn:1,type:1,resize:!0,tipsMore:!0,btn:["保存","重置","取消"],btn1:function(t,e){if(0!=p.validate()){var l,a=PlgDialog.msg("数据加载中...",{icon:16,shade:.8,time:0});r?(l=new Array).push(p.getFormData()):l=p.getFormData();var n=[];c.formData&&1<c.formData.length&&(c.formData.map(function(e){"label"===e.type&&e.list.map(function(e){n.push(e.name)})}),n=n.filter(function(e){return e}));p.getFormData();null!=i.contentType&&-1<i.contentType.indexOf("application/json")?i.data=JSON.stringify(l):i.data=l,i.success=function(e){e.success?(s.reload(),PlgDialog.close(t)):PlgDialog.msg(e.message),PlgDialog.close(a)},Prolog.ajax(i)}},btn2:function(e,t){return p.clear(),!1},btn3:function(e,t){PlgDialog.close(e)},area:[t+"px",l+"px"],content:'<div id="'+u+'-win-form-1"></div>',success:function(e,t){if(p.renderTo(u+"-win-form-1"),1==a){!function(e,t){var l=e.getFormData();for(var a in l)l[a]=t[a];e.setFormData(l)}(p,s.getSelectedRowData());for(var l=0;l<f.length;l++)p.disableItem(f[l])}else for(l=0;l<f.length;l++)p.enableItem(f[l]);b&&b(p)}};1==a&&(n.btn=["保存","取消"],n.btn2=n.btn3,n.btn3=null),PlgDialog.open(n)}else PlgDialog.msg("请选择行!");else PlgDialog.msg("未设置表单")},this.getElement=function(){return i},this.renderTo=function(e){return P(e),this},this.getGrid=function(e){return h},this.loadData=function(e,t){j(e,t)},this.getParams=function(){return c.params},this.setParams=function(e){c.params=e,T=e.pageSize?e.pageSize:T,A=e.pageNum?e.pageNum:A},this.reload=function(e){H(e)},this.getCheckedIds=function(){return h.getCheckedRows(1)},this.getSelectedRowId=function(){return h.getSelectedRowId()},this.getSelectedRowData=function(e){var t=h.getSelectedRowId();return e?h.getUserData(t,"data")[e]:h.getUserData(t,"data")},this.getRowData=function(e,t){if(null==t||0==t.length)return h.getUserData(e,"data");if(Array.isArray(t)){for(var l={},a=0;a<t.length;a++)l[t[a]]=h.getUserData(e,"data")[t[a]];return l}return h.getUserData(e,"data")[t]},this.getSelectedCellIndex=function(){return h.getSelectedCellIndex()},this.getRowId=function(e){return h.getRowId(e)},this.getRowIndex=function(e){return h.getRowIndex(e)},this.getCellObject=function(e,t){return h.cells(e,t)},this.getCellValue=function(e,t){return h.cells(e,t).getValue()},this.getCellObject2=function(e,t){return h.cells2(e,t)},this.getCellValue2=function(e,t){return h.cells2(e,t).getValue()},this.setCellValue=function(e,t,l){h.cells(e,t).setValue(l);var a=v[t],n=h.getUserData(e,"data");null!=n&&""!=n||(n={}),n[a]=l,h.setUserData(e,"data",n)},this.addRow=function(e,t){var l=[];l.push(h.getRowsNum()+1);var a=1;c.multiselect&&(l.push(0),a=2);for(var n=a;n<v.length;n++){var i=t[v[n]];l.push(i||"")}h.addRow(e,l.toString()),h.setUserData(e,"data",t)},this.getColumnsNum=function(){return h.getColumnsNum()},this.getGridForm=function(){return p},this.getToolBarForm=function(){return l},this.setColWidth=function(e,t){h.setColWidth(e,t.toString())},this.setColumnColor=function(e){h.setColumnColor(e.toString())},this.setColumnHidden=function(e,t){h.setColumnHidden(e,t)},this.setRowHidden=function(e,t){h.setRowHidden(colIndex,t)},this.selectRowById=function(e){h.selectRowById(e)},this.resetSize=I,this.on=function(e,a){"beforeDialogOpen"==e?m=a:"afterDialogOpen"==e?b=a:"onAfterSorting"==e?h.attachEvent(e,function(e,t,l){I(),a(e,t,l)}):"onResizeEnd"==e?h.attachEvent(e,function(e){I(),a(e)}):"onCheck"==e?h.attachEvent(e,function(e,t,l){1==t&&c.multiselect&&k(),a(e,t,l)}):h.attachEvent(e,a)},this.attachEvent=this.on,this.attachToolBarEvent=function(e,t){l.on(e,t)},this.splitAt=function(e){h.splitAt(e);for(var t=0;t<x.length;t++)x[t]&&h.setColumnHidden(t,!0)};var V=function(){w=PlgDialog.load(1,{anim:5,shade:[.6,"#fff"],success:function(e,t){U("#layui-layer"+t).appendTo("#"+s+" .objbox"),U("#layui-layer-shade"+t).appendTo("#"+s+" .objbox")}})},z=function(){PlgDialog.close(w)};this.showLoading=V,this.closeLoading=z,c.renderer&&""!=c.renderer&&P(c.renderer)};window.PlgGrid=a}(jQuery);
"use strict";function _defineProperty(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}!function(o){o.fn.initPlgCard=function(n){var e=new r(n),t=o(this).attr("id");return e.renderTo(t),e};var r=function(e){var n;if(e&&e.renderer){var l;l={};var t=(_defineProperty(n={_style:(l=o.extend({},l,e.config)).style,_data:l.data||"",_strTitle:function(){return'<div class="plg-card-components">                   <div class="plg-card-header-container">                  <fieldset><legend>'},_strHead:function(){return'<div class="plg-card-group">'},_strTitleHead:function(){return'</legend></fieldset></div><div class="plg-card-group">'},_strFooter:function(){return"</div>"}},"_strFooter",function(){return"</div></div>"}),_defineProperty(n,"generateOneTemplate",function(n){var t="";return n.forEach(function(n){t+='\n                <div class="plg-card">\n                  <div class="plg-card-body">\n                    <div class="plg-card-no">'.concat(n.cardNo,'</div>\n                    <div class="plg-card-main">').concat(n.cardName,'</div>\n                   </div>\n  \n                   <ul class="plg-card-btn-group">\n              ');var e="";n.btn.forEach(function(n){e+="\n                <li>".concat(n.text,"</li>\n              ")}),t+=e,t+="\n                </ul>\n              </div>\n            "}),t}),_defineProperty(n,"oneTemplate",function(){var n=this,t="";return n._data.forEach(function(n){t+='\n                <div class="plg-card">\n                  <div class="plg-card-body">\n                    <div class="plg-card-no">'.concat(n.cardNo,'</div>\n                    <div class="plg-card-main">').concat(n.cardName,'</div>\n                   </div>\n  \n                   <ul class="plg-card-btn-group">\n              ');var e="";n.btn.forEach(function(n){e+="\n                <li>".concat(n.text,"</li>\n              ")}),t+=e,t+="\n                </ul>\n              </div>\n            "}),n._strHead()+t+n._strFooter()}),_defineProperty(n,"twoTemplate",function(){var n=this,t="";return n._data.forEach(function(n){t+='\n                <div class="plg-card">\n                  <div class="plg-card-body primary">\n                    '.concat(n.cardName,'\n                   </div>\n  \n                   <ul class="plg-card-btn-group">\n              ');var e="";n.btn.forEach(function(n){e+="\n                <li>".concat(n.text,"</li>\n              ")}),t+=e,t+="\n                </ul>\n              </div>\n            "}),n._strHead()+t+n._strFooter()}),_defineProperty(n,"threeTemplate",function(){var n=this,t="";return n._data.forEach(function(n){t+='\n                <div class="plg-card">\n                  <div class="plg-card-body primary">\n                    '.concat(n.cardName,'\n                   </div>\n  \n                   <ul class="plg-card-btn-group">\n              ');var e="";n.btn.forEach(function(n){e+="\n                <li>".concat(n.text,"</li>\n              ")}),t+=e,t+="\n                </ul>\n              </div>\n            "}),n._strHead()+t+n._strFooter()}),_defineProperty(n,"addTemplate",function(){return'<div class="plg-card plg-add">\n                  <div class="layui-icon layui-icon-add-1 "></div>\n                </div>'}),_defineProperty(n,"oneTitleTemplate",function(){var e=this,t="";return e._data.forEach(function(n){t+='<div class="plg-card-components"><div class="plg-card-header-container">\n                <fieldset><legend>\n                '.concat(n.title,"\n                <legend><fieldset></div>"),t+=e._strHead(),t+=e.generateOneTemplate(n.dataList),t+=e._strFooter(),t+="</div>"}),t}),_defineProperty(n,"oneTitleAddTemplate",function(){var e=this,t="";return!(!e._data||e._data.length<1)&&(e._data.forEach(function(n){t+='<div class="plg-card-components"><div class="plg-card-header-container">\n                <fieldset><legend>\n                '.concat(n.title,"\n                <legend><fieldset></div>"),t+=e._strHead(),t+=e.generateOneTemplate(n.dataList),t+=e.addTemplate(),t+=e._strFooter(),t+="</div>"}),t)}),_defineProperty(n,"getHtmlFragment",function(){var n=this._style+"Template";return this[n]?this[n]():new Error("不存在这个方法")}),n);this.on=function(n,c){l&&"add"!==l.style&&n&&"click"==n&&(["one","two","three"].includes(l.style)&&o("#"+e.renderer).on("click","li",function(n){var e=o(this).closest(".plg-card").index(),t=l.data[e].cardNo,r=l.data[e].btn[o(this).index()].fn;c&&c(t,r)}),["oneTitle","twoTitle","threeTitle","oneTitleAdd","twoTitleAdd","threeTitleAdd"].includes(l.style)&&(o("#"+e.renderer).off("click").on("click","li",function(n){var e,t,r=o(this).closest(".plg-card-components").index(),a=o(this).closest(".plg-card").index(),d=l.data[r].dataList[a];e=d.cardNo,t=d.btn[o(this).index()].fn;var i=l.data[r].title;i?c&&c(e,t,i):c&&c(e,t)}),o("#"+e.renderer).on("click",".plg-add",function(n){var e=o(this).closest(".plg-card-components").index(),t=l.data[e].title;t?c&&c(void 0,void 0,t):c&&c(void 0,void 0)}))),l&&"add"===l.style&&n&&"click"==n&&o("#"+e.renderer).on("click",".plg-card",function(n){c&&c()})},this.renderTo=function(n){o("#"+n).append(t.getHtmlFragment())},e.renderer&&this.renderTo(e.renderer)}};window.PlgCard=r}(jQuery);
"use strict";!function(e){e.fn.initPlgCardList=function(t){var n=new a(t),i=e(this).attr("id");return n.renderTo(i),n};var a=function t(n){if(!n)return!1;var i;i={isShowAdd:!0};var a={_data:(i=Object.assign({},i,n.data))||"",_strTitle:function(){var t=this,n="";return n+='<div class="plg-zone-container">\n        <div class="plg-zone-header">\n          <div class="plg-title"><i class="layui-icon layui-icon-location"></i>\n          '.concat(t._data.zoneName,"</div>"),t._data.isShowAdd&&(n+='<div class="plg-add">\n            <button class="layui-btn layui-btn-normal" data-zoneid='.concat(t._data.zoneId,' name="plg-add">\n              <i class="layui-icon">&#xe654;</i>\n              添加\n            </button>\n          </div>')),n+='</div>\n          <div class="plg-customer-list">\n          <ul class="layui-row">'},_strCellStart:function(){return'<li class="layui-col-lg3 layui-col-md4 layui-col-sm6 \n        layui-col-xs12">\n        <div class="plg-cell">'},_strCellHead:function(t){return'<div class="plg-customer-name">\n          <i class="plg-badge-dot"></i>'.concat(t,"\n        </div>")},_strCellBody:function(t){return'<div class="plg-customer-des">'.concat(t,"</div>")},_strCellFooter:function(t){var n="";n+='<div class="plg-customer-other">\n          <div class="plg-cutomer-no">编号:<span>'.concat(t.useNo,"</span></div>");var i="";if(0<Object.keys(t.btns).length){var a;for(a in i+='<div class="plg-cutomer-operating" data-id='.concat(t.id,">"),t.btns)i+='<span class="plg-'.concat(a,'">').concat(t.btns[a],"</span>");i+="</div>"}return n+=i,n+="</div>"},_strCellEnd:function(){return"</div>\n        </li>"},_strFooter:function(){return"</ul>\n          </div>\n        </div>"},getHtmlFragment:function(){var i=this,a="";return i._data.customerList&&0<i._data.customerList.length&&i._data.customerList.map(function(t){var n={id:t.id,useNo:t.useNo,btns:t.btns};a+=i._strCellStart(),a+=i._strCellHead(t.name),a+=i._strCellBody(t.description),a+=i._strCellFooter(n),a+=i._strCellEnd()}),e(i._strTitle()+a+i._strFooter())}};t.prototype.cuson=function(){},this.on=function(t,n){var i=this;"add"!==t?i.event.find(".plg-"+t).length&&i.event.find(".plg-"+t).on("click",function(){var t=e(this).closest(".plg-cutomer-operating").data("id");n&&n(t)}):i.event.find(".plg-add").eq(0).on("click",function(){var t=e(this).find(".layui-btn").eq(0).data("zoneid");n&&n(t)})},this.renderTo=function(t){this.event=a.getHtmlFragment(),e("#"+t).append(this.event)},n.renderer&&this.renderTo(n.renderer)};window.PlgCardList=a}(jQuery);
"use strict";!function(t,e){e.use(["laydate"],function(){var r=e.laydate;window.plgDate=r,t.fn.plgDateRender=function(e){var n=this,i=t.extend(!0,{value:""},e);return 1<this.length?t(this).each(function(e,t){i.elem=this,n.otps=r.render(i)}):(i.elem=this.selector,n.otps=r.render(i)),n}})}(jQuery,layui);
"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}dhtmlXForm.prototype.items.blockSelect={render:function(n,a){n._type="blockSelect",n._idd=a.name,n._value="",n._eable=!0;var o=this,t="dhxId_blockSelect_"+Prolog.createRandomId();n._cid=t;var e=document.createElement("div");e.setAttribute("class","dhxform_label "+a.labelAlign),e.innerHTML='<label for="'+t+'">'+a.label+"</label>",a.labelWidth&&(e.style.width=a.labelWidth+"px"),n.appendChild(e);var r=document.createElement("div");r.setAttribute("class","dhxform_control");var s=document.createElement("div");s.setAttribute("class","plg-form-multiSelect"),s.setAttribute("id",t),s.style.width=a.width+"px";var u=document.createElement("ul");if(a.params=null==a.params?{}:a.params,a.requestMethod=null==a.requestMethod?"GET":a.requestMethod,a.valueField=null==a.valueField?"value":a.valueField,a.textField=null==a.textField?"text":a.textField,null!=a.url&&""!=a.url)Prolog.ajax({url:a.url,type:a.requestMethod,data:a.params,success:function(t){if(t.success){for(var e=t.data.list?t.data.list:t.data,i=0;i<e.length;i++){var l=document.createElement("li");l.innerHTML="<span>"+e[i][a.textField]+"</span>",l.setAttribute("value",e[i][a.valueField]),u.appendChild(l)}if(s.appendChild(u),r.appendChild(s),n.appendChild(r),a.disabled)return this.disable(n),this;o.bindClickEvent(n,a)}}});else{if(a.data&&0<a.data.length)for(var i=0;i<a.data.length;i++){var l=document.createElement("li");l.innerHTML="<span>"+a.data[i][a.textField]+"</span>",l.setAttribute("value",a.data[i][a.valueField]),u.appendChild(l)}if(s.appendChild(u),r.appendChild(s),n.appendChild(r),a.disabled)return this.disable(n),this;this.bindClickEvent(n,a)}return a.hidden&&(n.style.display="none"),this},bindClickEvent:function(l,n){var a=l._cid;$("#"+a).on("click","li",function(){if(!$(this).hasClass("disabled")){null==n.multiSelect||0==n.multiSelect?$(this).hasClass("active")?$(this).removeClass("active"):($("#"+a+" li").removeClass("active"),$(this).addClass("active")):$(this).hasClass("active")?$(this).removeClass("active"):$(this).addClass("active");for(var t=[],e=$("#"+a+" .active"),i=0;i<e.length;i++)t.push($(e[i]).attr("value"));l._value=t.join(","),n.listener&&(_callback=n.listener,_callback(l._value))}})},destruct:function(t){$("#"+t._cid+" li").unbind("click"),t.innerHTML=""},setValue:function(e,t){(e._value=t).split(",").forEach(function(t){$("#"+e._cid+" li[value="+t+"]").addClass("active")})},getValue:function(t){return t._value},enable:function(t){$("#"+t._cid+" li").removeClass("disabled"),t._eable=!0},disable:function(t){t._eable=!1,$("#"+t._cid+" li").addClass("disabled")},reset:function(t){$("#"+t._cid+" li").removeClass("active"),t._value=""},clear:function(t){this.reset(t)},showItem:function(t){},hideItem:function(t){t.style.display="none"}},dhtmlXForm.prototype.clearBlockSelect=function(t){return this.doWithItem(t,"clear")},dhtmlXForm.prototype.getFormData_blockSelect=function(t){return this.doWithItem(t,"getValue")},dhtmlXForm.prototype.setFormData_blockSelect=function(t,e){return this.doWithItem(t,"setValue",e)},dhtmlXForm.prototype.items.selectTable={render:function(u,d){u._type="selectTable",u._idd=d.name,u._value="",u._table=d.table,u._active=!1;var c,o="dhxId_selectTable_"+Prolog.createRandomId(),t=document.createElement("div");t.setAttribute("class","dhxform_label "+d.labelAlign),t.innerHTML='<label for="'+o+'">'+d.label+"</label>",d.labelWidth&&(t.style.width=d.labelWidth+"px"),u.appendChild(t);var e=document.createElement("div");e.setAttribute("class","dhxform_control");var h=document.createElement("input");h.setAttribute("type","text"),h.setAttribute("class","dhxform_textarea plg-input"),h.style.width=d.width+"px",h.setAttribute("placeholder",d.placeholder),h.setAttribute("readonly","readonly"),e.appendChild(h);var m=document.createElement("input");if(m.setAttribute("type","hidden"),m.setAttribute("name",d.name),e.appendChild(m),u.appendChild(e),1==d.disabled)return h.setAttribute("disabled","disabled"),m.setAttribute("disabled","disabled"),u._enabled=!1,this;function r(t){if(t){var e=c.getRowData(t,d.fieldValue),i=null!=u._value&&""!=u._value?JSON.parse(u._value):[];if(-1==Prolog.hasJson(i,e))return;var l=h.getAttribute("value")?h.getAttribute("value").split(","):[],n=d.fieldText,a=d.fieldValue,o=c.getRowData(t,a),r=Prolog.hasJson(i,o);-1<r&&i.splice(r,1);var s=c.getRowData(t,n);if(l.splice(l.indexOf(s),1),h.setAttribute("value",l.toString()),m.setAttribute("value",JSON.stringify(i)),u._textValue=l.toString(),u._value=JSON.stringify(i),"object"==_typeof(d.listener)&&null!=d.listener.afterSelect)(0,d.listener.afterSelect)(!1,t,c)}}function s(t){if(t){var e=c.getRowData(t,d.fieldValue),i=null!=u._value&&""!=u._value?JSON.parse(u._value):[];if(-1<Prolog.hasJson(i,e))return;var l=h.getAttribute("value")?h.getAttribute("value").split(","):[];0==u._table.multiselect&&(i=[],l=[]);var n=d.fieldText,a=d.fieldValue,o=c.getRowData(t,a);i.push(o);var r=c.getRowData(t,n);if(l.push(r),h.setAttribute("value",l.toString()),m.setAttribute("value",JSON.stringify(i)),u._textValue=l.toString(),u._value=JSON.stringify(i),"object"==_typeof(d.listener)&&null!=d.listener.afterSelect)(0,d.listener.afterSelect)(!0,t,c)}}return h.onclick=function(t){var e=Prolog.getLeft(this),i=Prolog.getTop(this)+$(this).parent().height(),l=$(this).width();$(this).height(),d.fieldText,d.fieldValue;layerId="layer"+Prolog.createRandomId();var n=d.tableWidth?d.tableWidth:600,a=d.tableHeight?d.tableHeight:500;e+l>document.body.clientWidth?e=document.body.clientWidth-n-30:e+n>document.body.clientWidth&&(e=e-n+l+10),window.innerHeight,layer.open({type:1,id:layerId,title:!1,resize:!1,offset:[i+"px",e+"px"],btn:[],closeBtn:0,area:[n+"px",a+"px"],shadeClose:!0,shade:1e-6,content:'<div id="'+o+'_grid" style="width:100%;height:'+(a-30)+'px;"></div>',end:function(){(u._active=!1,"object"==_typeof(d.listener)&&null!=d.listener.afterClose)&&(0,d.listener.afterClose)(u._textValue,u._value,c)},success:function(t,i){if(u._active=!0,$("#layui-layer"+i+" .layui-layer-btn").hide(),$("#layui-layer"+i).height($("#layui-layer"+i).height()-23),$("#layui-layer"+i+" .layui-layer-content").css("padding","0px"),(c=new PlgGrid(u._table)).renderTo(o+"_grid"),$("#layui-layer"+i+" .grid-container-full").css("margin-top","8px"),c.loadData(null,function(){for(var t=c.getGrid().getRowsNum(),e=0;e<t;e++){var i=c.getGrid().getRowId(e),l=c.getRowData(i,d.fieldValue),n=null!=u._value&&""!=u._value?JSON.parse(u._value):[];-1<Prolog.hasJson(n,l)&&(u._table.multiselect?c.setCellValue(i,1,1):c.selectRowById(i))}}),u._table.multiselect?(c.on("onCheck",function(t,e,i){1==e&&(i?s(t):r(t))}),c.on("onHeaderClick",function(t,e){if(1!=t)return!0;if(-1<$("#"+o+"_grid .plg-grid-second-col").attr("src").indexOf("chk0"))for(var i=c.getGrid().getRowsNum(),l=0;l<i;l++){r(c.getGrid().getRowId(l))}else c.getCheckedIds().split(",").forEach(function(t){s(t)});return!0})):c.on("onRowSelect",function(t,e){s(t),PlgDialog.close(i)}),d.listener)if("function"==typeof d.listener)(0,d.listener)(c);else if("object"==_typeof(d.listener)&&null!=d.listener.init){(0,d.listener.init)(c)}}})},d.hidden&&(u.style.display="none"),this},destruct:function(t){t.getElementsByTagName("input")[0].onclick=null,t.innerHTML=""},setValue:function(t,e){t.getElementsByTagName("input")[1].setAttribute("value",e),t._value=e},getValue:function(t){return t._value},enable:function(t){var e=t.getElementsByTagName("input");e[0].removeAttribute("disabled"),e[1].removeAttribute("disabled")},disable:function(t){var e=t.getElementsByTagName("input");e[0].setAttribute("disabled","disabled"),e[1].setAttribute("disabled","disabled")},getText:function(t){return t._textValue},setText:function(t,e){t._textValue=e,t.getElementsByTagName("input")[0].setAttribute("value",e)},reset:function(t){var e=t.getElementsByTagName("input");e[0].setAttribute("value",""),e[1].setAttribute("value",""),c="",t._value=""},clear:function(t){this.reset(t)},setTableConfig:function(t,e){t._table=e},showItem:function(t){},hideItem:function(t){t.style.display="none"},active:function(t){var e=t.getElementsByTagName("input");$(e[0]).trigger("click")},isActive:function(t){return t._active},setData:function(t,e,i){this.setText(t,e),this.setValue(t,i)}},dhtmlXForm.prototype.setData=function(t,e,i){this.doWithItem(t,"setData",e,i)},dhtmlXForm.prototype.active=function(t){this.doWithItem(t,"active")},dhtmlXForm.prototype.isActive=function(t){return this.doWithItem(t,"isActive")},dhtmlXForm.prototype.getText=function(t){return this.doWithItem(t,"getText")},dhtmlXForm.prototype.setText=function(t,e){return this.doWithItem(t,"setText",e)},dhtmlXForm.prototype.clearSelectTable=function(t){return this.doWithItem(t,"clear")},dhtmlXForm.prototype.setTableConfig=function(t,e){return this.doWithItem(t,"setTableConfig",e)},dhtmlXForm.prototype.getFormData_selectTable=function(t){return this.doWithItem(t,"getValue")},dhtmlXForm.prototype.setFormData_selectTable=function(t,e){return this.doWithItem(t,"setValue",e)},function(m){m.fn.initPlgForm=function(t){var e=new l(t),i=m(this).attr("id");return e.renderTo(i),e};var l=function(t){var r,s,l,n,i=this,a=new Array;function e(t){m("#"+(n=t)).empty(),s=new dhtmlXForm(t,l);for(var e=0;e<r.items.length;e++){var i=r.items[e];c(t,i),d(i),o(i),u(i)}m(".plg-toolbar-right").parent().css("float","right"),m(".plg-toolbar-left").parent().css("float","left"),m("#"+t+" input").addClass("plg-input"),m("#"+t+" textarea").addClass("plg-input"),m("#"+t+" select").addClass("plg-input"),m("#"+t).find(".layui-row").parent().css("width","100%")}function o(t){if("combo"==t.type){var e=s.getCombo(t.name);e.conf.combo_width=t.width,m(e.list).appendTo("#"+n),s.setItemWidth(t.name,t.width)}if(t.list&&0<t.list.length)for(var i=0;i<t.list.length;i++)o(t.list[i])}function u(t){if("button"==t.type&&t.className&&-1<t.className.indexOf("toggle")&&i.renderHiddenToggleItem(t.name),t.list&&0<t.list.length)for(var e=0;e<t.list.length;e++)u(t.list[e])}function d(t){if(t.hidden&&t.name&&a.push(t.name),t.list&&0<t.list.length)for(var e=0;e<t.list.length;e++)d(t.list[e])}function c(t,e){if(e&&e.placeholder&&("input"==e.type?m("#"+t+" input[name='"+e.name+"']").attr("placeholder",e.placeholder):"select"==e.type?m("#"+t+" select[name='"+e.name+"']").attr("placeholder",e.placeholder):"combo"==e.type&&m("#"+t+" input[name='"+e.name+"']").parent().children("input").attr("placeholder",e.placeholder)),e.list&&0<e.list.length)for(var i=0;i<e.list.length;i++)c(t,e.list[i])}r=m.extend({},{renderer:null,items:[]},t),l=r.items,this.loadComboData=function(t,e){var i=function t(e,i){for(var l=0;l<i.length;l++){var n=i[l];if(n.name==e)return n;if(n.list){var a=t(e,n.list);if(null!=a)return a}}return null}(t,r.items);if(null==i)PlgDialog.msg("找不到组件");else{var l=s.getCombo(i.name),n=(a=i.remote?i.remote:{})?a.success:null;if(e)var a=m.extend(!0,i.remote,e);l.clearAll(!1);var o=PlgDialog.load(1);a.error=function(){PlgDialog.close(o)},a.success=function(t){if(0==t.success)return PlgDialog.msg("数据加载失败，"+t.message),void PlgDialog.close(o);var e=null;e=function(t,e){for(var i={options:[]},l=0;l<t.length;l++){var n=t[l];e.valueField&&(n.value=n[e.valueField]),e.textField&&(n.text=n[e.textField]),i.options.push(n)}return i}(e=t.data.list?t.data.list:t.data,a),l.load(e,function(){PlgDialog.close(o)}),n&&n(t)},Prolog.ajax(a)}},this.getFormData=function(){return s.getFormData()},this.getDForm=function(){return s},this.getInput=function(t){return s.getInput(t)},this.getItemWidth=function(t){return s.getItemWidth(t)},this.getOptions=function(t){return s.getOptions(t)},this.getSelect=function(t){return s.getSelect(t)},this.getCheckedValue=function(t){return s.getCheckedValue(t)},this.getCombo=function(t){return s.getCombo(t)},this.hideItem=function(t,e){s.hideItem(t,e)},this.showItem=function(t,e){s.showItem(t,e)},this.showAllHItems=function(){for(var t=0;t<a.length;t++)s.showItem(a[t]);h=!1},this.hideAllHItems=function(){for(var t=0;t<a.length;t++)s.hideItem(a[t]);h=!0};var h=!0;this.toggleHItems=function(){return!(h=h?(this.showAllHItems(),!1):(this.hideAllHItems(),!0))},this.addHiddenToggleItem=function(t,e,i){var l=this;s.addItem(t,{type:"button",name:"plg-more-001",value:"展开<i class='layui-icon layui-icon-down'></i>",className:"link"},e,i),s.attachEvent("onButtonClick",function(t){"plg-more-001"==t&&(l.toggleHItems()?l.setItemLabel("plg-more-001","收起<i class='layui-icon layui-icon-up'></i>"):l.setItemLabel("plg-more-001","展开<i class='layui-icon layui-icon-down'></i>"))})},this.renderHiddenToggleItem=function(e){var i=this;i.setItemLabel(e,"展开<i class='layui-icon layui-icon-down'></i>"),s.attachEvent("onButtonClick",function(t){e==t&&(i.toggleHItems()?i.setItemLabel(e,"收起<i class='layui-icon layui-icon-up'></i>"):i.setItemLabel(e,"展开<i class='layui-icon layui-icon-down'></i>"))})},this.disableItem=function(t){s.disableItem(t)},this.disableAllItem=function(){s.forEachItem(function(t){s.disableItem(t)})},this.enableItem=function(t){s.enableItem(t)},this.enableAllItem=function(t){s.forEachItem(function(t){s.enableItem(t)})},this.clear=function(){s.clear()},this.addItem=function(t,e,i,l){s.addItem(pId,e,i,l)},this.removeItem=function(t,e){s.removeItem(t,e)},this.reset=function(){s.reset()},this.getItemLabel=function(t,e){return 2==arguments.length?s.getItemLabel(t,e):s.getItemLabel(t)},this.getItemValue=function(t){return s.getItemValue(t)},this.setFormData=function(t){s.setFormData(t)},this.setFormItemData=function(t,e){var i={};i[t]=e,s.setFormData(i)},this.setItemFocus=function(t){s.setItemFocus(t)},this.setItemHeight=function(t,e){s.setItemHeight(t,e)},this.setItemWidth=function(t,e){s.setItemWidth(t,e)},this.setItemLabel=function(t,e){s.setItemLabel(t,e)},this.setItemValue=function(t,e){s.setItemValue(t,e)},this.setItemReadonly=function(t,e){s.setReadonly(t,e)},this.setItemRequired=function(t,e){s.setRequired(t,e)},this.setItemValidation=function(t,e){s.setValidation(t,e)},this.validateItem=function(t){return s.validateItem(t)},this.validate=function(){return s.validate()},this.forEachItem=function(t){s.forEachItem(t(name))},this.renderTo=function(t){e(t)},this.on=function(t,e){s.attachEvent(t,e)},this.attachEvent=this.on,this.attachComboEvent=function(t,e,i){s.getCombo(t).attachEvent(e,i)},r.renderer&&e(r.renderer)};window.PlgForm=l}(jQuery);
"use strict";window.onload=function(){var i,s,e;i=navigator.userAgent,s=-1<i.indexOf("compatible")&&-1<i.indexOf("MSIE"),i.indexOf("Edge"),e=-1<i.indexOf("Trident")&&-1<i.indexOf("rv:11.0"),(s||e)&&(document.getElementsByTagName("body")[0].innerHTML=['<div class="ieReg"><div class="banler"><div class="ie_content"><div class="topbar"><i class="ie_img"></i><span style="color:#cc6600">尊敬的用户：</span>您当前浏览器版本过低，本站功能可能无法正常浏览，请使用或下载以下几种推荐浏览器已达到最佳效果。</div><ul class="bro_list"><li><i class="chrome"></i><p>谷歌浏览器</p></li><li><i class="fires"></i><p>火狐浏览器</p></li><li><i class="Safari"></i><p>Safari苹果浏览器</p></li><li><i class="Edge"></i><p>Microsoft Edge</p></li></ul></div></div><div class="ie_content n_2"></div></div>'].join(""))};
"use strict";!function(r,n){r.fn.initPlgInputTags=function(a){var e=new t(a),n=r(this).attr("id");return e.renderTo(n),e};var t=function(a){var e={checkboxName:"",layFilter:"",data:null,dom:null,tagsId:"tags-"+Prolog.createRandomId(),meunPanelThis:null,setDefaultValue:function(a){if(!(a&&0<a.length))return!1;a.map(function(a){a.hasOwnProperty("checked")||(a.checked=!1)}),this.data=a},wrapTemplate:function(){var e=this,n="";return n+='<div class="layui-form-item">\n        <label class="layui-form-label">原始复选框</label>\n        <div class="layui-input-block">',e.data.forEach(function(a){n+='<input type="checkbox" \n          name="'.concat(e.checkboxName,"[").concat(a.alias,']" \n          lay-skin="primary" lay-filter="').concat(e.layFilter,'" \n          title="').concat(a.text,'" ').concat(a.checked?'checked=""':"",' />\n          <div class="layui-unselect layui-form-checkbox ').concat(a.checked?"layui-form-checked":"",'" \n          lay-skin="primary"><span>').concat(a.text,'</span>\n          <i class="layui-icon layui-icon-ok"></i></div>\n          ')}),n+='</div>\n          </div>\n          <div class="layui-form-item">\n          <label class="layui-form-label">已经选中</label>\n          <div class="layui-input-block tags" id="'.concat(e.tagsId,'"></div>\n          </div>\n        ')}};if(!a.checkboxName||!a.layFilter)return!1;e.checkboxName=a.checkboxName,e.setDefaultValue(a.data),this.tagsId=e.tagsId,this.layFilter=e.layFilter=a.layFilter||"plg-"+Prolog.createRandomId(),this.wrapTamplate=r(e.wrapTemplate()),a.renderer&&this.renderTo(a.renderer)};t.prototype.renderTo=function(a){var l=this,t=r("#"+a);t.find("#"+l.tagsId);t.append(l.wrapTamplate);var e=n.form;e.render();var i=[],c={init:function(){var a={},e=t.find(".layui-form-checked");e.length&&(a={value:e.siblings("input").attr("title"),name:e.siblings("input").attr("name")}),"{}"!==JSON.stringify(a)&&(i.push(a),i.forEach(function(a){c.add(a)}))},add:function(a){var e='<span>\n          <em name="'.concat(a.name,'">').concat(a.value,'</em>\n          <button type="button" class="close">×</button>\n        </span>');r("#"+l.tagsId).append(e);var n='<input type="hidden" name="'.concat(a.name,'" \n          value="').concat(a.value,'"/>');t.after(n),-1===i.indexOf(a)&&i.push(a)},del:function(n){i&&0<i.length&&i.forEach(function(a,e){a.name===n.name&&i.splice(e,1)}),r("#"+l.tagsId).empty();var t="";i&&0<i.length&&i.forEach(function(a,e){t+='<span><em name="'.concat(a.name,'">').concat(a.value,'</em><button type="button" class="close">×</button></span>')}),r("#"+l.tagsId).append(t),r("#"+l.targetId).find('input[name="'+n.name+'"]').remove()}};c.init(),e.on("checkbox("+l.layFilter+")",function(a){var e=a.elem.checked,n=r(a.elem),t={value:n.attr("title"),name:n.attr("name")};e&&c.add(t),e||c.del(t)}),t.find("#"+l.tagsId).on("click",".close",function(a){var e=r(this).siblings("em"),t={value:e.html(),name:e.attr("name")};c.del(t);var n=l.wrapTamplate.find(".layui-form-checkbox");(n=Array.prototype.slice.call(n))&&0<n.length&&n.forEach(function(a,e){var n=r(r(a).find("span")[0]).html();t.value===n&&l.wrapTamplate.find(".layui-form-checkbox").eq(e).trigger("click")})})},window.PlgInputTags=t}(jQuery,layui);
"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}!function(c,t){layui.use(["element"],function(){function o(){var t=this,e={0:"",1:"skin_1",2:"skin_2"};e[t.skin]||(t.skin=0);var n='<div class="layui-card PlgPanel '.concat(e[t.skin]," ").concat(t.className?t.className:"",'" ').concat(t.id?"id=".concat(t.id):"","  ").concat(t.style?'style="'.concat(t.style,'"'):"",">\n                       ").concat(t.header.isShow?'<div class="layui-card-header">                \n                            <div class="title io">'.concat(t.header.title,"</div>\n                            ").concat(t.header.moreBtn&&0<t.header.moreBtn.length?'<div class="more_group">\n                                '.concat(t.header.moreBtn.map(function(t){return'<a class="layui-btn layui-btn-sm layui-btn-normal '.concat(t.className?"".concat(t.className):"",'" href="javascript:;"> ').concat(t.icon?'<i class="'.concat(t.icon,'"></i>'):"").concat(t.name,"</a>")}),"\n                         </div>"):"","       \n                        </div>\n                       "):"",'\n                        <div class="layui-card-body">\n              \n                        </div>\n                    </div>');return c(n)}function t(t,e){var n,a=this;if(a.id="PlgPanel"+(new Date).valueOf(),1===arguments.length){if("object"===_typeof(n=arguments[0])){var l={renderer:"",className:"",style:"",skin:0,title:"",moreBtn:null,empyt:!0,header:{isShow:!0,title:"",moreBtn:null},defaultBody:null};Object.assign(a,l,n),a.getElement=o.call(a),null!=a.defaultBody&&a.defaultBody.cols&&0<a.defaultBody.cols.length&&a.appendPanelBody(function(){if(this.defaultBody){var e=this.defaultBody,t=null;if(e.layoutCol<0||e.layoutCol,e.cols)return t='<form class="layui-form cl" style="padding:5px" lay-filter="">   \n                            '.concat(e.cols.map(function(t){return'<div class="layui-row layui-col-space10">\n                                    '.concat(t.map(function(t){return'<div class="layui-col-md'.concat(t.layoutCol||e.layoutCol," ").concat(t.offset?"layui-col-md-offset".concat(t.offset):"",'">\n                                            <div class="layui-form-item">\n                                            <label class="layui-form-label">').concat(t.label,'：</label>       \n                                            <div class="layui-input-block">\n                                                        ').concat(function(t,e){switch(t.type||(t.type="text"),t.type){case"text":return t.value||(t.value="<span style='color:#c3c3c3'>暂无数据</span>"),'<div class="text-info '.concat(e?"bj":"",'">').concat(t.value,"</div>");case"input":return t.value||(t.value=""),'<input type="text" placeholder="请输入信息"\n                        autocomplete="off" class="layui-input" value="'.concat(t.value,'">')}}(t,e.valueBj),"\n                                                </div>\n                                            </div>                               \n                                        </div>")}).join("")," \n                        \n                            </div>")}).join(""),"\n\n                        </form>"),c(t)}}.call(a)),a.renderTo(a.renderer)}}else 2===arguments.length&&(t=arguments[0],"object"===_typeof(n=e)&&(a.opts=c.extend(!0,l,n),a.getElement=o(a.opts),a.renderTo(t)))}t.prototype.renderTo=function(t){return this.empyt&&c("#"+t).empty(),c("#"+t).append(this.getElement),this},t.prototype.appendPanelBody=function(t){var e=1<arguments.length&&void 0!==arguments[1]&&arguments[1],n=this.getElement.find(".layui-card-body");return e&&n.empty(),n.append(t),this},window.PlgPanel=t})}(jQuery);
"use strict";!function(r,n){r.fn.PlgSelectPlusTags=function(e){return new t(e)};var t=function(e){this.render(e)};t.prototype.render=function(e){return r("#"+e.renderer).after('<div class="layui-input-block plg-select-tags"></div>'),e.el="#"+e.renderer,delete e.renderer,n.selectPlus.render(e)},window.PlgSelectPlusTags=t}(jQuery,layui);
"use strict";function _typeof(n){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}!function(u){layui.element,window,document;var a=function(n,a){var e=this,t={dom:null,documentPanel:null,meunPanelThis:null,template:function(n){var a=this.meunPanelThis.getData.parentData;a||(a=[]);var e=this.mainNav(a),t=this.opes;return u('<div class="plg-sidebar">\n                  \n    <div class="main-nav">\n        <div id="meunSoroll" class="layui-side-scroll">\n\n                <div class="plg-logo" >\n                <a class="logo-path '.concat("plg"==t.logo&&"plg-logo",'" ></a>\n                \n                <i id="plg-logo-fold" class="anticon layui-icon layui-icon-shrink-right"></i>\n                \n                </div>    \n            \x3c!-- 左侧导航区域（可配合layui已有的垂直导航） --\x3e\n            <div class="pr-open" data-type="hoot-click">\n                <div class="layui-layer-setwin">\n                    <a class="layui-icon layui-icon-close" href="javascript:;"></a>\n                </div>\n                <div class="pr-search">\n                       <span class="pr-icon-search-wrapper"><i class="layui-icon layui-icon-search\n"></i></span>\n\n                    <input type="text" id="selectInput" class="pr-search-input" placeholder="请输入关键词">\n\n                    <div class="search-tip">\n                        <p><span>以下是与“<strong></strong>”相关的产品：</span></p></div>\n\n                </div>\n                <div class="pr-left">\n                    <div id="keyUpList" class="keyUpList"></div>\n                    <div class="pr-meungroup-list">\n                    </div>\n                </div>\n                <div class="pr-right">\n                    <div class="scroll-nav">\n                        <ul class="right-sidebar">\n\n                        </ul>\n                    </div>\n                </div>\n            </div>\n            <div class="product-all" data-type="hoot-click">\n                          <span class="icon-box">\n                                 <i class="icon iconfont p-icon-all"></i>\n                          </span>\n                <span class="meun-name">\n                             <a class="" href="javascript:;">所有服务</a>\n                             <i class="right-mover layui-icon layui-icon-right\n"></i>\n                         </span>\n            </div>\n            <div class="nav-last" data-type="hoot-click">\n                <ul id="sidebar" class="sidebar">\n                    ').concat(e,'\n                </ul>\n                <div class="nav-hover-child" >\n                \x3c!-- 二级菜单 --\x3e\n                <div class="layui-side">\n                        \x3c!--<div class="nav-title"></div>--\x3e\n                        <ul class="body-nav" lay-filter="test"></ul>\n                \n                     </div>\n                 </div>\n\n            </div>\n\n        </div>\n    </div>\n   \n</div>\n'))},mainNav:function(n){var a="";return n[0]||(n[0]=[]),n[0].filter(function(n){"0"===n.parentMenuId&&(a+='\n                        <li class="s-item" id='.concat(n.id," menu-id=").concat(n.menuId,'>\n                               <span class="icon-box">\n                                 <i class="').concat(n.imagePath,'"></i>\n                             </span>\n                              <span class="meun-name"><a href="').concat(n.leaf?n.path:"javascript:;",'">').concat(n.name,"</a></span>\n                         </li>                    \n                            \n                      "))}),a},resetOpenMenuList:function(n,t){var i=u('<div class="pr-meun-group"></div><div class="pr-meun-group"></div><div class="pr-meun-group"></div>');u(this.documentPanel[0]).find(".right-sidebar").html("").append(this.mainNav(t)),t[0].forEach(function(n,a){var e='<div class="list-item" id='.concat(n.menuId,'><a href="').concat(n.leaf?n.path:"javascript:;",'" menu-id=').concat(n.menuId," parentmenuid=").concat(n.parentMenuId,' class="list-title">').concat(n.name,"</a>");t[n.menuId]&&t[n.menuId].forEach(function(n){e+='<div class="menu-text">\n                                            <a href='.concat(n.path||"javascript:;","\n                                             menu-id=").concat(n.menuId,"\n                                             parentmenuid=").concat(n.parentMenuId,"\n                                             leaf=").concat(n.leaf,"                                     \n                                             >\n                                             ").concat(n.name,"\n                                            </a>\n                        </div>"),t[n.menuId]&&t[n.menuId].forEach(function(n){e+='<div class="menu-text">\n                                                 <a href='.concat(n.path||"javascript:;"," \n                                                  menu-id=").concat(n.menuId," \n                                                  parentmenuid=").concat(n.parentMenuId,"\n                                                  leaf=").concat(n.leaf,">\n                                                    ").concat(n.name,"\n                                                    </a>\n                                                 </div>")})}),e+="</div>",a%3==0?i.eq(0).append(e):a%3==1?i.eq(1).append(e):a%3==2&&i.eq(2).append(e)}),i.find(".menu-text>a[leaf='false']").hide(),n.append(i)},setOpenAll:function(o){var n=this,s=n.dom.meungroupList,a=o.parentData,l=u(n.documentPanel[0]).find("#keyUpList");n.resetOpenMenuList(s,a);var r=new RegExp("[\\u4E00-\\u9FFF]+","g");u(n.documentPanel[0]).find("#selectInput").keyup(function(n){var a=u(this).val();if(!(a=a.toUpperCase()))return u(this).next(".search-tip").hide(),s.show(),void l.html("").hide();u(this).next(".search-tip").show().find("strong").text(a),s.hide();var e="";for(var t in o.mapAll){var i=o.mapAll[t];0<=(r.test(a)?i.name.indexOf(a):i.PY_code.indexOf(a))&&i.leaf&&(e+='<div class="pr-meun-group">\n                                    <div class="list-item">\n                                        <div class="menu-text">\n                                            <a href='.concat(i.path||"javascript:;"," >\n                                             ").concat(i.name,"\n                                            </a>\n                                         </div>\n                                         </div>\n                                    </div>"))}s.hide(),l.html("").show().append(e)})},meunTopObj:function(t){var n=this.dom.meungroupList.find(".list-item");return t={},n.each(function(n,a){var e=a.id;t[e]=parseInt(a.offsetTop)}),t},removerShowList:function(){this.dom.meungroupList,this.meunPanelThis.getData.parentData;this.dom&&this.dom.meunSoroll.removeClass("showList")},clickChild:function(s){var l,r=this,c=r.dom.bodyNav,d=r.meunPanelThis.getData;r.dom.bodyNav.on("click","a",function(n){n.stopPropagation(),n.preventDefault();var a=(l=u(this)).attr("menu-id");r.dom.meungroupList.find("a[menu-id='"+a+"']").trigger("click")}),r.dom.meungroupList.on("click","a",function(n){n.stopPropagation(),n.preventDefault(),l=u(this);var a=u(this).attr("menu-id"),e=c.find("a[menu-id='"+a+"']"),t=(e.parent(),e.siblings(".nav-child"),{getCurrent:d.mapAll[a]}),i=l.parents(".list-item").attr("id"),o=d.mapAll[a].leaf;l.attr("href");l.parents(".pr-open").find(".right-sidebar .s-item[menu-id="+i+"] a").trigger("click"),r.updateChildMeun(i,a),o&&(r.dom.meunSoroll.find(".nav-last").attr("data-show",""),r.removerShowList()),s&&s(t,n)})},EventHanlder:function(){var c=this;u(document).on("click",function(){c.dom.meunSoroll.hasClass("showList")&&c.removerShowList()}),c.dom.documentPanel.find("#plg-logo-fold").click(function(n){u(this).hasClass("layui-icon-shrink-right")?(u(this).removeClass("layui-icon-shrink-right").addClass("layui-icon-spread-left"),u("body").addClass("plg-open-hover")):(u(this).removeClass("layui-icon-spread-left").addClass("layui-icon-shrink-right"),u("body").removeClass("plg-open-hover"))}),c.dom.meunSoroll.find(".nav-last").hover(function(n){c.removerShowList(),0<c.dom.bodyNav.find("li").length&&u(this).attr("data-show","show-child")},function(){u(this).attr("data-show","")}),c.dom.meunSoroll.on("click","[data-type='hoot-click']",function(n){n.stopPropagation(),n.preventDefault();var a=n.target;switch(u(this).attr("class")){case"product-all":c.dom.meunSoroll.toggleClass("showList");break;case"pr-open":if(0<u(a).parents(".pr-left").length||"A"!=a.nodeName)return;if("layui-layer-setwin"==a.parentNode.className)return void c.removerShowList();var e=c.meunTopObj(),t=u(a).parents(".s-item"),i=t.attr("menu-id"),o=u(".pr-meungroup-list").find(".list-item");for(var s in t.addClass("active").siblings().removeClass("active"),o.each(function(){u(this)[0].id==i?u(this).addClass("select"):u(this).removeClass("select")}),e)s==i&&u(".pr-left").animate({scrollTop:e[s]});break;case"nav-last":var l=u(a).parents(".s-item").attr("menu-id");if(!l)return;var r=Boolean(c.meunPanelThis.getData.mapAll[l].leaf);if(c.dom.meunSoroll.find(".nav-last").attr("data-show",""),c.removerShowList(),0<u(a).parents("#sidebar").length&&c.dom.meungroupList.find("a[menu-id='"+l+"']").trigger("click"),r)return;setTimeout(function(){c.dom.meunSoroll.find(".nav-last").attr("data-show","show-child")},200);break;default:return!1}})},updateChildMeun:function(n,o){var s=this;u("[menu-id="+(n=n)+"]").addClass("active").siblings().removeClass("active");var a=s.meunPanelThis.getData;if(s.dom.bodyNav.empty(),n){if(a.mapAll[n].leaf&&0==a.mapAll[o].parentMenuId)return;var l=a.parentData;l[n]&&l[n].forEach(function(a){var n="item h-link";o&&a.menuId==o&&(n="item h-link active-this itemeds");var e=u("<li>",{class:n}),t=u("<a>",{href:a.path||"javascript:;","menu-id":a.menuId,leaf:a.leaf,level:a.level,id:a.id,parentMenuId:a.parentMenuId}).text(a.name);if(e.append(t),!a.leaf&&l[a.parentMenuId]&&0<l[a.parentMenuId].length){var i='<dl class="nav-child">';l[a.menuId]&&l[a.menuId].forEach(function(n){i+="<dd class= ".concat(o&&n.menuId==o?"active-this":""," ><a href=").concat(n.path||"javascript:;"," leaf=").concat(n.leaf," \nmain-id=").concat(a.parentMenuId," parentMenuId=").concat(n.parentMenuId," menu-id=").concat(n.menuId,">").concat(n.name,"</a></dd>")}),i+="</dl>",t.append('<i class="right-mover layui-icon layui-icon-right"></i>'),e.append(i),o&&e.find("dd").each(function(n,a){if("active-this"==u(a).attr("class"))return e.addClass("active-this").addClass("itemeds"),e.find(".nav-child").show()})}s.dom.bodyNav.append(e)})}},initPanel:function(n,a){var e=this;e.meunPanelThis=n;var t=e.meunPanelThis.getData;return e.opes=a,e.documentPanel=e.template(e),e.documentPanel&&(e.dom={documentPanel:e.documentPanel,meunSoroll:e.documentPanel.find("#meunSoroll"),bodyNav:e.documentPanel.find(".body-nav"),meungroupList:e.documentPanel.find(".pr-meungroup-list"),prLeft:e.documentPanel.find(".pr-left"),$tabli:u(".layui-tab-title li"),$nav_hover_child:e.documentPanel.find(".nav-hover-child")}),e.setOpenAll(t),e.EventHanlder(),e.documentPanel}};e.getFun=t;var i={url:null,route:!1,menuClick:null};1==arguments.length?(e.options=n,e.options=u.extend(!0,i,e.options),e.init(e.options)):2==arguments.length&&(e.ele=n,e.options=a,e.options=u.extend(!0,i,e.options),e.init(e.options),e.renderTo(e.ele))};a.prototype.config={isTrigger:!1,url:"",logo:null},a.prototype.setMapData=function(n){var a,e,t=(a=layer.load(2,{shade:[.6,"#fff"]}),function(){layer.close(a)}),i=null,o=null;i={};return Prolog.syncAjax({type:"get",url:n,success:function(n){var a;n.success&&((e=n.data).forEach(function(n){n.PY_code=pinyin.makePy(n.name)[0]}),a={},e.forEach(function(n){a[n.parentMenuId]||(a[n.parentMenuId]=[]),a[n.parentMenuId].push(n)}),o=a,e.forEach(function(n){i[n.menuId]=n}))},error:function(n){layer.msg("数据加载失败!")},dataType:"json"}),t(),{dataAll:e,mapAll:i,parentData:o}},a.prototype.init=function(n){var a=this,e=this.getFun;return"object"===_typeof(a.options)&&(a.opts=u.extend(!0,a.config,a.options),""!=a.opts.url&&(a.getData=a.setMapData(a.opts.url),a.getElement=e.initPanel(a,a.opts),"function"==typeof a.opts.menuClick?e.clickChild(a.opts.menuClick):e.clickChild())),this},a.prototype.renderTo=function(n){var a=this.getFun.documentPanel;if(u("#"+n).append(a),this.opts.isTrigger){var e=u("#"+n).find(".sidebar li:first-child").addClass("active").attr("menu-id");this.getFun.updateChildMeun(e)}return this},window.PlgSideAccordion=a,u.fn.initPlgSideAccordion=function(n){return new a(this,n)}}(jQuery);
"use strict";!function(u){layui.element,window,document;function l(a,n){return Object.values(n).filter(function(n){return n.parentMenuId==a})}function o(n,i,a){var e=i[i[n].parentMenuId];e?"0"!==e.parentMenuId&&(e=i[e.parentMenuId]):e=i[n],e.children=function a(e){var t=[];return Object.values(i).forEach(function(n){if(e==n.parentMenuId&&(t.push(n),!n.leaf))return n.children=a(n.menuId)}),t}(e.menuId);var t=e,s='<ul class="body-nav" parentmenu-id='.concat(e.menuId," name=").concat(e.name,">");for(var r in t=t.children)s+='<li class="item h-link '.concat(t[r].isActive?"active-this":""," ").concat(t[r].isActive&&t[r].children?"itemeds":"",'">\n            <a href="').concat(t[r].blank?t[r].path:t[r].hash?"#"+t[r].hash:"javascript:;",'"  ').concat(t[r].blank?"target=_blank":""," menu-id=").concat(t[r].menuId,' leaf="').concat(t[r].leaf,'" level="').concat(t[r].level,'">').concat(t[r].name,"\n            ").concat(t[r].children&&!t[r].leaf?'<i class="right-mover layui-icon layui-icon-right"></i>':""," \n            </a>\n            ").concat(t[r].children&&!t[r].leaf?'<dl class="nav-child" parentmenu-id='.concat(t[r].menuId,">            \n                        ").concat(t[r].children.map(function(n,a,e){return"<dd ".concat(n.isActive?'class="active-this"':"",">\n                            <a href=").concat(n.blank?n.path:n.hash?"#"+n.hash:"javascript:;","\n                            ").concat(n.blank?"target=_blank":""," leaf=").concat(n.leaf," menu-id=").concat(n.menuId,"  level=").concat(n.level,">").concat(n.name,"</a></dd>")}).join(""),"          \n                  </dl>"):""," \n            </li>");return s+="</ul>",a&&a.bodyNav.html(s),s}function t(n,a){n||(n=[]);var e,t,i=(e=n,t="",Object.values(e).filter(function(n){"0"==n.parentMenuId&&(t+='<li class="s-item '.concat(n.isActive?"active":"",'">\n                <span class="icon-box"><i class="').concat(n.imagePath,'"></i></span>\n                <span class="meun-name"><a href="').concat(n.leaf?"#"+n.hash:"javascript:;",'"  menu-id=').concat(n.menuId,">").concat(n.name,"</a></span>\n                </li>"))}),t),s=function(t){var n=0,a=u('<div class="pr-meun-group"></div><div class="pr-meun-group"></div><div class="pr-meun-group"></div>'),e=l("0",t),i=function a(n){var e="";return l(n,t).forEach(function(n){e+='<div class="menu-text" py-code='.concat(n.PY_code,">\n                  <a href=").concat(n.hash?"#"+n.hash:"javascript:;","\n                   parentmenu-id=").concat(n.parentMenuId,"\n                   menu-id=").concat(n.menuId,"\n                   leaf=").concat(n.leaf,">\n                   ").concat(n.name,"</a>\n                 </div>"),n.leaf||(e+=a(n.menuId))}),e};for(var s in e){var r='<div class="list-item '.concat(e[s].isActive?"select":"",'" id=').concat(e[s].menuId,">\n                    <a menu-id=").concat(e[s].menuId," parentmenu-id=").concat(e[s].parentMenuId,' class="list-title">\n                      ').concat(e[s].name,"</a>");r+=i(e[s].menuId),r+="</div>",n%3==0?a.eq(0).append(r):n%3==1?a.eq(1).append(r):n%3==2&&a.eq(2).append(r),n++}return u(a).find(".menu-text>a[leaf='false']").hide(),u(a)}(n),r=u('<div class="plg-sidebar">                          \n            <div class="main-nav">\n                <div id="meunSoroll" class="layui-side-scroll">\n                        <div class="plg-logo" >\n                        <a class="logo-path '.concat("plg"==a.logo&&"plg-logo",'" ></a>            \n                        <i id="plg-logo-fold" class="anticon layui-icon layui-icon-shrink-right"></i>          \n                        </div>    \n                    \x3c!-- 左侧打开全部导航区域 --\x3e\n                    <div class="pr-open" data-type="hoot-click">\n                        <div class="layui-layer-setwin">\n                            <a class="layui-icon layui-icon-close" href="javascript:;"></a>\n                        </div>\n                        <div class="pr-search">\n                            <span class="pr-icon-search-wrapper"><i class="layui-icon layui-icon-search\n            "></i></span>\n\n                            <input type="text" id="selectInput" class="pr-search-input" placeholder="请输入关键词">\n                            <div class="search-tip">\n                                <p><span>以下是与“<strong></strong>”相关的产品：</span></p></div>\n\n                        </div>\n                        <div class="pr-left">\n                            <div id="keyUpList" class="keyUpList"></div>\n                            <div class="pr-meungroup-list">\n                                \x3c!-- 全部菜单列表---\x3e\n                         \n                                \n                            </div>\n                        </div>\n                        <div class="pr-right">\n                            <div class="scroll-nav">\n                                <ul class="right-sidebar">\n                                     ').concat(i,'\n\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="product-all" data-type="hoot-click">\n                                <span class="icon-box">\n                                        <i class="icon iconfont p-icon-all"></i>\n                                </span>\n                        <span class="meun-name">\n                                    <a  href="javascript:;">所有服务</a>\n                                    <i class="right-mover layui-icon layui-icon-right\n            "></i>\n                                </span>\n                    </div>\n                    <div class="nav-last" data-show="">\n                        <ul id="sidebar" class="sidebar">\n                           \x3c!--一级菜单--\x3e\n                           ').concat(i,'\n                        </ul>\n                     <div class="nav-hover-child" >\n                        \x3c!-- 二级菜单 --\x3e\n                        <div class="layui-side">                 \n                        \n                                      \x3c!-- 当前hover二级菜单列表---\x3e\n                                      ').concat(vipspa.indexId?o(vipspa.indexId,n):"","\n                                                                   \n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            </div>\n            "));return r.find(".pr-meungroup-list").append(s),u(r)}var a=function(n){var a=this;a.options=n;a.options=u.extend(!0,{renderer:null,url:null,ajaxInit:{url:null,type:"get",dataType:"json"},logo:"",route:!1,menuClick:null},a.options);var e=function(n){var s,e={},t=PlgDialog.loading2();return n.success=function(n){n.success?(s=function(n){n.forEach(function(n){delete n.children,delete n.type,delete n.queryId,delete n.operateType,delete n.lastModifyTime,delete n.helpCode,delete n.creatorName,delete n.creatorId,delete n.createTime,delete n.modifierId,delete n.modifierName,delete n.sort});var a={};return n.forEach(function(n){a[n.menuId]=n}),{mapData:a}}(n.data),n.data.forEach(function(n){if(!n.blank&&(n.PY_code=pinyin.makePy(n.name)[0],n.leaf&&n.path)){n.hash||(n.hash=n.path.substr(1).split("/"),n.hash=n.hash[n.hash.length-2]+"/"+n.hash[n.hash.length-1],-1!=n.hash.indexOf("=")&&(n.hash=n.hash.match("([^=]+)$")[0]));var a=function n(a){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:[],t=2<arguments.length&&void 0!==arguments[2]?arguments[2]:[],i=s.mapData[a];return e.unshift(i.name),t.unshift(i.menuId),0!=i.parentMenuId?n(i.parentMenuId,e,t):{arr:e,idarr:t}}(n.menuId);e[n.hash]={templateUrl:n.iframe?n.path:n.path+".html",iframe:n.iframe||!1,controller:n.srcPath?n.srcPath+".js":null,name:n.name,menuId:n.menuId,parent_name:a.arr,stateArr:a.idarr},a=null}}),vipspa.routerMap=e):layer.msg("数据加载失败!"),t()},n.error=function(n,a,e){t()},Prolog.syncAjax(n),s}.call(this,a.options.ajaxInit);Object.defineProperties(vipspa,{mapData:{get:function(n){return e.mapData},set:function(n){try{vipspa.indexId=vipspa.routerMap[vipspa.parse(location.hash).url].menuId}catch(n){}finally{a.document=t(n,a.options),a.init(a.document),a.options.renderer&&a.renderTo(a.options.renderer)}}}})};function e(d){var i=this.options,s=vipspa.mapData;u(document).on("click",function(){d.meunSoroll.hasClass("showList")&&p(d.meunSoroll)}),d.logoFold.click(function(n){u(this).hasClass("layui-icon-shrink-right")?(u(this).removeClass("layui-icon-shrink-right").addClass("layui-icon-spread-left"),u("body").addClass("plg-open-hover")):(u(this).removeClass("layui-icon-spread-left").addClass("layui-icon-shrink-right"),u("body").removeClass("plg-open-hover"))}),d.navLast.hover(function(n){var a=u(this).find("li.s-item.active a").attr("menu-id");a&&vipspa.mapData[a].leaf?d.navLast.attr("data-show",""):(p(d.meunSoroll),u(this).attr("data-show","show-child"))},function(){u(this).attr("data-show","")}),d.prLeft.on("click",".menu-text > a",function(n){n.preventDefault(),location.hash=u(this).attr("href");var i=u(this).attr("menu-id"),a=u(this).attr("parentmenu-id");a=function n(a){var e=s[a];if("0"!==e.parentMenuId)return n(e.parentMenuId);o(i,s,d);var t=d.bodyNav.find("a[menu-id='".concat(i,"']"));return t.parent().is("dd")&&(t.parents("li.item ").addClass("itemeds"),t.parents("dl.nav-child").show()),t.parent().addClass("active-this").siblings().removeClass("active-this"),a}(a),p(d.meunSoroll)}),d.sidebar.on("click","li",function(n){var a=u(this).find("a").attr("menu-id"),e=u(this).index();if(u(this).addClass("active").siblings().removeClass("active"),i.index=e,vipspa.mapData[a].leaf)return d.navLast.attr("data-show",""),void(location.hash=u(this).find("a").attr("href"));n.preventDefault(),d.navLast.attr("data-show",""),o(a,s,d),setTimeout(function(){d.navLast.attr("data-show","show-child")},200)}),d.bodyNav.on("click","li>a",function(n){n.stopPropagation();var a=u(this),e="true"==a.attr("leaf"),t=a.siblings("dl.nav-child");if(a.parent().addClass("active-this").siblings().removeClass("active-this").find("dd").removeClass("active-this").removeClass("itemeds"),i.menuClick&&i.menuClick(a),a.parent().is("dd")&&a.parents("li.item").addClass("active-this").siblings().removeClass("active-this").removeClass("itemeds"),!e&&0<t.length)return a.parent().addClass("active-this").siblings().removeClass("active-this").removeClass("itemeds"),t.slideToggle("fast"),a.parent().toggleClass("itemeds").siblings().children(".nav-child").slideUp(),!1;"_blank"!=u(this).attr("target")&&("javascript:;"!==u(this).attr("href")?location.hash=u(this).attr("href"):n.preventDefault())}),d.meunSoroll.on("click","[data-type='hoot-click']",function(n){n.stopPropagation(),n.preventDefault();var a,e,t,i=n.target;switch(u(this).attr("class")){case"product-all":d.meunSoroll.toggleClass("showList");break;case"pr-open":"layui-layer-setwin"==i.parentNode.className&&p(d.meunSoroll);var s=(a=d.meungroupList,e=a.find(".list-item"),t={},e.each(function(n,a){var e=a.id;t[e]=parseInt(a.offsetTop)}),t),r=u(i).parents(".s-item"),l=r.find("a").attr("menu-id"),o=d.meungroupList.find(".list-item");for(var c in r.addClass("active").siblings().removeClass("active"),o.each(function(){u(this)[0].id==l?u(this).addClass("select"):u(this).removeClass("select")}),s)c==l&&u(".pr-left").animate({scrollTop:s[c]});break;default:return!1}})}function p(n,a){a||(a="showList"),n.removeClass(a)}a.prototype.init=function(n){var t,i,s,r,a={sidebar:n.find("#sidebar"),logoFold:n.find("#plg-logo-fold"),meunSoroll:n.find("#meunSoroll"),navLast:n.find("#meunSoroll .nav-last"),bodyNav:n.find(".nav-hover-child .layui-side"),meungroupList:n.find(".pr-meungroup-list"),prLeft:n.find(".pr-left"),nav_hover_child:n.find(".nav-hover-child")};return e.call(this,a),t=a,i=new RegExp("[\\u4E00-\\u9FFF]+","g"),s=t.prLeft.find("#keyUpList"),r=t.meungroupList.find(".menu-text"),t.meunSoroll.find("#selectInput").keyup(function(n){var a=u(this).next(".search-tip"),e=u(this).val();if(!(e=e.toUpperCase()))return a.hide(),t.meungroupList.show(),void s.html("").hide();a.show().find("strong").text(e),t.meungroupList.hide(),s.html("").show(),r.each(function(n,a){0<=(i.test(e)?u(a).find("a").text().indexOf(e):u(a).attr("py-code").indexOf(e))&&"true"==u(a).find("a").attr("leaf")&&s.append('<div class="pr-meun-group"><div class="list-item">'.concat(a.outerHTML,"</div></div>"))})}),this},a.prototype.renderTo=function(n){return this.options.renderer=n,u("#"+this.options.renderer).empty().append(this.document),this},window.PlgSideAccordionRoute=a,u.fn.initPlgSideAccordion=function(n){return new a(this,n)}}(jQuery);
"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}!function(u,t){t.use(["element"],function(){t.element;var i=function(t){var n=this;n.preIndex=-1;var e,i={time:100,renderer:null,filter:"plgTabs-"+Prolog.createRandomId(),indexActive:0,closeAll:!1,skin:"brief",fadeIn:!1,allowClose:!1,content:[]};"object"===_typeof(e=t)&&(n.opts=u.extend(!0,i,e),n.getElement=function(n){var t=function(t){if(t){var i="",a="";return t.forEach(function(t,e){i+="<li lay-id = ".concat(t.id,' class="').concat(n.indexActive===e?"layui-this":"",'" >').concat(t.title,"</li>"),a+='<div class="layui-tab-item  '.concat(n.indexActive===e?"layui-show":"",'" data-fade="">').concat(t.template,"</div>")}),{title:i,content:a}}return""};t=t(n.content);var e='\n                <div class="'.concat({normal:"layui-tab",brief:"layui-tab layui-tab-brief",card:"layui-tab layui-tab-card",plgtabs:"layui-tab layui-tab-brief plgtabs "}[n.skin],'" ').concat(n.allowClose?'lay-allowClose="true"':""," \n                    ").concat(n.filter?'lay-filter="'+n.filter+'"':"",">\n                    ").concat(n.closeAll?'\n            <ul class="plg-tab-close-all" lay-filter="plg-tab-close-all">\n              <div class="plg-tab-close-item">\n                  <a href="javascript:;" class="layui-icon layui-icon-more"></a>\n                 <dl class="child">\n                  <dd><a href="javascript:;">关闭其它标签页</a></dd>\n                  <dd><a href="javascript:;">关闭当前标签页</a></dd>\n                  <dd><a href="javascript:;">关闭所有标签页</a></dd>\n                </dl>   \n                </li>\n            </ul>':"",'\n                    <ul class="layui-tab-title">\n                    </ul>\n                    <div class="layui-tab-content"></div>\n                </div>');return u(e)}(n.opts),n.opts.closeAll&&(n.getElement.find(".plg-tab-close-all").hover(function(){u(this).find(".child").show()},function(){u(this).find(".child").hide()}),n.getElement.find(".plg-tab-close-all .child").on("click","dd",function(t){t.preventDefault();var a=u(this).index();u(this).parents(".plg-tab-close-all").next().children("li").each(function(t,e){var i=u(e);0!==i.index()&&(i.hasClass("layui-this")?1===a&&n.deleteTabs(i.attr("lay-id")):0===a&&n.deleteTabs(i.attr("lay-id")),2===a&&n.deleteTabs(i.attr("lay-id")))}),u(this).parents(".child").hide()}))),n.opts.renderer&&n.renderTo(this.opts.renderer)};i.prototype.renderTo=function(t){u("#"+t).append(this.getElement);var a=this;this.opts.content.forEach(function(t,e){var i=!1;a.opts.indexActive===e&&(i=!0),a.addTabs(t,i)});var e=this.getElement.find(".layui-tab-title > li").eq(a.opts.indexActive).attr("lay-id");return a.changeTabs(e),this.element.render("nav"),this.element.render("tab",this.opts.filter),this.on(),this};var l=-1;i.prototype.addTabs=function(t,e){var r=PlgDialog.loading2();t.title='<span class="name">'.concat(t.title,"</span>");var o=this;e||(e=null);var s=e;this.preIndex=this.getElement.find(".layui-tab-title li.layui-this").index();var d=this.getElement.find(".layui-tab-title li"),c=Number(d.length),i={title:'<span class="name">新标题</span>',content:"",id:"lay-"+Prolog.createRandomId(),iframe:!1},f=u.extend(!0,i,t);if(f.url&&!f.iframe)Prolog.ajax({type:"get",url:f.url,dataType:"html",success:a,error:function(t,e,i){layer.msg("数据请求失败"),r()}});else{if(!f.template||f.iframe)return f.template='<iframe class="plg-iframeClass" frameborder="no" src="'.concat(f.url,'"></iframe>'),a(f.template),void r();a(f.template)}function a(t){try{f.content=t,o.element.tabAdd(o.opts.filter,f),s&&o.changeTabs(f.id)}catch(t){}finally{o.getElement.find(".layui-tab-content .layui-tab-item").attr("data-fade",""),(e=o.getElement.find(".layui-tab-title"),i=e.width()-15,a=e.find("li").eq(0).outerWidth(),n=e.prev()?e.prev().outerWidth():0,l=Math.floor(i-a-n)/140,Math.floor(l))<c&&d.eq(1)&&o.deleteTabs(d.eq(1).attr("lay-id")),r()}var e,i,a,n,l}o.preIndex=l=o.getElement.find(".layui-tab-title>.layui-this").index()},i.prototype.changeTabs=function(t,e){var i,a;if(/^[0-9]+.?[0-9]*$/.test(t)?i=(a=this.getElement.find(".layui-tab-title>li").eq(t)).attr("lay-id"):(i=t,a=this.getElement.find(".layui-tab-title>li[lay-id='"+i+"']")),l=this.getElement.find(".layui-tab-title>.layui-this").index(),this.element.tabChange(this.opts.filter,i),this.preIndex=l,this.opts.fadeIn){this.getElement.find(".layui-tab-content >.layui-tab-item").attr("data-fade","");var n=this.getElement.find(".layui-tab-content >.layui-tab-item.layui-show");if(n.index()>this.preIndex)n.attr("data-fade","left");else{if(n.index()==this.preIndex)return!1;this.element.tabChange(this.opts.filter,i),n.attr("data-fade","right")}setTimeout(function(){n.attr("data-fade","")},this.opts.time)}return"function"==typeof e&&e(a),this},i.prototype.deleteTabs=function(t){return this.element.tabDelete(this.opts.filter,t),this},i.prototype.element=t.element,i.prototype.on=function(e,t){var i=this;return null!=t?this.element.on(t+"("+this.opts.filter+")",function(t){"function"==typeof e&&e(t),i.preIndex=t.index}):this.element.on("tab("+this.opts.filter+")",function(t){"function"==typeof e&&e(t),i.preIndex=t.index}),i},window.PlgTabs=i,u.fn.initPlgTabs=function(t){var e=u(this).attr("id");return new i(t).renderTo(e)}})}(jQuery,layui);
"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}!function(r){var t=r.fn.zTree;var n=function(t,n){var a,o,i,e,s=this,l={initAjax:null,skin:"",toolBar:!1,toolBar2:{isShow:!1,btn:null},renderer:null,setData:null,isExpand:!1,setting:{treeId:Prolog.createRandomId(),view:{selectedMulti:!1},data:{key:{title:"name"},simpleData:{enable:!0,idKey:"menuId",pIdKey:"parentMenuId",rootPId:"0",id:"id"}},callback:{}}};1===arguments.length?"object"===_typeof(a=arguments[0])&&(s.opts=r.extend(!0,l,a),a.setting&&a.setting.callback&&"function"==typeof a.setting.callback.onExpand&&(s.opts.setting.callback.onExpand=function(t,n,o){(function(t,n,o){if(!o.tId){var a=this.getZTreeObj(n),i=a.getNodes();for(var e in i){var s=i[e];s.tId!=o.tId?a.expandNode(s,!1,!1,!1):a.expandNode(s,!0)}}}).bind(s)(t,n,o),a.setting.callback.onExpand(t,n,o)}),!s.opts.setDate&&s.opts.initAjax&&(s.opts.setData=(o=s.opts.initAjax,i=Prolog.loading2(),e={},o.success=function(t){t.success?e=t.data.map(function(t){return t.isParent=!0,t}):layer.msg("数据加载失败!"),i()},o.error=function(){i()},Prolog.syncAjax(o),e))):2===arguments.length&&(t=arguments[0],a=n),s.opts.renderer&&s.renderTo(this.opts.renderer),setTimeout(window.onresize=function(){var t=r("#"+s.opts.renderer),n=0;s.toolbarBtn2&&(n=s.toolbarBtn2.height());var o=parseInt(t.parent().height()-n);t.find(".ztree").css({width:"100%",height:o,"overflow-y":"auto","pading-bottom":"20px"})},0)};for(var o in t)n.prototype[o]=t[o];n.prototype.renderTo=function(t){r("#"+t).empty();var n=this;this.opts.skin&&r("#"+t).addClass(this.opts.skin);var o,a,i,e,s=r("<ul>",{class:"ztree",id:n.opts.setting.treeId});return this.treeObj=this.init(s,this.opts.setting,this.opts.setData),this.opts.isExpand&&this.treeObj.expandNode(this.treeObj.getNodes()[0],!0,!1,!0,!0),this.opts.toolBar&&(n.toolbarBtn=r('\n\n                 <div class="toolbar layui-row layui-col-space10 cl">\n\n\n                 <div class="layui-col-md4">\n                 <a class="layui-btn layui-btn-primary" href="javascript:void(0)">\n                 <i class="layui-icon layui-icon-delete"></i>删除\n                 </a>\n             </div>\n             <div class="layui-col-md4">\n               \n             <a class="layui-btn layui-btn-primary" href="javascript:void(0)" >\n                 <i class="layui-icon layui-icon-edit"></i>编辑</a>\n          </div>\n                 <div class="layui-col-md4">\n            \n                     <a class="layui-btn  layui-btn-normal"  href="javascript:void(0)">\n                           <i class="layui-icon layui-icon-add-1"></i>增加\n                   </a>\n                 </div>\n       \n               </div>\n        \n               \n               \n             \n             '),r("#"+t).append(n.toolbarBtn)),this.opts.toolBar2.isShow&&this.opts.toolBar2.btn&&0<this.opts.toolBar2.btn.length&&(n.toolbarBtn2=(a=(o=n).opts.toolBar2.btn,i=r('\n        <div class="toolbar layui-row layui-col-space10 cl">\n         '.concat(a.map(function(t){return'<div class="hook layui-col-md'.concat(12/a.length,'">\n            <a class="layui-btn ').concat(t.skin?t.skin:"",'" href="javascript:void(0)">\n            <i class="').concat(t.icon,'"></i>').concat(t.text,"</a>\n          </div>")}).join(""),"   \n        \n      </div>")),e=o.treeObj,a.forEach(function(o,t){i.find(".hook").eq(t).find("a").click(function(t){var n=e.getSelectedNodes();o.EventCallback&&o.EventCallback(t,e,n)})}),i),r("#"+t).append(n.toolbarBtn2)),r("#"+t).append(s),this};Prolog.createRandomId(),Prolog.createRandomId();window.PlgZtree=n}(jQuery);
"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}layui.define("form",function(e){var g=layui.$,k=layui.form,i=layui.hint(),x="selectPlus",b="layui-form-select",C="layui-form-selected",t={index:layui.selectPlus?layui.selectPlus.index:0,set:function(e){var a=this;return a.config=g.extend({},a.config,e),a},on:function(e,a){return layui.onevent.call(this,x,e,a)}},n=function(e){var a=this;a.index=++t.index,a.config=g.extend({},a.config,t.config,e),a.render()},D=function(e,a){var t="";a.forEach(function(e){t+="<span>\n          <em>".concat(e,'</em>\n          <button type="button" class="close">×</button>\n        </span>')}),g(e).siblings(".plg-select-tags").html(t)};n.prototype.config={type:"checkbox",valueSeparator:"/",labelSeparator:"  ---  ",data:[],valueName:"title",label:[],values:[],url:"",method:"get",where:"",contentType:"",headers:"",response:"data",parseData:null,config:{checkedName:"SELECTPLUS_CHECKED",indexName:"SELECTPLUS_INDEX"},error:""},n.prototype.render=function(){var t=this.config;"string"==typeof t.el?t.el=g(t.el):t.el,t.reElem=g('<div class="layui-unselect layui-form-select"><div class="layui-select-title"><input type="text" placeholder="请选择" value="" readonly="" class="layui-input layui-unselect"><i class="layui-edge"></i></div><dl class="layui-anim layui-anim-upbit"><dd lay-value="" class="layui-select-tips layui-hide">请选择</dd></dl></div>'),t.reElem.find(".layui-select-title").on("click",function(e){!g(this).parent().hasClass(C)&&g(document).find("."+b).removeClass(C),g(this).parent().toggleClass(C)}),g(document).on("click",function(e){g(e.target).parents("."+b).length<=0&&t.reElem.hasClass(C)&&t.reElem.removeClass(C)}),!Array.isArray(t.values)&&(t.values=[t.values]),t.filter=t.el.parents(".layui-form").attr("lay-filter"),t.el.append(t.reElem),t.url?this.pullData():this.renderData(),t.el.on("click",".layui-select-title",function(){var e=g(this),a=e.next().find("dd").eq(0);a.hasClass("layui-hide")||a.addClass("layui-hide"),e.find("input").val(t.values.join(t.valueSeparator))})},n.prototype.pullData=function(){var a=this,t=a.config;g.ajax({type:t.method||"get",url:t.url,contentType:t.contentType,data:t.where||{},dataType:"json",headers:t.headers||{},success:function(e){"function"==typeof t.parseData&&(e=t.parseData(e)||e[t.response]),Array.isArray(e)?(t.data=a.formatData(e),t.error="",a.renderData()):t.error="数据格式不对"},error:function(e,a){t.error="数据接口请求异常："+a}})},n.prototype.formatData=function(n){var e=this.config,l=e.valueName,a=e.values,i=e.config.checkedName,c=e.config.indexName;return layui.each(n,function(t,e){"object"!==_typeof(e)&&(n[t]={title:e}),n[t][c]=t,n[t][i]||(n[t][i]=!1),layui.each(a,function(e,a){n[t][l]===a&&(n[t][i]=!0)})}),a.splice(0),n},n.prototype.renderData=function(e){var a=this,m=a.config,t=m.type,n=a.index,l=(e=e?a.formatData(e):a.formatData(m.data),{checkbox:function(e,c,r){var o="layui-form-checkbox",d="layui-form-checked",t=e.reElem.find("dl"),s=e.valueName,u=e.config.checkedName,p=e.config.indexName,f=e.values,h=e.label,a=e.filter,y=e.labelSeparator,n=e.valueSeparator,v=0;t.append(g('<dd lay-value="全选"></dd>')),layui.each(c,function(e,a){t.append(g('<dd lay-value="'+a[s]+'"></dd>'))});var l=t.find("dd").eq(1);l.nextAll().each(function(e){var a=g(this),t=c[e],n=t[s],l=n;0<h.length&&(l="",layui.each(h,function(e,a){l+=t[a],e<h.length-1&&(l+=y)}));var i=g('<input type="checkbox" name="'+x+"checkbox"+r+'"  yw-index="'+t[p]+'" lay-skin="primary" title="'+l+'" layui-value="'+n+'">');t[u]&&(i.prop("checked",!0),f.push(n),v++),a.html(i)});var i=g('<input type="checkbox"  selectplus-all  lay-skin="primary" title="全选" layui-value="全选">');v===c.length&&i.prop("checked",!0),l.html(i),D(e.el,f),l.parent().prev().find("input").val(f.join(n)),l.on("click",function(e){var a=g(this),t="DD"===e.target.nodeName?a.find("."+o).toggleClass(d).hasClass(d):a.find("input").prop("checked");a.parents("."+b).addClass(C),a.find("input").prop("checked",t),a.nextAll().each(function(){var e=g(this);t?e.find("."+o).addClass(d):e.find("."+o).removeClass(d),e.find("input").prop("checked",t)}),layui.event.call(a,x,"checkbox("+x+")",{type:"checkbox",ele:a,eleChecked:t,isAll:t})}),e.el.siblings(".plg-select-tags").on("click",".close",function(e){var a=g(this).siblings("em").html();Array.prototype.slice.call(l.nextAll()).forEach(function(e,c){e.innerText===a&&t.find("dd").eq(c+2).off().on("click",function(e){if(g(this).index()===c+2){var a=g(this),t="DD"===e.target.nodeName?a.find("."+o).toggleClass(d).hasClass(d):a.find("input").prop("checked");a.parents("."+b).addClass(C),a.find("input").prop("checked",t);var n=a.parents("dl").find("dd").eq(1),l=n.nextAll(),i=0;l.each(function(){g(this).find("input").prop("checked")&&i++}),i===l.length?(n.find("input").prop("checked",!0),n.find("."+o).addClass(d)):(n.find("input").prop("checked",!1),n.find("."+o).removeClass(d)),layui.event.call(n,x,"checkbox("+x+")",{type:"checkbox",ele:a,eleChecked:t,isAll:i===l.length})}}).trigger("click")})}),l.nextAll().on("click",function(e){var a=g(this),t="DD"===event.target.nodeName?a.find("."+o).toggleClass(d).hasClass(d):a.find("input").prop("checked");a.parents("."+b).addClass(C),a.find("input").prop("checked",t);var n=a.parents("dl").find("dd").eq(1),l=n.nextAll(),i=0;l.each(function(){g(this).find("input").prop("checked")&&i++}),i===l.length?(n.find("input").prop("checked",!0),n.find("."+o).addClass(d)):(n.find("input").prop("checked",!1),n.find("."+o).removeClass(d)),layui.event.call(n,x,"checkbox("+x+")",{type:"checkbox",ele:a,eleChecked:t,isAll:i===l.length})}),k.render("checkbox",a)},radio:function(e,c,r){var t="layui-form-radio",n="layui-form-radioed",l=["&#xe643;","&#xe63f;"],i="layui-anim-scaleSpring",o=(e.el,e.reElem.find("dl")),d=e.valueName,a=e.config.checkedName,s=e.config.indexName,u=c.filter(function(e){return!0===e[a]}),p=e.values,f=e.label,h=e.filter,y=e.labelSeparator,v=e.valueSeparator;layui.each(c,function(e,a){o.append('<dd lay-value="'+a[d]+'"></dd>')}),k.render("select",m.filter),o.find("dd").eq(0).nextAll().each(function(e){var a=g(this),t=c[e],n=t[d],l=n;0<f.length&&(l="",layui.each(f,function(e,a){l+=t[a],e<f.length-1&&(l+=y)}));var i=g('<input type="radio" name="'+x+"radio"+r+'"  yw-index="'+t[s]+'" lay-skin="primary" title="'+l+'" layui-value="'+n+'">');0<u.length&&u[0][s]===t[s]&&(i.prop("checked",!0),p.push(n),a.parent().prev().find("input").val(p.join(v))),a.html(i)}),k.render("radio",h),o.find("dd").on("click",function(e){var a=g(this);a.find("."+t).addClass(n).find("i").addClass(i).html(l[0]),a.find("input").prop("checked",!0),a.siblings().find("."+t).removeClass(n).find("i").removeClass(i).html(l[1]),a.siblings().find("input").prop("checked",!1),layui.event.call(a,x,"radio("+x+")",{type:"radio",ele:a,eleChecked:!0,isAll:!1})})}});layui.onevent.call(a,x,t+"("+x+")",a.checked.bind(a)),l[t]?l[t](m,e,n):i.error("不支持的"+t+"表单渲染")},n.prototype.checked=function(e){var l=this.config,i=l.data,c=l.config.checkedName,a=e.type,t=e.isAll,n=e.ele,r=e.eleChecked,o=l.el.attr("lay-filter");if("checkbox"===a)l.values=[],n.parents("dl").find('[type="checkbox"]').each(function(e){var a=g(this),t=a.attr("yw-index"),n=a.prop("checked");t&&(i[t][c]=n),n&&t&&l.values.push(a.attr("layui-value"))}),D(config.el,l.values),n.parent().prev().find("input").val(l.values.join(l.valueSeparator)),layui.event.call(n,x,x+"("+o+")",{checked:r,isAll:t,values:l.values,checkedData:i.filter(function(e){return!0===e[c]}),ele:n});else if("radio"===a){var d=n.find("input").attr("yw-index"),s=n.find("input").attr("layui-value");l.values=[s],n.parent().prev().find("input").val(s),layui.each(i,function(e,a){a[c]=!1}),i[d][c]=!0,layui.event.call(n,x,x+"("+o+")",{value:s,checkedData:i[d],ele:n})}},n.prototype.getChecked=function(){var e=this.config,a=e.data,t=e.config.checkedName;return{values:e.values,data:a.filter(function(e){return!0===e[t]})}},t.render=function(e,a){var t=new n(e,a);return function(){var e=this;return{getChecked:function(){return e.getChecked.call(e)},config:e.config}}.call(t)},e("selectPlus",t)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
