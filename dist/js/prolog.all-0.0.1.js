"use strict";

var _oMultiDiff;

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var strChineseFirstPY = ""; //此处收录了375个多音字

var oMultiDiff = (_oMultiDiff = {
  "19969": "DZ",
  "19975": "WM",
  "19988": "QJ",
  "20048": "YL",
  "20056": "SC",
  "20060": "NM",
  "20094": "QG",
  "20127": "QJ",
  "20167": "QC",
  "20193": "YG",
  "20250": "KH",
  "20256": "ZC",
  "20282": "SC",
  "20285": "QJG",
  "20291": "TD",
  "20314": "YD",
  "20340": "NE",
  "20375": "TD",
  "20389": "YJ",
  "20391": "CZ",
  "20415": "PB",
  "20446": "YS",
  "20447": "SQ",
  "20504": "TC",
  "20608": "KG",
  "20854": "QJ",
  "20857": "ZC",
  "20911": "PF"
}, _defineProperty(_oMultiDiff, "20504", "TC"), _defineProperty(_oMultiDiff, "20608", "KG"), _defineProperty(_oMultiDiff, "20854", "QJ"), _defineProperty(_oMultiDiff, "20857", "ZC"), _defineProperty(_oMultiDiff, "20911", "PF"), _defineProperty(_oMultiDiff, "20985", "AW"), _defineProperty(_oMultiDiff, "21032", "PB"), _defineProperty(_oMultiDiff, "21048", "XQ"), _defineProperty(_oMultiDiff, "21049", "SC"), _defineProperty(_oMultiDiff, "21089", "YS"), _defineProperty(_oMultiDiff, "21119", "JC"), _defineProperty(_oMultiDiff, "21242", "SB"), _defineProperty(_oMultiDiff, "21273", "SC"), _defineProperty(_oMultiDiff, "21305", "YP"), _defineProperty(_oMultiDiff, "21306", "QO"), _defineProperty(_oMultiDiff, "21330", "ZC"), _defineProperty(_oMultiDiff, "21333", "SDC"), _defineProperty(_oMultiDiff, "21345", "QK"), _defineProperty(_oMultiDiff, "21378", "CA"), _defineProperty(_oMultiDiff, "21397", "SC"), _defineProperty(_oMultiDiff, "21414", "XS"), _defineProperty(_oMultiDiff, "21442", "SC"), _defineProperty(_oMultiDiff, "21477", "JG"), _defineProperty(_oMultiDiff, "21480", "TD"), _defineProperty(_oMultiDiff, "21484", "ZS"), _defineProperty(_oMultiDiff, "21494", "YX"), _defineProperty(_oMultiDiff, "21505", "YX"), _defineProperty(_oMultiDiff, "21512", "HG"), _defineProperty(_oMultiDiff, "21523", "XH"), _defineProperty(_oMultiDiff, "21537", "PB"), _defineProperty(_oMultiDiff, "21542", "PF"), _defineProperty(_oMultiDiff, "21549", "KH"), _defineProperty(_oMultiDiff, "21571", "E"), _defineProperty(_oMultiDiff, "21574", "DA"), _defineProperty(_oMultiDiff, "21588", "TD"), _defineProperty(_oMultiDiff, "21589", "O"), _defineProperty(_oMultiDiff, "21618", "ZC"), _defineProperty(_oMultiDiff, "21621", "KHA"), _defineProperty(_oMultiDiff, "21632", "ZJ"), _defineProperty(_oMultiDiff, "21654", "KG"), _defineProperty(_oMultiDiff, "21679", "LKG"), _defineProperty(_oMultiDiff, "21683", "KH"), _defineProperty(_oMultiDiff, "21710", "A"), _defineProperty(_oMultiDiff, "21719", "YH"), _defineProperty(_oMultiDiff, "21734", "WOE"), _defineProperty(_oMultiDiff, "21769", "A"), _defineProperty(_oMultiDiff, "21780", "WN"), _defineProperty(_oMultiDiff, "21804", "XH"), _defineProperty(_oMultiDiff, "21834", "A"), _defineProperty(_oMultiDiff, "21899", "ZD"), _defineProperty(_oMultiDiff, "21903", "RN"), _defineProperty(_oMultiDiff, "21908", "WO"), _defineProperty(_oMultiDiff, "21939", "ZC"), _defineProperty(_oMultiDiff, "21956", "SA"), _defineProperty(_oMultiDiff, "21964", "YA"), _defineProperty(_oMultiDiff, "21970", "TD"), _defineProperty(_oMultiDiff, "22003", "A"), _defineProperty(_oMultiDiff, "22031", "JG"), _defineProperty(_oMultiDiff, "22040", "XS"), _defineProperty(_oMultiDiff, "22060", "ZC"), _defineProperty(_oMultiDiff, "22066", "ZC"), _defineProperty(_oMultiDiff, "22079", "MH"), _defineProperty(_oMultiDiff, "22129", "XJ"), _defineProperty(_oMultiDiff, "22179", "XA"), _defineProperty(_oMultiDiff, "22237", "NJ"), _defineProperty(_oMultiDiff, "22244", "TD"), _defineProperty(_oMultiDiff, "22280", "JQ"), _defineProperty(_oMultiDiff, "22300", "YH"), _defineProperty(_oMultiDiff, "22313", "XW"), _defineProperty(_oMultiDiff, "22331", "YQ"), _defineProperty(_oMultiDiff, "22343", "YJ"), _defineProperty(_oMultiDiff, "22351", "PH"), _defineProperty(_oMultiDiff, "22395", "DC"), _defineProperty(_oMultiDiff, "22412", "TD"), _defineProperty(_oMultiDiff, "22484", "PB"), _defineProperty(_oMultiDiff, "22500", "PB"), _defineProperty(_oMultiDiff, "22534", "ZD"), _defineProperty(_oMultiDiff, "22549", "DH"), _defineProperty(_oMultiDiff, "22561", "PB"), _defineProperty(_oMultiDiff, "22612", "TD"), _defineProperty(_oMultiDiff, "22771", "KQ"), _defineProperty(_oMultiDiff, "22831", "HB"), _defineProperty(_oMultiDiff, "22841", "JG"), _defineProperty(_oMultiDiff, "22855", "QJ"), _defineProperty(_oMultiDiff, "22865", "XQ"), _defineProperty(_oMultiDiff, "23013", "ML"), _defineProperty(_oMultiDiff, "23081", "WM"), _defineProperty(_oMultiDiff, "23487", "SX"), _defineProperty(_oMultiDiff, "23558", "QJ"), _defineProperty(_oMultiDiff, "23561", "YW"), _defineProperty(_oMultiDiff, "23586", "YW"), _defineProperty(_oMultiDiff, "23614", "YW"), _defineProperty(_oMultiDiff, "23615", "SN"), _defineProperty(_oMultiDiff, "23631", "PB"), _defineProperty(_oMultiDiff, "23646", "ZS"), _defineProperty(_oMultiDiff, "23663", "ZT"), _defineProperty(_oMultiDiff, "23673", "YG"), _defineProperty(_oMultiDiff, "23762", "TD"), _defineProperty(_oMultiDiff, "23769", "ZS"), _defineProperty(_oMultiDiff, "23780", "QJ"), _defineProperty(_oMultiDiff, "23884", "QK"), _defineProperty(_oMultiDiff, "24055", "XH"), _defineProperty(_oMultiDiff, "24113", "DC"), _defineProperty(_oMultiDiff, "24162", "ZC"), _defineProperty(_oMultiDiff, "24191", "GA"), _defineProperty(_oMultiDiff, "24273", "QJ"), _defineProperty(_oMultiDiff, "24324", "NL"), _defineProperty(_oMultiDiff, "24377", "TD"), _defineProperty(_oMultiDiff, "24378", "QJ"), _defineProperty(_oMultiDiff, "24439", "PF"), _defineProperty(_oMultiDiff, "24554", "ZS"), _defineProperty(_oMultiDiff, "24683", "TD"), _defineProperty(_oMultiDiff, "24694", "WE"), _defineProperty(_oMultiDiff, "24733", "LK"), _defineProperty(_oMultiDiff, "24925", "TN"), _defineProperty(_oMultiDiff, "25094", "ZG"), _defineProperty(_oMultiDiff, "25100", "XQ"), _defineProperty(_oMultiDiff, "25103", "XH"), _defineProperty(_oMultiDiff, "25153", "PB"), _defineProperty(_oMultiDiff, "25170", "PB"), _defineProperty(_oMultiDiff, "25179", "KG"), _defineProperty(_oMultiDiff, "25203", "PB"), _defineProperty(_oMultiDiff, "25240", "ZS"), _defineProperty(_oMultiDiff, "25282", "FB"), _defineProperty(_oMultiDiff, "25303", "NA"), _defineProperty(_oMultiDiff, "25324", "KG"), _defineProperty(_oMultiDiff, "25341", "ZY"), _defineProperty(_oMultiDiff, "25373", "WZ"), _defineProperty(_oMultiDiff, "25375", "XJ"), _defineProperty(_oMultiDiff, "25384", "A"), _defineProperty(_oMultiDiff, "25457", "A"), _defineProperty(_oMultiDiff, "25528", "SD"), _defineProperty(_oMultiDiff, "25530", "SC"), _defineProperty(_oMultiDiff, "25552", "TD"), _defineProperty(_oMultiDiff, "25774", "ZC"), _defineProperty(_oMultiDiff, "25874", "ZC"), _defineProperty(_oMultiDiff, "26044", "YW"), _defineProperty(_oMultiDiff, "26080", "WM"), _defineProperty(_oMultiDiff, "26292", "PB"), _defineProperty(_oMultiDiff, "26333", "PB"), _defineProperty(_oMultiDiff, "26355", "ZY"), _defineProperty(_oMultiDiff, "26366", "CZ"), _defineProperty(_oMultiDiff, "26397", "ZC"), _defineProperty(_oMultiDiff, "26399", "QJ"), _defineProperty(_oMultiDiff, "26415", "ZS"), _defineProperty(_oMultiDiff, "26451", "SB"), _defineProperty(_oMultiDiff, "26526", "ZC"), _defineProperty(_oMultiDiff, "26552", "JG"), _defineProperty(_oMultiDiff, "26561", "TD"), _defineProperty(_oMultiDiff, "26588", "JG"), _defineProperty(_oMultiDiff, "26597", "CZ"), _defineProperty(_oMultiDiff, "26629", "ZS"), _defineProperty(_oMultiDiff, "26638", "YL"), _defineProperty(_oMultiDiff, "26646", "XQ"), _defineProperty(_oMultiDiff, "26653", "KG"), _defineProperty(_oMultiDiff, "26657", "XJ"), _defineProperty(_oMultiDiff, "26727", "HG"), _defineProperty(_oMultiDiff, "26894", "ZC"), _defineProperty(_oMultiDiff, "26937", "ZS"), _defineProperty(_oMultiDiff, "26946", "ZC"), _defineProperty(_oMultiDiff, "26999", "KJ"), _defineProperty(_oMultiDiff, "27099", "KJ"), _defineProperty(_oMultiDiff, "27449", "YQ"), _defineProperty(_oMultiDiff, "27481", "XS"), _defineProperty(_oMultiDiff, "27542", "ZS"), _defineProperty(_oMultiDiff, "27663", "ZS"), _defineProperty(_oMultiDiff, "27748", "TS"), _defineProperty(_oMultiDiff, "27784", "SC"), _defineProperty(_oMultiDiff, "27788", "ZD"), _defineProperty(_oMultiDiff, "27795", "TD"), _defineProperty(_oMultiDiff, "27812", "O"), _defineProperty(_oMultiDiff, "27850", "PB"), _defineProperty(_oMultiDiff, "27852", "MB"), _defineProperty(_oMultiDiff, "27895", "SL"), _defineProperty(_oMultiDiff, "27898", "PL"), _defineProperty(_oMultiDiff, "27973", "QJ"), _defineProperty(_oMultiDiff, "27981", "KH"), _defineProperty(_oMultiDiff, "27986", "HX"), _defineProperty(_oMultiDiff, "27994", "XJ"), _defineProperty(_oMultiDiff, "28044", "YC"), _defineProperty(_oMultiDiff, "28065", "WG"), _defineProperty(_oMultiDiff, "28177", "SM"), _defineProperty(_oMultiDiff, "28267", "QJ"), _defineProperty(_oMultiDiff, "28291", "KH"), _defineProperty(_oMultiDiff, "28337", "ZQ"), _defineProperty(_oMultiDiff, "28463", "TL"), _defineProperty(_oMultiDiff, "28548", "DC"), _defineProperty(_oMultiDiff, "28601", "TD"), _defineProperty(_oMultiDiff, "28689", "PB"), _defineProperty(_oMultiDiff, "28805", "JG"), _defineProperty(_oMultiDiff, "28820", "QG"), _defineProperty(_oMultiDiff, "28846", "PB"), _defineProperty(_oMultiDiff, "28952", "TD"), _defineProperty(_oMultiDiff, "28975", "ZC"), _defineProperty(_oMultiDiff, "29100", "A"), _defineProperty(_oMultiDiff, "29325", "QJ"), _defineProperty(_oMultiDiff, "29575", "SL"), _defineProperty(_oMultiDiff, "29602", "FB"), _defineProperty(_oMultiDiff, "30010", "TD"), _defineProperty(_oMultiDiff, "30044", "CX"), _defineProperty(_oMultiDiff, "30058", "PF"), _defineProperty(_oMultiDiff, "30091", "YSP"), _defineProperty(_oMultiDiff, "30111", "YN"), _defineProperty(_oMultiDiff, "30229", "XJ"), _defineProperty(_oMultiDiff, "30427", "SC"), _defineProperty(_oMultiDiff, "30465", "SX"), _defineProperty(_oMultiDiff, "30631", "YQ"), _defineProperty(_oMultiDiff, "30655", "QJ"), _defineProperty(_oMultiDiff, "30684", "QJG"), _defineProperty(_oMultiDiff, "30707", "SD"), _defineProperty(_oMultiDiff, "30729", "XH"), _defineProperty(_oMultiDiff, "30796", "LG"), _defineProperty(_oMultiDiff, "30917", "PB"), _defineProperty(_oMultiDiff, "31074", "NM"), _defineProperty(_oMultiDiff, "31085", "JZ"), _defineProperty(_oMultiDiff, "31109", "SC"), _defineProperty(_oMultiDiff, "31181", "ZC"), _defineProperty(_oMultiDiff, "31192", "MLB"), _defineProperty(_oMultiDiff, "31293", "JQ"), _defineProperty(_oMultiDiff, "31400", "YX"), _defineProperty(_oMultiDiff, "31584", "YJ"), _defineProperty(_oMultiDiff, "31896", "ZN"), _defineProperty(_oMultiDiff, "31909", "ZY"), _defineProperty(_oMultiDiff, "31995", "XJ"), _defineProperty(_oMultiDiff, "32321", "PF"), _defineProperty(_oMultiDiff, "32327", "ZY"), _defineProperty(_oMultiDiff, "32418", "HG"), _defineProperty(_oMultiDiff, "32420", "XQ"), _defineProperty(_oMultiDiff, "32421", "HG"), _defineProperty(_oMultiDiff, "32438", "LG"), _defineProperty(_oMultiDiff, "32473", "GJ"), _defineProperty(_oMultiDiff, "32488", "TD"), _defineProperty(_oMultiDiff, "32521", "QJ"), _defineProperty(_oMultiDiff, "32527", "PB"), _defineProperty(_oMultiDiff, "32562", "ZSQ"), _defineProperty(_oMultiDiff, "32564", "JZ"), _defineProperty(_oMultiDiff, "32735", "ZD"), _defineProperty(_oMultiDiff, "32793", "PB"), _defineProperty(_oMultiDiff, "33071", "PF"), _defineProperty(_oMultiDiff, "33098", "XL"), _defineProperty(_oMultiDiff, "33100", "YA"), _defineProperty(_oMultiDiff, "33152", "PB"), _defineProperty(_oMultiDiff, "33261", "CX"), _defineProperty(_oMultiDiff, "33324", "BP"), _defineProperty(_oMultiDiff, "33333", "TD"), _defineProperty(_oMultiDiff, "33406", "YA"), _defineProperty(_oMultiDiff, "33426", "WM"), _defineProperty(_oMultiDiff, "33432", "PB"), _defineProperty(_oMultiDiff, "33445", "JG"), _defineProperty(_oMultiDiff, "33486", "ZN"), _defineProperty(_oMultiDiff, "33493", "TS"), _defineProperty(_oMultiDiff, "33507", "QJ"), _defineProperty(_oMultiDiff, "33540", "QJ"), _defineProperty(_oMultiDiff, "33544", "ZC"), _defineProperty(_oMultiDiff, "33564", "XQ"), _defineProperty(_oMultiDiff, "33617", "YT"), _defineProperty(_oMultiDiff, "33632", "QJ"), _defineProperty(_oMultiDiff, "33636", "XH"), _defineProperty(_oMultiDiff, "33637", "YX"), _defineProperty(_oMultiDiff, "33694", "WG"), _defineProperty(_oMultiDiff, "33705", "PF"), _defineProperty(_oMultiDiff, "33728", "YW"), _defineProperty(_oMultiDiff, "33882", "SR"), _defineProperty(_oMultiDiff, "34067", "WM"), _defineProperty(_oMultiDiff, "34074", "YW"), _defineProperty(_oMultiDiff, "34121", "QJ"), _defineProperty(_oMultiDiff, "34255", "ZC"), _defineProperty(_oMultiDiff, "34259", "XL"), _defineProperty(_oMultiDiff, "34425", "JH"), _defineProperty(_oMultiDiff, "34430", "XH"), _defineProperty(_oMultiDiff, "34485", "KH"), _defineProperty(_oMultiDiff, "34503", "YS"), _defineProperty(_oMultiDiff, "34532", "HG"), _defineProperty(_oMultiDiff, "34552", "XS"), _defineProperty(_oMultiDiff, "34558", "YE"), _defineProperty(_oMultiDiff, "34593", "ZL"), _defineProperty(_oMultiDiff, "34660", "YQ"), _defineProperty(_oMultiDiff, "34892", "XH"), _defineProperty(_oMultiDiff, "34928", "SC"), _defineProperty(_oMultiDiff, "34999", "QJ"), _defineProperty(_oMultiDiff, "35048", "PB"), _defineProperty(_oMultiDiff, "35059", "SC"), _defineProperty(_oMultiDiff, "35098", "ZC"), _defineProperty(_oMultiDiff, "35203", "TQ"), _defineProperty(_oMultiDiff, "35265", "JX"), _defineProperty(_oMultiDiff, "35299", "JX"), _defineProperty(_oMultiDiff, "35782", "SZ"), _defineProperty(_oMultiDiff, "35828", "YS"), _defineProperty(_oMultiDiff, "35830", "E"), _defineProperty(_oMultiDiff, "35843", "TD"), _defineProperty(_oMultiDiff, "35895", "YG"), _defineProperty(_oMultiDiff, "35977", "MH"), _defineProperty(_oMultiDiff, "36158", "JG"), _defineProperty(_oMultiDiff, "36228", "QJ"), _defineProperty(_oMultiDiff, "36426", "XQ"), _defineProperty(_oMultiDiff, "36466", "DC"), _defineProperty(_oMultiDiff, "36710", "JC"), _defineProperty(_oMultiDiff, "36711", "ZYG"), _defineProperty(_oMultiDiff, "36767", "PB"), _defineProperty(_oMultiDiff, "36866", "SK"), _defineProperty(_oMultiDiff, "36951", "YW"), _defineProperty(_oMultiDiff, "37034", "YX"), _defineProperty(_oMultiDiff, "37063", "XH"), _defineProperty(_oMultiDiff, "37218", "ZC"), _defineProperty(_oMultiDiff, "37325", "ZC"), _defineProperty(_oMultiDiff, "38063", "PB"), _defineProperty(_oMultiDiff, "38079", "TD"), _defineProperty(_oMultiDiff, "38085", "QY"), _defineProperty(_oMultiDiff, "38107", "DC"), _defineProperty(_oMultiDiff, "38116", "TD"), _defineProperty(_oMultiDiff, "38123", "YD"), _defineProperty(_oMultiDiff, "38224", "HG"), _defineProperty(_oMultiDiff, "38241", "XTC"), _defineProperty(_oMultiDiff, "38271", "ZC"), _defineProperty(_oMultiDiff, "38415", "YE"), _defineProperty(_oMultiDiff, "38426", "KH"), _defineProperty(_oMultiDiff, "38461", "YD"), _defineProperty(_oMultiDiff, "38463", "AE"), _defineProperty(_oMultiDiff, "38466", "PB"), _defineProperty(_oMultiDiff, "38477", "XJ"), _defineProperty(_oMultiDiff, "38518", "YT"), _defineProperty(_oMultiDiff, "38551", "WK"), _defineProperty(_oMultiDiff, "38585", "ZC"), _defineProperty(_oMultiDiff, "38704", "XS"), _defineProperty(_oMultiDiff, "38739", "LJ"), _defineProperty(_oMultiDiff, "38761", "GJ"), _defineProperty(_oMultiDiff, "38808", "SQ"), _defineProperty(_oMultiDiff, "39048", "JG"), _defineProperty(_oMultiDiff, "39049", "XJ"), _defineProperty(_oMultiDiff, "39052", "HG"), _defineProperty(_oMultiDiff, "39076", "CZ"), _defineProperty(_oMultiDiff, "39271", "XT"), _defineProperty(_oMultiDiff, "39534", "TD"), _defineProperty(_oMultiDiff, "39552", "TD"), _defineProperty(_oMultiDiff, "39584", "PB"), _defineProperty(_oMultiDiff, "39647", "SB"), _defineProperty(_oMultiDiff, "39730", "LG"), _defineProperty(_oMultiDiff, "39748", "TPB"), _defineProperty(_oMultiDiff, "40109", "ZQ"), _defineProperty(_oMultiDiff, "40479", "ND"), _defineProperty(_oMultiDiff, "40516", "HG"), _defineProperty(_oMultiDiff, "40536", "HG"), _defineProperty(_oMultiDiff, "40583", "QJ"), _defineProperty(_oMultiDiff, "40765", "YQ"), _defineProperty(_oMultiDiff, "40784", "QJ"), _defineProperty(_oMultiDiff, "40840", "YK"), _defineProperty(_oMultiDiff, "40863", "QJG"), _oMultiDiff); //参数,中文字符串
//返回值:拼音首字母串数组

function makePy(str) {
  if (typeof str != "string") throw new Error(-1, "函数makePy需要字符串类型参数!");
  var arrResult = new Array(); //保存中间结果的数组

  for (var i = 0, len = str.length; i < len; i++) {
    //获得unicode码
    var ch = str.charAt(i); //检查该unicode码是否在处理范围之内,在则返回该码对映汉字的拼音首字母,不在则调用其它函数处理

    arrResult.push(checkCh(ch));
  } //处理arrResult,返回所有可能的拼音首字母串数组


  return mkRslt(arrResult);
}

function checkCh(ch) {
  var uni = ch.charCodeAt(0); //如果不在汉字处理范围之内,返回原字符,也可以调用自己的处理函数

  if (uni > 40869 || uni < 19968) return ch; //dealWithOthers(ch);
  //检查是否是多音字,是按多音字处理,不是就直接在strChineseFirstPY字符串中找对应的首字母

  return oMultiDiff[uni] ? oMultiDiff[uni] : strChineseFirstPY.charAt(uni - 19968);
}

function mkRslt(arr) {
  var arrRslt = [""];

  for (var i = 0, len = arr.length; i < len; i++) {
    var str = arr[i];
    var strlen = str.length;

    if (strlen == 1) {
      for (var k = 0; k < arrRslt.length; k++) {
        arrRslt[k] += str;
      }
    } else {
      var tmpArr = arrRslt.slice(0);
      arrRslt = [];

      for (k = 0; k < strlen; k++) {
        //复制一个相同的arrRslt
        var tmp = tmpArr.slice(0); //把当前字符str[k]添加到每个元素末尾

        for (var j = 0; j < tmp.length; j++) {
          tmp[j] += str.charAt(k);
        } //把复制并修改后的数组连接到arrRslt上


        arrRslt = arrRslt.concat(tmp);
      }
    }
  }

  return arrRslt;
} //两端去空格函数


String.prototype.trim = function () {
  return this.replace(/(^\s*)|(\s*$)/g, "");
};

var pinyin = {};
pinyin.makePy = makePy;

Date.prototype.format = function (fmt) {
  //author: meizz 
  var o = {
    "M+": this.getMonth() + 1,
    //月份 
    "d+": this.getDate(),
    //日 
    "h+": this.getHours(),
    //小时 
    "m+": this.getMinutes(),
    //分 
    "s+": this.getSeconds(),
    //秒 
    "q+": Math.floor((this.getMonth() + 3) / 3),
    //季度 
    "S": this.getMilliseconds() //毫秒 

  };
  if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));

  for (var k in o) {
    if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
  }

  return fmt;
}; // 增强code的健壮性，主要是其他用不到dhtml插件的文件，不再需要引入这个插件了


if (!(typeof dhtmlXCalendarObject === 'undefined' || !dhtmlXCalendarObject)) {
  dhtmlXCalendarObject.prototype.langData["ch"] = {
    dateformat: '%Y-%m-%d',
    monthesFNames: ["1月", '2月', '3月', "4月", '5月', '6月', "7月", '8月', '9月', "10月", '11月', '12月'],
    monthesSNames: ["1月", '2月', '3月', "4月", '5月', '6月', "7月", '8月', '9月', "10月", '11月', '12月'],
    daysFNames: ["星期天", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
    daysSNames: ["日", "一", "二", "三", "四", "五", "六"],
    weekstart: "周日",
    weekname: "星期",
    today: "今天",
    clear: "清除"
  };
  dhtmlXCalendarObject.prototype.lang = "ch";
}

;
var Prolog = {};
var GridBasePath = "/prologui/components/PlgGrid/codebase/images";
var token = localStorage.getItem("authorization"); //获取元素的纵坐标 

Prolog.getTop = function (e) {
  var offset = e.offsetTop;

  if (e.offsetParent != null) {
    offset += Prolog.getTop(e.offsetParent);
  }

  ;
  return offset;
}; // 获取元素的横坐标


Prolog.getLeft = function (e) {
  var offset = e.offsetLeft;

  if (e.offsetParent != null) {
    offset += Prolog.getLeft(e.offsetParent);
  }

  ;
  return offset;
};

Prolog.hasJson = function (jsonArray, json) {
  for (var i = 0; i < jsonArray.length; i++) {
    var b = true;

    for (var key in jsonArray[i]) {
      if (jsonArray[i][key] != json[key]) {
        b = false;
        break;
      }
    }

    if (b) return i;
  }

  return -1;
};

Prolog.ajax = function (options) {
  var pdefault = {
    timeout: 30000,
    dataType: "json"
  };
  var opt = $.extend(true, pdefault, options);

  opt.error = function (XMLHttpRequest, textStatus, errorThrown) {
    layer.msg(textStatus);
    if (options.error) options.error(XMLHttpRequest, textStatus, errorThrown);
  };

  opt.beforeSend = function (xhr) {
    xhr.setRequestHeader("Authorization", token);

    if (options.beforeSend) {
      options.beforeSend(xhr);
    }
  };

  $.ajax(opt);
};

Prolog.syncAjax = function (options) {
  var pdefault = {
    timeout: 30000
  };
  var opt = $.extend(true, pdefault, options);

  opt.error = function (XMLHttpRequest, textStatus, errorThrown) {
    layer.msg(textStatus);
    if (options.error) options.error(XMLHttpRequest, textStatus, errorThrown);
  };

  opt.async = false;

  opt.beforeSend = function (xhr) {
    xhr.setRequestHeader("Authorization", token);

    if (options.beforeSend) {
      options.beforeSend(xhr);
    }
  };

  $.ajax(opt);
};

Prolog.getFormById = function (systemId, menuId, formId) {
  var myform = null;
  var data = Prolog.getJsonData("/japi/sysform2/form", "GET", {
    systemId: systemId,
    menuId: menuId,
    formId: formId,
    id: systemId + "_" + menuId + "_" + formId
  });

  if (data != null && data.success == true) {
    if (data.data != null && data.data.fields != null) {
      myform = new PrologForm();
      var formdata = JSON.parse(data.data.fields);
      myform.init(formdata);
    } else {
      layer.msg("未定义表单内容");
    }
  }

  return myform;
};

Prolog.createRandomId = function () {
  return new Date().getTime() + Math.random().toString().substr(2, 5);
};

Prolog.loading = function (el) {
  var loading = PlgDialog.loading(); //layui-layer14

  $("#layui-layer-shade" + loading).appendTo("#" + el);
  $("#layui-layer" + loading).appendTo("#" + el);
  $("#layui-layer" + loading).css("left", "50%");
  $("#layui-layer" + loading).css("margin-left", "-90px");
  $("#layui-layer" + loading).css("top", 200 + "px");
  return loading;
};

Prolog.closeLoading = function (id) {
  layer.close(id);
};

Prolog.loading2 = function () {
  var index = PlgDialog.load(2, {
    shade: [0.6, '#fff'] //0.1透明度的白色背景

  });
  return function () {
    PlgDialog.close(index);
  };
};
/*
* @method 删除 PlgGrid 行数据
* @param grid - grid控件
* @param url {string} - 数据接口地址
* @param type {string} - 数据接口请求类型，为空时默认post
* @param contenttype {string} - 数据接口请求 contentType 类型，为空时默认application/x-www-form-urlencoded
* @param param {object} - 请求参数名 {"id":0}
* @author jiw
* @deprecated 删除PlgGrid选中行数据，删除成功后reload
*/


Prolog.delGridRowData = function (grid, url, type, contenttype, param, multiselect) {
  if (multiselect === false) {
    if (grid.getSelectedRowId() == null && param.length < 1) {
      PlgDialog.msg("请选择行!");
      return;
    }
  } else {
    if (grid.getCheckedIds() == null) {
      PlgDialog.msg("请选择行!");
      return;
    }
  }

  PlgDialog.confirm('是否删除吗？', {
    title: '删除提示',
    btn: ['确定', '取消'],
    zIndex: layer.zIndex
  }, function (index) {
    PlgDialog.close(index);
    if (type === "") type = "post";
    if (contenttype === "") contenttype = "application/x-www-form-urlencoded";
    layer.msg("数据处理中...");
    Prolog.ajax({
      url: url,
      type: type,
      contentType: contenttype,
      data: param,
      success: function success(data) {
        if (_typeof(data) != "object") data = JSON.parse(data);

        if (data.success) {
          grid.reload();
          layer.closeAll();
        } else {
          layer.open({
            type: 1,
            offset: "auto",
            id: 'layerError',
            area: ["500px"],
            title: "错误提示",
            content: '<div style="padding: 10px;">' + $.parseJSON(data).message + '</div>',
            btn: '关闭',
            btnAlign: 'r',
            shade: 0,
            yes: function yes() {
              layer.closeAll();
            }
          });
        }
      },
      error: function error() {}
    });
  });
};
"use strict";

;

(function ($, layui) {
  //PlgTabs.js
  layui.use(["layer"], function () {
    var layer = layui.layer;
    layer.config({
      anim: 0,
      //默认动画风格
      zIndex: 10000,
      //skin: 'layui-layer-lan',
      shade: 0.5,
      btnAlign: 'r',
      fixed: false
    });
    var plgDialog = layer;

    plgDialog.showUploadDialog = function (url) {
      var winoptions = {
        title: "上传文件",
        skin: 'layui-layer-lan',
        closeBtn: 1,
        type: 1,
        resize: true,
        btn: ["上传", "取消"],
        btn1: function btn1(index, layero) {
          PlgDialog.close(index);
        },
        btn2: function btn2(index, layero) {
          PlgDialog.close(index);
        },
        area: ['300px', '300px'],
        content: '<div id="xx-win-dd-1"></div>',
        success: function success(layero, index) {
          var formdata = [{
            type: "upload",
            name: "files",
            url: url
          }];
          var mf = new PlgForm({
            items: formdata
          });
          mf.renderTo("xx-win-dd-1");
        }
      };
      layer.open(winoptions);
    };

    plgDialog.showGridDialog = function (plgGrid, callback, opts) {
      var winoptions = {
        title: opts.title ? opts.title : "",
        skin: 'layui-layer-lan',
        closeBtn: 1,
        type: 1,
        resize: true,
        tipsMore: true,
        btn: ["选择", "取消"],
        btn1: function btn1(index, layero) {
          var id = plgGrid.getSelectedRowId();

          if (!id) {
            layer.msg("为选择数据");
            return;
          }

          var record = plgGrid.getSelectedRowData();
          if (callback) callback(id, record);
          PlgDialog.close(index);
        },
        btn2: function btn2(index, layero) {
          PlgDialog.close(index);
        },
        area: [opts.width + 'px', opts.height + 'px'],
        content: '<div id="' + panelId + '-win-grid-1"></div>',
        success: function success(layero, index) {
          plgGrid.renderTo(panelId + '-win-grid-1');
          plgGrid.loadData();
          plgGrid.on("onRowDblClicked", function (rid, ind) {
            var record = plgGrid.getUserData(rid, "data");
            ;
            if (callback) callback(rid, record);
            PlgDialog.close(index);
          });
        }
      };

      if (type == 1) {
        winoptions.btn = ["保存", "取消"];
        winoptions.btn2 = winoptions.btn3;
        winoptions.btn3 = null;
      }

      PlgDialog.open(winoptions);
    };

    plgDialog.loading2 = function () {
      var index = PlgDialog.load(2, {
        shade: [0.6, '#fff'] //0.1透明度的白色背景

      });
      return function () {
        PlgDialog.close(index);
      };
    };

    window.PlgDialog = plgDialog;
  });
})(jQuery, layui);
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

String.prototype.replaceAll = function (a, b) {
  var reg = new RegExp(a, "g"); //g,表示全部替换。

  return this.replace(reg, b);
};

function eXcell_button(cell) {
  //the eXcell name is defined here
  if (cell) {
    // the default pattern, just copy it
    this.cell = cell;
    this.grid = this.cell.parentNode.grid;
  }

  this.edit = function () {}; //read-only cell doesn't have edit method


  this.isDisabled = function () {
    return true;
  }; // the cell is read-only, so it's always in the disabled state


  this.setValue = function (val) {
    var row_id = this.cell.parentNode.idd; //修改^resourc_editClick,删除^resourc_deleteClick

    var row_data = JSON.stringify(this.grid.getUserData(row_id, "data")); // //console.log(row_data);

    row_data = row_data.replaceAll("'", "");
    val = val.replaceAll(",", ";");
    var btns = val.split(";");
    var str = "";

    for (var k = 0; k < btns.length; k++) {
      var btnstr = btns[k];
      var btnv = btnstr.substring(0, btnstr.indexOf("^"));
      var btnevent = btnstr.substring(btnstr.indexOf("^") + 1);
      str += "<div class='plg-divider plg-divider-vertical'></div><a class='' href='javascript:void(0);' onclick='" + btnevent + "(\"" + row_id + "\"," + row_data + ")' >" + btnv + "</a>";
    }

    str = str.substring(str.indexOf("<a"));
    this.setCValue(str, val);
  };
}

eXcell_button.prototype = new eXcell(); // nests all other methods from the base class

function eXcell_selectTable(cell) {
  //excell name is defined here
  if (cell) {
    //default pattern, just copy it
    this.cell = cell;
    this.grid = this.cell.parentNode.grid;
    this.cell.selectTable = null;
    this.cellIndex = cell.cellIndex;
    this.cellColumnId = this.grid.columnIds[this.cellIndex];
  }

  this.setValue = function (val) {
    if (val == null) return;
    var row_id = this.cell.parentNode.idd;
    var ddd = this.cell.parentNode; //debug;
    //console.log(ddd);

    var data = this.grid.getUserData(row_id, "data");

    if (data == null || data == "") {
      data = {};
    }

    if (_typeof(val) == "object") {
      this.setCValue(val.text);
      this.cell.selectTable_value = val.value;
      this.cell.selectTable_text = val.text;
    } else {
      try {
        var jo = JSON.parse(val);
        this.setCValue(jo.text);
        var tv = jo.value;
        if (_typeof(tv) == "object") tv = JSON.stringify(tv);
        this.cell.selectTable_value = tv;
        this.cell.selectTable_text = jo.text;
      } catch (e) {
        this.setCValue(val);
        this.cell.selectTable_value = val;
        this.cell.selectTable_text = val;
      }
    }

    data[this.cellColumnId] = val;
    this.grid.setUserData(row_id, "data", data);
  };

  this.getValue = function () {
    return this.cell.selectTable_value || ""; // get value
  };

  this.edit = function () {
    var cv = this.cell.selectTable_value;
    var ct = this.cell.selectTable_text;
    var opts = this.grid.opts;
    var columnOpt;

    for (var i = 0; i < opts.columns.length; i++) {
      if (opts.columns[i].id == this.cellColumnId) {
        columnOpt = opts.columns[i];
        break;
      }
    }

    var table = columnOpt.table;
    this.cell.innerHTML = "<div id='selectTable_xcell_00001'></div>";

    var _this = this;

    if (table.beforeLoad) {
      var beforeCall = table.beforeLoad;
      beforeCall(table);
    }

    var opts = {
      renderer: "selectTable_xcell_00001",
      items: [{
        type: "settings",
        position: "label-left",
        labelWidth: 0,
        inputWidth: 50
      }, {
        type: "selectTable",
        table: table,
        fieldText: columnOpt.fieldText,
        fieldValue: columnOpt.fieldValue,
        name: this.cellColumnId,
        label: "",
        placeholder: '单击选择',
        listener: {
          "afterClose": function afterClose(txt, value, plgGrid) {
            _this.cell.innerHTML = "";

            _this.setValue({
              "text": txt,
              "value": value
            });

            if (columnOpt.listener && columnOpt.listener.afterClose) {
              var cb1 = columnOpt.listener.afterClose;
              cb1(txt, value, plgGrid);
            }
          },
          "init": function init(grid) {
            if (columnOpt.listener && columnOpt.listener.init) {
              var cb2 = columnOpt.listener.init;
              cb2(grid);
            }
          },
          "afterSelect": function afterSelect(isSelected, selectId, sgrid) {
            if (columnOpt.listener && columnOpt.listener.afterSelect) {
              var cb3 = columnOpt.listener.afterSelect;
              cb3(isSelected, selectId, sgrid);
            }
          }
        }
      }]
    };
    var frm = new PlgForm(opts);
    this.cell.selectTable = frm;

    if (cv != null && ct != null) {
      frm.getDForm().setData(this.cellColumnId, ct, cv);
    } //frm.getDForm().active(this.cellColumnId);

  };

  this.detach = function () {
    return false;
  };
}

eXcell_selectTable.prototype = new eXcell(); // nests all other methods from base class

;

(function ($) {
  $.fn.initPlgGrid = function (options) {
    var pg = new plgGrid(options);
    var id = $(this).attr("id");
    pg.renderTo(id);
    return pg;
  };

  var plgGrid = function plgGrid(options) {
    var plgGrid_default = {
      title: '',
      renderer: "",
      columns: [],
      multiselect: false,
      url: "data.json",
      type: "get",
      pageNum: "pageNum",
      pageSize: "pageSize",
      params: {
        pageSize: 10,
        pageNum: 1
      },
      //字符串或json
      contentType: "application/x-www-form-urlencoded",
      page: true,
      imagePath: "../../../assets/PlgGrid/",
      totalCount: "totalCount",
      toolbar: [],
      formData: [],
      pagebar: {
        buttons: [],
        type: 'full' //full simple min

      }
    };
    var opts;
    opts = $.extend({}, plgGrid_default, options); //合并成新对象，则是新的属性列表

    this.opts = opts;
    var panel;
    var laypage;
    var panelId, pageBarId, gridId, toolBarId, pageBarPanelId, gridTitleId, colsetingId;
    var mygrid;
    var toolBarForm;
    var gridForm;
    var myFormData;
    var formDisableFields;
    var beforeDialogOpenEvent;
    var afterDialogOpenEvent;
    var loadingId;
    var columnArray;
    var headerArray;
    var hidenArray;
    var pageButtons = new Array();
    var rand = Prolog.createRandomId();
    var pageNum = opts.params.pageNum ? opts.params.pageNum : plgGrid_default.params.pageNum;
    var pageSize = opts.params.pageSize ? opts.params.pageSize : plgGrid_default.params.pageSize;
    var rownum = 1;
    var containerId;
    var loadDataCallback; //加载完数据的回调，在loaddata或reload方法中设置

    function renderTo(id) {
      containerId = id;
      $("#" + containerId).empty();
      colsetingId = id + "-colsetting-" + rand;
      panelId = id + "-panel-" + rand;
      toolBarId = id + "-toolbar-" + rand;
      pageBarPanelId = id + "-pagebar-panel-" + rand;
      pageBarId = id + "-pagebar-" + rand;
      gridId = id + "-panel-grid-" + rand;
      gridTitleId = id + "-panel-grid-title-" + rand; //顶级dom对象

      createPanel();
      $("#" + id).append(panel); //创建表格

      createGrid(gridId); //初始化表格

      mygrid.init(); //finishes initialization and renders the grid on the page 
      //创建工具条

      createToolBar(panel); //创建新建、编辑表单

      createForm();
      setTimeout(function () {
        resetSize();
      }, 300);
      $("#" + containerId).addClass("grid-container-full");
    } //高度计算


    function resetSize() {
      var containerHeight = $("#" + containerId).height();
      var pheight = containerHeight - 50;
      var theight = $("#" + toolBarId).height() ? $("#" + toolBarId).height() : 0;
      var titleheight = $("#" + gridTitleId).height() ? $("#" + gridTitleId).height() : 0;
      var pageBarPanelHeight = $("#" + pageBarPanelId).height() ? $("#" + pageBarPanelId).height() : 0;
      var h = pheight - theight - titleheight - pageBarPanelHeight;
      $("#" + gridId + " .gridbox").css("min-height", h + "px");
      $("#" + gridId + " .gridbox").css("height", h + "px");
      $("#" + gridId + " .objbox").css("min-height", h - 20 + "px");
      $("#" + gridId + " .objbox").css("height", h - 20 + "px");
      $("#" + panelId).css("height", "auto");
    }
    /**
     * 创建面板
     */


    function createPanel() {
      panel = document.createElement("div");
      panel.className = "plg-grid-panel";
      panel.setAttribute("id", panelId);

      if (opts.title && opts.title != "") {
        var gridTitleDiv = document.createElement("div");
        gridTitleDiv.className = "plg-grid-title";
        gridTitleDiv.setAttribute("id", gridTitleId);
        gridTitleDiv.innerHTML = opts.title;
        panel.appendChild(gridTitleDiv);
      }

      if (opts.toolbar && opts.toolbar.length > 0) {
        var toolBarDiv = document.createElement("div");
        toolBarDiv.setAttribute("id", toolBarId);
        toolBarDiv.className = "plg-toolbar";
        panel.appendChild(toolBarDiv);
      }

      var gridDiv = document.createElement("div");
      gridDiv.setAttribute("id", gridId);
      gridDiv.className = "plg-grid";
      panel.appendChild(gridDiv);

      if (opts.page == true) {
        var pageBarPanel = document.createElement("div");
        pageBarPanel.className = "plg-grid-pagebar";
        pageBarPanel.setAttribute("id", pageBarPanelId);
        createPageBarButton(pageBarPanel);

        if (opts.page) {
          var pageBarDiv = document.createElement("div");
          pageBarDiv.setAttribute("id", pageBarId);
          pageBarPanel.appendChild(pageBarDiv);
        }

        panel.appendChild(pageBarPanel); //createPageBar(pageBarId,0,1);
      }
    } //创建分页条按钮


    function createPageBarButton(parentEl) {
      if (opts.pagebar && opts.pagebar.buttons && opts.pagebar.buttons.length > 0) {
        for (var i = 0; i < opts.pagebar.buttons.length; i++) {
          var bop = opts.pagebar.buttons[i];
          var btn = document.createElement("button");
          btn.className = "layui-btn pagebar-button layui-btn-disabled " + (bop.className != null ? bop.className : "");
          btn.innerHTML = bop.text;
          if (bop.name) btn.setAttribute("name", bop.name);
          parentEl.appendChild(btn);
          pageButtons.push(btn);
        }
      }
    } //绑定分页条按钮事件


    this.attachPageBarEvent = function (callback) {
      $("#" + pageBarPanelId).on("click", ".pagebar-button", function () {
        var _this = $(this);

        if (_this.hasClass("layui-btn-disabled")) return;

        var name = _this.attr("name");

        var ids = mygrid.getCheckedRows(1);
        callback(name, ids);
      });
    }; //改变分页条按钮是否可用


    function changePageBtnStatus() {
      var ch = mygrid.getCheckedRows(1);

      if (ch != null && ch != "") {
        for (var j = 0; j < pageButtons.length; j++) {
          var btn = $(pageButtons[j]);

          if (btn.hasClass("layui-btn-disabled")) {
            btn.removeClass("layui-btn-disabled");
          }
        }
      } else {
        for (var j = 0; j < pageButtons.length; j++) {
          var btn = $(pageButtons[j]);

          if (!btn.hasClass("layui-btn-disabled")) {
            btn.addClass("layui-btn-disabled");
          }
        }
      }
    }

    function createToolBar(panel) {
      if (opts.toolbar && opts.toolbar.length) {
        toolBarForm = new PlgForm({
          renderer: toolBarId,
          items: opts.toolbar
        });
        $("#" + toolBarId).addClass("plg-toolbar");
      }
    }

    function createForm() {
      if (opts.formData != null) {
        gridForm = new PlgForm({
          items: opts.formData
        });
        formDisableFields = new Array();

        for (var i = 0; i < opts.formData.length; i++) {
          setEditable(opts.formData[i]);
        }
      }
    }

    function setEditable(opt) {
      if (opt.editable != null && opt.editable == false) {
        formDisableFields.push(opt.name);
      }

      if (opt.list && opt.list.length > 0) {
        for (var i = 0; i < opt.list.length; i++) {
          setEditable(opt.list[i]);
        }
      }
    }

    this.showDialog = function (type, title, width, height, requestParams, isMultipleRow) {
      if (beforeDialogOpenEvent) {
        beforeDialogOpenEvent(type, title, width, height, requestParams);
      }

      var _this = this;

      if (gridForm == null) {
        PlgDialog.msg("未设置表单");
        return;
      } //type=0 add type=1 edit


      if (type == 1) {
        if (!_this.getSelectedRowId()) {
          PlgDialog.msg("请选择行!");
          return;
        }
      }

      var winoptions = {
        title: title,
        //skin: 'layui-layer-lan',
        closeBtn: 1,
        type: 1,
        resize: true,
        tipsMore: true,
        btn: ["保存", "重置", "取消"],
        btn1: function btn1(index, layero) {
          //console.log('用户点击了保存');
          //console.log('获取的表单数据....');
          //console.log(gridForm.getFormData());
          //console.log('获取的表单数据....');
          if (gridForm.validate() == false) {
            return;
          }

          var loading = PlgDialog.msg('数据加载中...', {
            icon: 16,
            shade: 0.8,
            time: 0
          });
          var dp; // //console.log(gridForm.getFormData())

          if (isMultipleRow) {
            dp = new Array();
            dp.push(gridForm.getFormData());
          } else {
            dp = gridForm.getFormData();
          } // 由于checkbox传递的值是选中了一个，单独传递的，所以在显示出传递给后台需要加工。


          var checkoutList = []; // 获取checkout列表中的数据

          if (opts.formData && opts.formData.length > 1) {
            opts.formData.map(function (val) {
              if ('label' === val.type) {
                //console.log(val.type);
                val.list.map(function (value) {
                  checkoutList.push(value.name);
                });
              }
            });
            checkoutList = checkoutList.filter(function (val) {
              return val;
            });
          } // 


          var userInputData = gridForm.getFormData();

          if (requestParams.contentType != null && requestParams.contentType.indexOf('application/json') > -1) {
            requestParams.data = JSON.stringify(dp);
          } else {
            requestParams.data = dp;
          }

          requestParams.success = function (data) {
            if (data.success) {
              _this.reload();

              PlgDialog.close(index);
            } else {
              ////console.log(data);
              PlgDialog.msg(data.message);
            }

            PlgDialog.close(loading);
          };

          Prolog.ajax(requestParams);
        },
        btn2: function btn2(index, layero) {
          gridForm.clear();
          return false;
        },
        btn3: function btn3(index, layero) {
          PlgDialog.close(index);
        },
        area: [width + 'px', height + 'px'],
        content: '<div id="' + panelId + '-win-form-1"></div>',
        success: function success(layero, index) {
          gridForm.renderTo(panelId + '-win-form-1');

          if (type == 1) {
            //gridForm.setFormData(_this.getSelectedRowData());
            setFormData(gridForm, _this.getSelectedRowData());

            for (var k = 0; k < formDisableFields.length; k++) {
              gridForm.disableItem(formDisableFields[k]);
            }
          } else {
            for (var k = 0; k < formDisableFields.length; k++) {
              gridForm.enableItem(formDisableFields[k]);
            }
          }

          if (afterDialogOpenEvent) {
            afterDialogOpenEvent(gridForm);
          }
        }
      };

      if (type == 1) {
        winoptions.btn = ["保存", "取消"];
        winoptions.btn2 = winoptions.btn3;
        winoptions.btn3 = null;
      }

      PlgDialog.open(winoptions);
    };

    function setFormData(plgform, data) {
      var items = plgform.getFormData();

      for (var key in items) {
        items[key] = data[key];
      }

      plgform.setFormData(items);
    }
    /**
     * 创建分页组件
     * @param {Object} id
     */


    function createPageBar(id, totalCount, curr) {
      if (opts.page == false) return;
      pageSize = pageSize == null ? 0 : pageSize;
      totalCount = totalCount == null ? 0 : totalCount;
      $("#" + id).empty();
      laypage = layui.laypage;
      var layout = ['prev', 'page', 'next', 'limit', 'refresh', 'skip', 'count'];

      if (opts.pagebar && opts.pagebar.type == "simple") {
        //简化功能
        layout = ['prev', 'page', 'next', 'refresh', 'count'];
      } else if (opts.pagebar && opts.pagebar.type == "min") {
        //简化功能
        layout = ['prev', 'next', 'count'];
      }

      var page00 = laypage.render({
        elem: id,
        count: totalCount,
        limit: pageSize,
        curr: curr,
        limits: [5, 10, 20, 30, 50, 100, 200, 500, 1000],
        groups: 5,
        theme: "plg",
        prev: '<i class="layui-icon layui-icon-left"></i>',
        next: '<i class="layui-icon layui-icon-right"></i>',
        layout: layout,
        jump: pageJump
      });
    } //分页跳转事件


    function pageJump(obj, first) {
      pageNum = obj.curr;
      pageSize = obj.limit;
      if (!first) reload();
    }

    function createGrid(id) {
      mygrid = new dhtmlXGridObject(id); //mygrid.setSkin("web");

      var imp = opts.imagePath == null ? GridBasePath : opts.imagePath;

      if (imp && imp.length > 0) {
        imp = imp.substr(imp.length - 1, 1) != "/" ? imp + "/" : imp;
        mygrid.setImagePath(imp);
      } //[{id:"",name:"",type:'',sort:'',align:'',width:'',hidden:false,default:"",renderer:}]


      var cdata = opts.columns.slice(0);
      columnArray = new Array();
      headerArray = new Array();
      hidenArray = new Array();
      var widthArray = new Array();
      var alignArray = new Array();
      var headerAlignArray = new Array();
      var typeArray = new Array();
      var typeArray = new Array();
      var sortArray = new Array();
      columnArray.push("chbx000");
      headerArray.push("<a href='javascript:void(0);' class='plg-grid-first-col'><i class='layui-icon layui-icon-component'></i></a>");
      headerAlignArray.push("text-align:center");
      widthArray.push("30");
      alignArray.push("center");
      typeArray.push("ro");
      sortArray.push("int");
      hidenArray.push(false);

      if (opts.multiselect) {
        columnArray.push("chbx001"); //headerArray.push("<input class='plg-grid-second-col' type='checkbox' />");
        //headerArray.push('#master_checkbox');

        headerArray.push('<img src="' + mygrid._imgURL + 'dhxgrid_web/item_chk0.gif" class="plg-grid-second-col" title="">'); //../../prologui/assets/PlgGrid/
        ////console.log(mygrid._imgURL);

        headerAlignArray.push("text-align:center");
        widthArray.push("28");
        alignArray.push("center");
        typeArray.push("ch");
        sortArray.push("na");
        hidenArray.push(false);
      }

      sortArray.push("str"); //unshift()

      for (var i = 0; i < cdata.length; i++) {
        columnArray.push(cdata[i].id);
        headerArray.push(cdata[i].name == null ? cdata[i].id : cdata[i].name);
        widthArray.push(cdata[i].width == null ? "*" : cdata[i].width);
        alignArray.push(cdata[i].align == null ? "left" : cdata[i].align);
        headerAlignArray.push(cdata[i].align == null ? "text-align:left" : "text-align:" + cdata[i].align);
        typeArray.push(cdata[i].type == null ? "ro" : cdata[i].type);
        sortArray.push(cdata[i].sort == null ? "str" : cdata[i].sort);

        if (cdata[i].hidden) {
          hidenArray.push(true);
          if (opts.multiselect) mygrid.setColumnHidden(i + 2, true);else mygrid.setColumnHidden(i + 1, true);
        } else hidenArray.push(false);
      }

      mygrid.setColumnIds(columnArray.toString());
      mygrid.setHeader(headerArray.toString(), null, headerAlignArray); ////console.log(headerAlignArray);
      ////console.log(headerArray);

      mygrid.setInitWidths(widthArray.toString()); //the widths of columns

      mygrid.setColAlign(alignArray.toString()); //the alignment of columns

      mygrid.setColTypes(typeArray.toString()); //the types of columns

      mygrid.setColSorting(sortArray.toString()); //the sorting types

      if (opts.filters) {
        if (opts.multiselect) mygrid.attachHeader(",," + opts.filters.toString());else mygrid.attachHeader("," + opts.filters.toString());
      }

      mygrid.enableMultiselect(opts.multiselect);
      mygrid.enableAutoHeight(false);
      mygrid.enableRowsHover(true, "plg-grid-hover"); //mygrid.enableHeaderMenu("true");

      mygrid.opts = opts;
      mygrid.attachEvent("onAfterSorting", function (index, type, direction) {
        resetSize();
      });
      mygrid.attachEvent("onResizeEnd", function (obj) {
        resetSize();
      });
      mygrid.attachEvent("onCheck", function (rId, cInd, state) {
        if (cInd == 1 && opts.multiselect) {
          changePageBtnStatus(); //控制选择操作

          var ch = $("#" + panelId + " .plg-grid-second-col");
          var cstr = ch.attr("src");

          if (mygrid.getAllRowIds(",").split(",").length == mygrid.getCheckedRows(1).split(",").length) {
            ch.attr("src", cstr.replaceAll("chk0", "chk1"));
          } else {
            ch.attr("src", cstr.replaceAll("chk1", "chk0"));
          }

          return true;
        }

        return true;
      });
      mygrid.attachEvent("onHeaderClick", function (ind, obj) {
        if (ind == 0) {
          showColsSettingDialog("#" + panelId + " .plg-grid-first-col i");
          return false;
        } else if (ind == 1) {
          if (opts.multiselect) {
            var ch = $("#" + panelId + " .plg-grid-second-col");
            var cstr = ch.attr("src");

            if (cstr.indexOf("chk0") > -1) {
              checkAll(true);
              ch.attr("src", cstr.replaceAll("chk0", "chk1"));
            } else {
              checkAll(false);
              ch.attr("src", cstr.replaceAll("chk1", "chk0"));
            }

            event.stopPropagation();
          }

          return true;
        } else {
          return true;
        }
      });
    } //设置全选或全不选


    function checkAll(b) {
      var count = mygrid.getRowsNum();
      var k = b ? 1 : 0;

      for (var i = 0; i < count; i++) {
        mygrid.cellByIndex(i, 1).setValue(k);
      }

      changePageBtnStatus();
    }

    function loadData(data, callback) {
      if (data) {
        loadingId = showLoading();
        parseData(data);
        closeLoading();
        return;
      }

      if (callback) {
        loadDataCallback = callback;
      }

      var _this = this;

      loadingId = showLoading();
      if (opts.url == null || opts.url == "") return;
      var pp = opts.params; ////console.log(pp);	

      if (opts.page) {
        if (_typeof(pp) == "object") {
          pp[opts.pageNum] = pageNum;
          pp[opts.pageSize] = pageSize;
        } else {
          var ppobj = JSON.parse(pp);
          ppobj[opts.pageNum] = pageNum;
          ppobj[opts.pageSize] = pageSize;
          pp = JSON.stringify(ppobj);
        }
      }

      Prolog.ajax({
        url: opts.url,
        type: opts.type,
        data: pp,
        contentType: opts.contentType,
        success: function success(da) {
          parseData(da);
          closeLoading();

          if (loadDataCallback) {
            loadDataCallback(true);
          }
        },
        error: function error() {
          closeLoading();
          if (loadDataCallback) loadDataCallback(false);
        }
      });
    }

    function converData(data) {
      var gridrows = new Array();
      var colArray = opts.columns;
      var v;

      for (var i = 0; i < data.length; i++) {
        var rd = data[i];
        var row = new Array();

        if (opts.multiselect) {
          row.push(rownum);
          row.push(0);
        } else {
          row.push(rownum);
        }

        rownum = rownum + 1;

        for (var j = 0; j < colArray.length; j++) {
          var col = colArray[j].id;

          if (colArray[j].render) {
            v = colArray[j].render(rd[col], rd);
            if (v) row.push(v);else row.push(rd[col]);
          } else row.push(rd[col]);
        }

        gridrows.push({
          id: rd[colArray[0].id],
          data: row,
          userdata: {
            data: rd
          }
        });
      }

      return {
        rows: gridrows
      };
    }

    function reload(data, callback) {
      mygrid.clearAll();
      loadData(data, callback);
    }

    function parseData(da) {
      if (_typeof(da) != "object") da = JSON.parse(da);

      if (da.success != null && da.success == false) {
        closeLoading();
        PlgDialog.msg(da.message);
        return;
      }

      if (!da.data || da.data == "") {
        PlgDialog.msg("数据为空");
        return;
      }

      var ldata;

      if (!da.data.list) {
        ldata = da.data;
      } else {
        ldata = da.data.list;
      }

      rownum = (pageNum - 1) * pageSize + 1;

      try {
        mygrid.parse(converData(ldata), "json");
        changePageBtnStatus();
        resetSize();
      } catch (ex) {
        PlgDialog.msg("数据错误！");
        return;
      }

      if (opts.page) {
        createPageBar(pageBarId, da.data[opts.totalCount], pageNum);
      } //清空全选框


      if (opts.multiselect) {
        var ch = $("#" + panelId + " .plg-grid-second-col");
        var cstr = ch.attr("src");
        ch.attr("src", cstr.replaceAll("chk1", "chk0"));
      }
    }

    this.getElement = function () {
      return panel;
    };

    this.renderTo = function (id) {
      renderTo(id);
      return this;
    };

    this.getGrid = function (id) {
      return mygrid;
    };

    this.loadData = function (data, callback) {
      loadData(data, callback);
    };

    this.getParams = function () {
      return opts.params;
    };

    this.setParams = function (params) {
      opts.params = params;
      pageSize = params.pageSize ? params.pageSize : pageSize;
      pageNum = params.pageNum ? params.pageNum : pageNum;
    };

    this.reload = function (data) {
      reload(data);
    }; // 勾选的状态


    this.getCheckedIds = function () {
      return mygrid.getCheckedRows(1);
    }; // 此处是选中之后背景色变化调用的这个方法


    this.getSelectedRowId = function () {
      return mygrid.getSelectedRowId();
    };

    this.getSelectedRowData = function (name) {
      var rid = mygrid.getSelectedRowId();
      if (!name) return mygrid.getUserData(rid, "data");else {
        return mygrid.getUserData(rid, "data")[name];
      }
    };

    this.getRowData = function (rowId, fields) {
      if (fields == null || fields.length == 0) return mygrid.getUserData(rowId, "data");else if (Array.isArray(fields)) {
        var data = {};

        for (var i = 0; i < fields.length; i++) {
          data[fields[i]] = mygrid.getUserData(rowId, "data")[fields[i]];
        }

        return data;
      } else {
        return mygrid.getUserData(rowId, "data")[fields];
      }
    };

    this.getSelectedCellIndex = function () {
      return mygrid.getSelectedCellIndex();
    };

    this.getRowId = function (rowIndex) {
      return mygrid.getRowId(rowIndex);
    };

    this.getRowIndex = function (rowId) {
      return mygrid.getRowIndex(rowId);
    };

    this.getCellObject = function (rowId, colIndex) {
      return mygrid.cells(rowId, colIndex);
    };

    this.getCellValue = function (rowId, colIndex) {
      return mygrid.cells(rowId, colIndex).getValue();
    };

    this.getCellObject2 = function (rowIndex, colIndex) {
      return mygrid.cells2(rowIndex, colIndex);
    };

    this.getCellValue2 = function (rowIndex, colIndex) {
      return mygrid.cells2(rowIndex, colIndex).getValue();
    };
    /**
     * 设置单元格值
     */


    this.setCellValue = function (rowId, colIndex, value) {
      var cell = mygrid.cells(rowId, colIndex);
      cell.setValue(value);
      var cname = columnArray[colIndex];
      var data = mygrid.getUserData(rowId, "data");

      if (data == null || data == "") {
        data = {};
      }

      data[cname] = value;
      mygrid.setUserData(rowId, "data", data);
    };
    /**
     * row_data为json对象
     */


    this.addRow = function (rowId, row_data) {
      var rdarray = [];
      rdarray.push(mygrid.getRowsNum() + 1);
      var start = 1;

      if (opts.multiselect) {
        rdarray.push(0);
        start = 2;
      }

      for (var i = start; i < columnArray.length; i++) {
        var t = row_data[columnArray[i]];
        rdarray.push(t ? t : "");
      }

      mygrid.addRow(rowId, rdarray.toString());
      mygrid.setUserData(rowId, "data", row_data);
    };

    this.getColumnsNum = function () {
      return mygrid.getColumnsNum();
    };

    this.getGridForm = function () {
      return gridForm;
    };

    this.getToolBarForm = function () {
      return toolBarForm;
    };

    this.setColWidth = function (colIndex, width) {
      mygrid.setColWidth(colIndex, width.toString());
    };

    this.setColumnColor = function (array) {
      mygrid.setColumnColor(array.toString());
    };

    this.setColumnHidden = function (colIndex, isHidden) {
      mygrid.setColumnHidden(colIndex, isHidden);
    };

    this.setRowHidden = function (rowId, isHidden) {
      mygrid.setRowHidden(colIndex, isHidden);
    };

    this.selectRowById = function (rowId) {
      mygrid.selectRowById(rowId);
    };

    this.resetSize = resetSize;

    this.on = function (eventName, callback) {
      if (eventName == "beforeDialogOpen") {
        beforeDialogOpenEvent = callback;
      } else if (eventName == "afterDialogOpen") {
        afterDialogOpenEvent = callback;
      } else if (eventName == "onAfterSorting") {
        mygrid.attachEvent(eventName, function (index, type, direction) {
          resetSize();
          callback(index, type, direction);
        });
      } else if (eventName == "onResizeEnd") {
        mygrid.attachEvent(eventName, function (obj) {
          resetSize();
          callback(obj);
        });
      } else if (eventName == "onCheck") {
        mygrid.attachEvent(eventName, function (rId, cInd, state) {
          if (cInd == 1 && opts.multiselect) {
            changePageBtnStatus();
          }

          callback(rId, cInd, state);
        });
      } else mygrid.attachEvent(eventName, callback);
    };

    this.attachEvent = this.on;

    this.attachToolBarEvent = function (eventName, callback) {
      toolBarForm.on(eventName, callback);
    };

    this.splitAt = function (colIndex) {
      mygrid.splitAt(colIndex);

      for (var i = 0; i < hidenArray.length; i++) {
        if (hidenArray[i]) mygrid.setColumnHidden(i, true);
      }
    };

    var loadingEl;

    var showLoading = function showLoading() {
      loadingEl = PlgDialog.load(1, {
        anim: 5,
        shade: [0.6, '#fff'],
        success: function success(layero, index) {
          $("#layui-layer" + index).appendTo("#" + gridId + " .objbox");
          $("#layui-layer-shade" + index).appendTo("#" + gridId + " .objbox");
        }
      });
    };

    var closeLoading = function closeLoading() {
      PlgDialog.close(loadingEl);
    };

    this.showLoading = showLoading;
    this.closeLoading = closeLoading;
    var colsSettinIndex;

    function showColsSettingDialog(selector) {
      var html = '<div class="layui-form plg-clsset-form" >';
      var k = opts.multiselect ? 2 : 1;

      for (var i = k; i < columnArray.length; i++) {
        html += '<div class=" layui-form-item plg-clsset-item"><input type="checkbox"  lay-filter="plgclssetitem" index=' + i + ' name="' + columnArray[i] + '" lay-skin="primary" title="' + headerArray[i] + '" ' + (hidenArray[i] ? '' : 'checked') + '></div>';
      }

      html += '<div style="clear:both;margin:0px;height:1px;">&nbsp;</div>';
      html += '</div>'; //mygrid.setColumnHidden(i+2,true);

      colsSettinIndex = PlgDialog.tips(html, selector, {
        tips: [3, '#fff'],
        time: 0,
        shade: 0.001,
        shadeClose: true,
        success: function success() {
          layui.form.render("checkbox");
          layui.form.on('checkbox(plgclssetitem)', function (data) {
            var ind = $(data.elem).attr("index");

            if (data.elem.checked) {
              mygrid.setColumnHidden(ind, false);
              hidenArray[ind] = false;
            } else {
              mygrid.setColumnHidden(ind, true);
              hidenArray[ind] = true;
            }
          });
        }
      });
    } //this.show


    if (opts.renderer && opts.renderer != "") {
      renderTo(opts.renderer);
    }
  }; //columns:[{id:"",name:"",type:'',sort:'',align:'',width:'',hidden:false,default:"",renderer:}]


  window.PlgGrid = plgGrid;
})(jQuery);
"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

;

(function ($) {
  $.fn.initPlgCard = function (options) {
    var pg = new PlgCard(options);
    var id = $(this).attr("id");
    pg.renderTo(id);
    return pg;
  };

  var PlgCard = function PlgCard(options) {
    var _factory;

    if (!options || !options.renderer) return;
    /**
     * htmlFragment  html代码片段
     * config 默认的配置文件
     */

    var htmlFragment, config;
    config = {}; // config = Object.assign(config, options.config);

    config = $.extend({}, config, options.config);
    var factory = (_factory = {
      _style: config.style,
      _data: config.data || '',
      _strTitle: function _strTitle() {
        return '<div class="plg-card-components"> \
                  <div class="plg-card-header-container">\
                  <fieldset><legend>';
      },
      _strHead: function _strHead() {
        return '<div class="plg-card-group">';
      },
      _strTitleHead: function _strTitleHead() {
        return '</legend></fieldset></div><div class="plg-card-group">';
      },
      _strFooter: function _strFooter() {
        return '</div>';
      }
    }, _defineProperty(_factory, "_strFooter", function _strFooter() {
      return '</div></div>';
    }), _defineProperty(_factory, "generateOneTemplate", function generateOneTemplate(data) {
      var self = this,
          temFragment = '';
      data.forEach(function (val) {
        temFragment += "\n                <div class=\"plg-card\">\n                  <div class=\"plg-card-body\">\n                    <div class=\"plg-card-no\">".concat(val.cardNo, "</div>\n                    <div class=\"plg-card-main\">").concat(val.cardName, "</div>\n                   </div>\n  \n                   <ul class=\"plg-card-btn-group\">\n              ");
        var temBtns = '';
        val.btn.forEach(function (value) {
          temBtns += "\n                <li>".concat(value.text, "</li>\n              ");
        });
        temFragment += temBtns;
        temFragment += "\n                </ul>\n              </div>\n            ";
      });
      return temFragment;
    }), _defineProperty(_factory, "oneTemplate", function oneTemplate() {
      var self = this,
          temFragment = '';

      self._data.forEach(function (val) {
        temFragment += "\n                <div class=\"plg-card\">\n                  <div class=\"plg-card-body\">\n                    <div class=\"plg-card-no\">".concat(val.cardNo, "</div>\n                    <div class=\"plg-card-main\">").concat(val.cardName, "</div>\n                   </div>\n  \n                   <ul class=\"plg-card-btn-group\">\n              ");
        var temBtns = '';
        val.btn.forEach(function (value) {
          temBtns += "\n                <li>".concat(value.text, "</li>\n              ");
        });
        temFragment += temBtns;
        temFragment += "\n                </ul>\n              </div>\n            ";
      });

      return self._strHead() + temFragment + self._strFooter();
    }), _defineProperty(_factory, "twoTemplate", function twoTemplate() {
      // return 'twoTemplate';
      var self = this,
          temFragment = '';

      self._data.forEach(function (val) {
        temFragment += "\n                <div class=\"plg-card\">\n                  <div class=\"plg-card-body primary\">\n                    ".concat(val.cardName, "\n                   </div>\n  \n                   <ul class=\"plg-card-btn-group\">\n              ");
        var temBtns = '';
        val.btn.forEach(function (value) {
          temBtns += "\n                <li>".concat(value.text, "</li>\n              ");
        });
        temFragment += temBtns;
        temFragment += "\n                </ul>\n              </div>\n            ";
      });

      return self._strHead() + temFragment + self._strFooter();
    }), _defineProperty(_factory, "threeTemplate", function threeTemplate() {
      // return 'threeTemplate';
      var self = this,
          temFragment = '';

      self._data.forEach(function (val) {
        temFragment += "\n                <div class=\"plg-card\">\n                  <div class=\"plg-card-body primary\">\n                    ".concat(val.cardName, "\n                   </div>\n  \n                   <ul class=\"plg-card-btn-group\">\n              ");
        var temBtns = '';
        val.btn.forEach(function (value) {
          temBtns += "\n                <li>".concat(value.text, "</li>\n              ");
        });
        temFragment += temBtns;
        temFragment += "\n                </ul>\n              </div>\n            ";
      });

      return self._strHead() + temFragment + self._strFooter();
    }), _defineProperty(_factory, "addTemplate", function addTemplate() {
      return "<div class=\"plg-card plg-add\">\n                  <div class=\"layui-icon layui-icon-add-1 \"></div>\n                </div>";
    }), _defineProperty(_factory, "oneTitleTemplate", function oneTitleTemplate() {
      var self = this,
          temFragment = '';

      self._data.forEach(function (val) {
        temFragment += "<div class=\"plg-card-components\"><div class=\"plg-card-header-container\">\n                <fieldset><legend>\n                ".concat(val.title, "\n                <legend><fieldset></div>");
        temFragment += self._strHead();
        temFragment += self.generateOneTemplate(val.dataList);
        temFragment += self._strFooter();
        temFragment += "</div>";
      });

      return temFragment;
    }), _defineProperty(_factory, "oneTitleAddTemplate", function oneTitleAddTemplate() {
      var self = this,
          temFragment = '';

      if (!self._data || self._data.length < 1) {
        return false;
      }

      self._data.forEach(function (val) {
        temFragment += "<div class=\"plg-card-components\"><div class=\"plg-card-header-container\">\n                <fieldset><legend>\n                ".concat(val.title, "\n                <legend><fieldset></div>");
        temFragment += self._strHead();
        temFragment += self.generateOneTemplate(val.dataList);
        temFragment += self.addTemplate();
        temFragment += self._strFooter();
        temFragment += "</div>";
      });

      return temFragment;
    }), _defineProperty(_factory, "getHtmlFragment", function getHtmlFragment() {
      var self = this;
      var attrName = self._style + 'Template';
      return self[attrName] ? self[attrName]() : new Error('不存在这个方法');
    }), _factory); // //console.log(factory.getHtmlFragment());

    this.on = function (eventname, callback) {
      var ROUTINE_OPERATION = ['one', 'two', 'three'],
          COMPLEX_OPERATION = ['oneTitle', 'twoTitle', 'threeTitle', 'oneTitleAdd', 'twoTitleAdd', 'threeTitleAdd']; // 此处多了一个oneTitle类型

      if (config && config.style !== 'add' && eventname && eventname == 'click') {
        if (ROUTINE_OPERATION.includes(config.style)) {
          $('#' + options.renderer).on('click', 'li', function (e) {
            var temIndex = $(this).closest(".plg-card").index();
            var cardNo = config.data[temIndex].cardNo;
            var call_back_fn = config.data[temIndex].btn[$(this).index()].fn;
            callback && callback(cardNo, call_back_fn);
          });
        }

        if (COMPLEX_OPERATION.includes(config.style)) {
          $('#' + options.renderer).off('click').on('click', 'li', function (e) {
            var groupIndex = $(this).closest(".plg-card-components").index(),
                temIndex = $(this).closest(".plg-card").index(),
                currentData = config.data[groupIndex].dataList[temIndex],
                cardNo,
                call_back_fn;
            cardNo = currentData.cardNo;
            call_back_fn = currentData.btn[$(this).index()].fn;
            var title = config.data[groupIndex].title;

            if (title) {
              callback && callback(cardNo, call_back_fn, title);
            } else {
              callback && callback(cardNo, call_back_fn);
            }
          });
          $('#' + options.renderer).on('click', '.plg-add', function (e) {
            var groupIndex = $(this).closest(".plg-card-components").index();
            var title = config.data[groupIndex].title; // 需要获取当前的title

            if (title) {
              callback && callback(undefined, undefined, title);
            } else {
              callback && callback(undefined, undefined);
            }
          });
        }
      }

      if (config && config.style === 'add' && eventname && eventname == 'click') {
        $('#' + options.renderer).on('click', '.plg-card', function (e) {
          callback && callback();
        });
      }
    };

    this.renderTo = function (id) {
      $('#' + id).append(factory.getHtmlFragment());
    };

    if (options.renderer) {
      this.renderTo(options.renderer);
    }
  };

  window.PlgCard = PlgCard;
})(jQuery);
"use strict";

;

(function ($) {
  $.fn.initPlgCardList = function (options) {
    var pg = new PlgCardList(options);
    var id = $(this).attr("id");
    pg.renderTo(id);
    return pg;
  };

  var PlgCardList = function PlgCardList(options) {
    if (!options) {
      return false;
    }

    ;
    /**
     * htmlFragment  html代码片段
     * config 默认的配置文件
     */

    var htmlFragment, config;
    config = {
      isShowAdd: true // 默认显示

    };
    config = Object.assign({}, config, options.data);
    var factory = {
      _data: config || '',
      _strTitle: function _strTitle() {
        var self = this;
        var temStr = '';
        temStr += "<div class=\"plg-zone-container\">\n        <div class=\"plg-zone-header\">\n          <div class=\"plg-title\"><i class=\"layui-icon layui-icon-location\"></i>\n          ".concat(self._data.zoneName, "</div>");

        if (self._data.isShowAdd) {
          temStr += "<div class=\"plg-add\">\n            <button class=\"layui-btn layui-btn-normal\" data-zoneid=".concat(self._data.zoneId, " name=\"plg-add\">\n              <i class=\"layui-icon\">&#xe654;</i>\n              \u6DFB\u52A0\n            </button>\n          </div>");
        }

        temStr += "</div>\n          <div class=\"plg-customer-list\">\n          <ul class=\"layui-row\">";
        return temStr;
      },
      _strCellStart: function _strCellStart() {
        return "<li class=\"layui-col-lg3 layui-col-md4 layui-col-sm6 \n        layui-col-xs12\">\n        <div class=\"plg-cell\">";
      },
      _strCellHead: function _strCellHead(head) {
        return "<div class=\"plg-customer-name\">\n          <i class=\"plg-badge-dot\"></i>".concat(head, "\n        </div>");
      },
      _strCellBody: function _strCellBody(des) {
        return "<div class=\"plg-customer-des\">".concat(des, "</div>");
      },
      _strCellFooter: function _strCellFooter(obj) {
        // console.log(obj);
        // debugger;
        var temFragment = '';
        temFragment += "<div class=\"plg-customer-other\">\n          <div class=\"plg-cutomer-no\">\u7F16\u53F7:<span>".concat(obj.useNo, "</span></div>");
        var operatFnLength = Object.keys(obj.btns).length;
        var temStr = '';

        if (operatFnLength > 0) {
          temStr += "<div class=\"plg-cutomer-operating\" data-id=".concat(obj.id, ">");
          var item;

          for (item in obj.btns) {
            temStr += "<span class=\"plg-".concat(item, "\">").concat(obj.btns[item], "</span>");
          }

          temStr += "</div>";
        } else {
          console.error('用户配置的操作为空');
        }

        temFragment += temStr;
        temFragment += '</div>';
        return temFragment;
      },
      _strCellEnd: function _strCellEnd() {
        return "</div>\n        </li>";
      },
      _strFooter: function _strFooter() {
        return "</ul>\n          </div>\n        </div>";
      },
      // 向外暴露出最后的模版样式
      getHtmlFragment: function getHtmlFragment() {
        var self = this;
        var temFragment = '';

        if (self._data.customerList && self._data.customerList.length > 0) {
          self._data.customerList.map(function (val) {
            var temObj = {
              id: val.id,
              useNo: val.useNo,
              btns: val.btns
            };
            temFragment += self._strCellStart();
            temFragment += self._strCellHead(val.name);
            temFragment += self._strCellBody(val.description);
            temFragment += self._strCellFooter(temObj);
            temFragment += self._strCellEnd();
          });
        }

        return $(self._strTitle() + temFragment + self._strFooter());
      }
    };

    PlgCardList.prototype.cuson = function () {}; // 当eventName为add的时候，index 是一个function，callback为空


    this.on = function (eventname, callback) {
      var self = this;

      if (eventname === 'add') {
        self.event.find('.plg-add').eq(0).on('click', function () {
          var currentId = $(this).find('.layui-btn').eq(0).data('zoneid');
          callback && callback(currentId);
        });
        return;
      } else {
        if (self.event.find('.plg-' + eventname).length) {
          self.event.find('.plg-' + eventname).on('click', function () {
            var currentId = $(this).closest('.plg-cutomer-operating').data('id');
            callback && callback(currentId);
          });
        } else {
          console.error('绑定的事件不存在::' + eventname);
        }
      }
    };

    this.renderTo = function (id) {
      this.event = factory.getHtmlFragment();
      $('#' + id).append(this.event);
    };

    if (options.renderer) {
      this.renderTo(options.renderer);
    }
  };

  window.PlgCardList = PlgCardList;
})(jQuery);
"use strict";

;

(function ($, layui) {
  //PlgTabs.js
  layui.use(["laydate"], function () {
    var plgDate = layui.laydate;
    window.plgDate = plgDate;

    $.fn.plgDateRender = function (options) {
      var config = {
        value: ""
      };

      var _this = this;

      var opts = $.extend(true, config, options);

      if (this.length > 1) {
        $(this).each(function (index, value) {
          opts.elem = this;
          _this.otps = plgDate.render(opts);
        });
      } else {
        opts.elem = this.selector;
        _this.otps = plgDate.render(opts);
      }

      return _this;
    };
  });
})(jQuery, layui);
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// selectTable 对应 type:"selectTable", name:"authNumber2", label:"权限编号:"

/**
 * 多选控件
 * {
 * 	type:"blockSelect",
 * 	disabled:true,
 * 	data:[{text,"",value:""},{text:"",value:""}],
 *  url:'',//默认get方式
 *  params:{},
 *  valueField:"",
 *  textField:"",
 *  requestMethod:"Get",
 * 	className:'layui-col-xs6',
 *  name:"authNumber2",
 *  label:"权限编号:",
 *  listener:function(data){}
 * }
 * 
 */
dhtmlXForm.prototype.items.blockSelect = {
  render: function render(item, data) {
    item._type = "blockSelect";
    item._idd = data.name;
    item._value = "";
    item._eable = true; // 1、渲染div，div_label:标签

    var _self = this;

    var cid = "dhxId_blockSelect_" + Prolog.createRandomId();
    item._cid = cid;
    console.log(data);
    var label = document.createElement("div");
    label.setAttribute("class", "dhxform_label " + data.labelAlign);
    label.innerHTML = '<label for="' + cid + '">' + data.label + '</label>';

    if (data.labelWidth) {
      label.style.width = data.labelWidth + "px";
    }

    item.appendChild(label);
    var control = document.createElement("div");
    control.setAttribute("class", "dhxform_control"); // input

    var selectList = document.createElement("div");
    selectList.setAttribute("class", "plg-form-multiSelect");
    selectList.setAttribute("id", cid);
    selectList.style.width = data.width + "px";
    var ul = document.createElement("ul");
    data.params = data.params == null ? {} : data.params;
    data.requestMethod = data.requestMethod == null ? "GET" : data.requestMethod;
    data.valueField = data.valueField == null ? "value" : data.valueField;
    data.textField = data.textField == null ? "text" : data.textField;

    if (data.url != null && data.url != "") {
      Prolog.ajax({
        url: data.url,
        type: data.requestMethod,
        data: data.params,
        success: function success(da) {
          console.log(da);

          if (da.success) {
            var cdata = da.data.list ? da.data.list : da.data;

            for (var i = 0; i < cdata.length; i++) {
              var li = document.createElement("li");
              li.innerHTML = "<span>" + cdata[i][data.textField] + "</span>";
              li.setAttribute("value", cdata[i][data.valueField]);
              ul.appendChild(li);
            }

            selectList.appendChild(ul);
            control.appendChild(selectList);
            item.appendChild(control);

            if (data.disabled) {
              this.disable(item);
              return this;
            }

            _self.bindClickEvent(item, data);
          }
        }
      });
    } else {
      if (data.data && data.data.length > 0) {
        for (var i = 0; i < data.data.length; i++) {
          var li = document.createElement("li");
          li.innerHTML = "<span>" + data.data[i][data.textField] + "</span>";
          li.setAttribute("value", data.data[i][data.valueField]);
          ul.appendChild(li);
        }
      }

      selectList.appendChild(ul);
      control.appendChild(selectList);
      item.appendChild(control);

      if (data.disabled) {
        this.disable(item);
        return this;
      }

      this.bindClickEvent(item, data);
    }

    if (data.hidden) {
      item.style.display = "none";
    }

    return this;
  },
  bindClickEvent: function bindClickEvent(item, data) {
    var cid = item._cid;
    $("#" + cid).on("click", "li", function () {
      if ($(this).hasClass("disabled")) return;

      if (data.multiSelect == null || data.multiSelect == false) {
        if (!$(this).hasClass("active")) {
          $("#" + cid + " li").removeClass("active");
          $(this).addClass("active");
        } else $(this).removeClass("active");
      } else {
        if (!$(this).hasClass("active")) {
          $(this).addClass("active");
        } else $(this).removeClass("active");
      }

      var values = [];
      var selecteds = $("#" + cid + " .active");

      for (var k = 0; k < selecteds.length; k++) {
        values.push($(selecteds[k]).attr("value"));
      }

      item._value = values.join(",");

      if (data.listener) {
        _callback = data.listener;

        _callback(item._value);
      }
    });
  },
  destruct: function destruct(item) {
    $("#" + item._cid + " li").unbind('click');
    item.innerHTML = "";
  },
  // //sets the value of the 根据name来设置值
  setValue: function setValue(item, value) {
    item._value = value;
    var values = value.split(",");
    values.forEach(function (v) {
      $("#" + item._cid + " li[value=" + v + "]").addClass("active");
    });
  },
  getValue: function getValue(item) {
    return item._value;
  },
  enable: function enable(item) {
    $("#" + item._cid + " li").removeClass("disabled");
    item._eable = true;
  },
  disable: function disable(item) {
    item._eable = false;
    console.log($("#" + item._cid + " li"));
    $("#" + item._cid + " li").addClass("disabled");
  },
  reset: function reset(item) {
    $("#" + item._cid + " li").removeClass("active");
    item._value = "";
  },
  clear: function clear(item) {
    this.reset(item);
  },
  showItem: function showItem(item) {},
  hideItem: function hideItem(item) {
    item.style.display = "none";
  }
};

dhtmlXForm.prototype.clearBlockSelect = function (name) {
  return this.doWithItem(name, "clear");
};

dhtmlXForm.prototype.getFormData_blockSelect = function (name) {
  return this.doWithItem(name, "getValue");
};

dhtmlXForm.prototype.setFormData_blockSelect = function (name, value) {
  return this.doWithItem(name, "setValue", value);
};
/**
 * 下拉表格
 * 
 * 参数配置
 * {
 * 	type:"selectTable",
 * 	disabled:true,
 * 	table: PopupsData,//参考grid配置
 * 	tableWidth:600,
 * 	tableHeight:700,
 * 	className:'layui-col-xs6',
 *  fieldText: "serviceName",
 *  fieldValue: ["serviceName","source"], 
 *  name:"authNumber2",
 *  label:"权限编号:",
 *  placeholder:'请输入权限编号',
 *  listener:function(plgGrid){}
 * }
 * 
 * 值：显示值为逗号分隔字符串，实际值为json数组字符串
 */


dhtmlXForm.prototype.items.selectTable = {
  render: function render(item, data) {
    item._type = "selectTable";
    item._idd = data.name;
    item._value = "";
    item._table = data.table;
    item._active = false; // 1、渲染div，div_label:标签，div_control(div_mainInput:显示输入框,div_hiddenInput:值输入框)
    // 2、div_mainInput onfocus弹出表格

    var _self = this;

    var sgrid; // 渲染的表格

    var cid = "dhxId_selectTable_" + Prolog.createRandomId();
    var label = document.createElement("div");
    label.setAttribute("class", "dhxform_label " + data.labelAlign);
    label.innerHTML = '<label for="' + cid + '">' + data.label + '</label>';

    if (data.labelWidth) {
      label.style.width = data.labelWidth + "px";
    }

    item.appendChild(label);
    var control = document.createElement("div");
    control.setAttribute("class", "dhxform_control"); // input

    var mainInput = document.createElement("input");
    mainInput.setAttribute("type", "text");
    mainInput.setAttribute("class", "dhxform_textarea plg-input");
    mainInput.style.width = data.width + "px";
    mainInput.setAttribute("placeholder", data.placeholder);
    mainInput.setAttribute("readonly", "readonly"); // mainInput.setAttribute("id",cid);

    control.appendChild(mainInput); // hidden

    var hiddenInput = document.createElement("input");
    hiddenInput.setAttribute("type", "hidden");
    hiddenInput.setAttribute("name", data.name);
    control.appendChild(hiddenInput);
    item.appendChild(control);

    if (data.disabled == true) {
      mainInput.setAttribute("disabled", "disabled");
      hiddenInput.setAttribute("disabled", "disabled");
      item._enabled = false;
      return this;
    }

    mainInput.onclick = function (e) {
      var left = Prolog.getLeft(this);
      var top = Prolog.getTop(this) + $(this).parent().height();

      var _width = $(this).width();

      var _height = $(this).height();

      var fieldText = data.fieldText; // 用户在页面上显示的值

      var fieldName = data.fieldValue; // 用户实际传给后台的值

      layerId = 'layer' + Prolog.createRandomId();
      var tableWidth = data.tableWidth ? data.tableWidth : 600;
      var tableHeight = data.tableHeight ? data.tableHeight : 500;

      if (left + _width > document.body.clientWidth) {
        left = document.body.clientWidth - tableWidth - 30;
      } else if (left + tableWidth > document.body.clientWidth) {
        left = left - tableWidth + _width + 10;
      }

      if (top + tableHeight > window.innerHeight) {
        if (top > tableHeight) {
          top - tableHeight - _height;
        }
      }

      layer.open({
        type: 1,
        id: layerId,
        title: false,
        resize: false,
        offset: [top + "px", left + "px"],
        btn: [],
        closeBtn: 0,
        area: [tableWidth + 'px', tableHeight + 'px'],
        shadeClose: true,
        shade: 0.000001,
        content: '<div id="' + cid + '_grid" style="width:100%;height:' + (tableHeight - 30) + 'px;"></div>',
        end: function end() {
          item._active = false;

          if (_typeof(data.listener) == "object" && data.listener.afterClose != null) {
            var _callback = data.listener.afterClose;

            _callback(item._textValue, item._value, sgrid);
          }
        },
        success: function success(layero, index) {
          item._active = true;
          $("#layui-layer" + index + " .layui-layer-btn").hide();
          $("#layui-layer" + index).height($("#layui-layer" + index).height() - 23);
          $("#layui-layer" + index + " .layui-layer-content").css("padding", "0px"); // 默认参数

          sgrid = new PlgGrid(item._table);
          sgrid.renderTo(cid + '_grid');
          $("#layui-layer" + index + " .grid-container-full").css("margin-top", "8px");
          sgrid.loadData(null, function () {
            var rownum = sgrid.getGrid().getRowsNum();

            for (var i = 0; i < rownum; i++) {
              var rid = sgrid.getGrid().getRowId(i);
              var jo = sgrid.getRowData(rid, data.fieldValue);
              var valueArray = item._value != null && item._value != "" ? JSON.parse(item._value) : [];

              if (Prolog.hasJson(valueArray, jo) > -1) {
                if (item._table.multiselect) sgrid.setCellValue(rid, 1, 1);else sgrid.selectRowById(rid);
              }
            }
          });

          if (item._table.multiselect) {
            sgrid.on("onCheck", function (rId, cInd, state) {
              if (cInd == 1) {
                if (state) {
                  setSelectedValue(rId);
                } else {
                  setUnSelectedValue(rId);
                }
              }
            });
            sgrid.on("onHeaderClick", function (ind, obj) {
              if (ind == 1) {
                var ch = $("#" + cid + "_grid" + " .plg-grid-second-col");
                var cstr = ch.attr("src");

                if (cstr.indexOf("chk0") > -1) {
                  var rownum = sgrid.getGrid().getRowsNum();

                  for (var i = 0; i < rownum; i++) {
                    var rid = sgrid.getGrid().getRowId(i);
                    setUnSelectedValue(rid);
                  }
                } else {
                  var ids = sgrid.getCheckedIds();
                  ids.split(',').forEach(function (val) {
                    setSelectedValue(val);
                  });
                }

                return true;
              } else {
                return true;
              }
            });
          } else {
            sgrid.on("onRowSelect", function (rId, cInd) {
              setSelectedValue(rId);
              PlgDialog.close(index);
            });
          }

          if (data.listener) {
            if (typeof data.listener == "function") {
              var _callback = data.listener;

              _callback(sgrid);
            } else if (_typeof(data.listener) == "object" && data.listener.init != null) {
              var _callback2 = data.listener.init;

              _callback2(sgrid);
            }
          }
        }
      });
    }; // 反选


    function setUnSelectedValue(selectId) {
      if (selectId) {
        var jo = sgrid.getRowData(selectId, data.fieldValue);
        var valueArray = item._value != null && item._value != "" ? JSON.parse(item._value) : [];

        if (Prolog.hasJson(valueArray, jo) == -1) {
          return;
        } // 显示值


        var showText = mainInput.getAttribute("value") ? mainInput.getAttribute("value").split(",") : [];
        var textField = data.fieldText;
        var valueFields = data.fieldValue;
        var vData = sgrid.getRowData(selectId, valueFields);
        var index = Prolog.hasJson(valueArray, vData);
        if (index > -1) valueArray.splice(index, 1);
        var tData = sgrid.getRowData(selectId, textField);
        showText.splice(showText.indexOf(tData), 1);
        mainInput.setAttribute("value", showText.toString());
        hiddenInput.setAttribute("value", JSON.stringify(valueArray));
        item._textValue = showText.toString();
        item._value = JSON.stringify(valueArray);

        if (_typeof(data.listener) == "object" && data.listener.afterSelect != null) {
          var _callback = data.listener.afterSelect;

          _callback(false, selectId, sgrid);
        }
      }
    } // 设置选中值


    function setSelectedValue(selectId) {
      if (selectId) {
        var jo = sgrid.getRowData(selectId, data.fieldValue);
        var valueArray = item._value != null && item._value != "" ? JSON.parse(item._value) : [];

        if (Prolog.hasJson(valueArray, jo) > -1) {
          return;
        } // 显示值


        var showText = mainInput.getAttribute("value") ? mainInput.getAttribute("value").split(",") : [];

        if (item._table.multiselect == false) {
          valueArray = [];
          showText = [];
        }

        var textField = data.fieldText;
        var valueFields = data.fieldValue;
        var vData = sgrid.getRowData(selectId, valueFields);
        valueArray.push(vData);
        var tData = sgrid.getRowData(selectId, textField);
        showText.push(tData);
        mainInput.setAttribute("value", showText.toString());
        hiddenInput.setAttribute("value", JSON.stringify(valueArray));
        item._textValue = showText.toString();
        item._value = JSON.stringify(valueArray);

        if (_typeof(data.listener) == "object" && data.listener.afterSelect != null) {
          var _callback = data.listener.afterSelect;

          _callback(true, selectId, sgrid);
        }
      }
    }

    if (data.hidden) {
      item.style.display = "none";
    }

    return this;
  },
  // //destructor
  destruct: function destruct(item) {
    var inputs = item.getElementsByTagName("input");
    inputs[0].onclick = null;
    item.innerHTML = "";
  },
  // //sets the value of the 根据name来设置值
  setValue: function setValue(item, value) {
    var hinput = item.getElementsByTagName("input")[1];
    hinput.setAttribute("value", value);
    item._value = value;
  },
  getValue: function getValue(item) {
    //console.log(item);
    //var hinput = item.getElementsByTagName("input")[1];
    //return hinput.getAttribute("value");
    return item._value;
  },
  enable: function enable(item) {
    var inputs = item.getElementsByTagName("input");
    inputs[0].removeAttribute("disabled");
    inputs[1].removeAttribute("disabled");
  },
  disable: function disable(item) {
    var inputs = item.getElementsByTagName("input");
    inputs[0].setAttribute("disabled", "disabled");
    inputs[1].setAttribute("disabled", "disabled");
  },
  getText: function getText(item) {
    return item._textValue;
  },
  setText: function setText(item, value) {
    item._textValue = value;
    var inputs = item.getElementsByTagName("input");
    inputs[0].setAttribute("value", value);
  },
  reset: function reset(item) {
    var inputs = item.getElementsByTagName("input");
    inputs[0].setAttribute("value", "");
    inputs[1].setAttribute("value", "");
    c = "";
    item._value = "";
  },
  clear: function clear(item) {
    this.reset(item);
  },
  setTableConfig: function setTableConfig(item, data) {
    item._table = data;
  },
  showItem: function showItem(item) {},
  hideItem: function hideItem(item) {
    item.style.display = "none";
  },
  active: function active(item) {
    var inputs = item.getElementsByTagName("input");
    $(inputs[0]).trigger("click");
  },
  isActive: function isActive(item) {
    return item._active;
  },
  setData: function setData(item, txt, value) {
    this.setText(item, txt);
    this.setValue(item, value);
  }
};

dhtmlXForm.prototype.setData = function (name, txt, value) {
  this.doWithItem(name, "setData", txt, value);
};

dhtmlXForm.prototype.active = function (name) {
  this.doWithItem(name, "active");
};

dhtmlXForm.prototype.isActive = function (name) {
  return this.doWithItem(name, "isActive");
};

dhtmlXForm.prototype.getText = function (name) {
  return this.doWithItem(name, "getText");
};

dhtmlXForm.prototype.setText = function (name, value) {
  return this.doWithItem(name, "setText", value);
};

dhtmlXForm.prototype.clearSelectTable = function (name) {
  return this.doWithItem(name, "clear");
};

dhtmlXForm.prototype.setTableConfig = function (name, data) {
  return this.doWithItem(name, "setTableConfig", data);
};

dhtmlXForm.prototype.getFormData_selectTable = function (name) {
  return this.doWithItem(name, "getValue");
};

dhtmlXForm.prototype.setFormData_selectTable = function (name, value) {
  return this.doWithItem(name, "setValue", value);
};

;

(function ($) {
  $.fn.initPlgForm = function (options) {
    var pg = new plgForm(options);
    var id = $(this).attr("id");
    pg.renderTo(id);
    return pg;
  };

  var plgForm = function plgForm(options) {
    var _m_this = this;

    var opts;
    var myForm;
    var formStructure; // dhxform需要的数据

    var hiddenItems = new Array(); // 此处最好不要使用这样的声明方式

    var m_parentId;
    var _default = {
      renderer: null,
      items: []
    };
    opts = $.extend({}, _default, options); // 合并成新对象，则是新的属性列表

    formStructure = opts.items;

    function renderTo(id) {
      m_parentId = id;
      $("#" + id).empty(); // 初始化dhmlxform

      myForm = new dhtmlXForm(id, formStructure);

      for (var i = 0; i < opts.items.length; i++) {
        var item = opts.items[i];
        setPlaceholder(id, item);
        setHiddenItems(item);
        setComboWidth(item);
        setToggleBtn(item);
      }

      $(".plg-toolbar-right").parent().css("float", "right");
      $(".plg-toolbar-left").parent().css("float", "left");
      $("#" + id + " input").addClass("plg-input");
      $("#" + id + " textarea").addClass("plg-input");
      $("#" + id + " select").addClass("plg-input");
      $("#" + id).find(".layui-row").parent().css("width", "100%"); //$("#" + id).addClass("layui-form");
      //setTimeout(function() {
      //	layui.form.render();
      //}, 200);
    }
    /**
     * setComboWidth
     * 
     * @param {*}
     *            item
     */


    function setComboWidth(item) {
      if (item.type == "combo") {
        var dhxCombo = myForm.getCombo(item.name);
        dhxCombo.conf.combo_width = item.width;
        $(dhxCombo.list).appendTo("#" + m_parentId);
        myForm.setItemWidth(item.name, item.width);
      }

      if (item.list && item.list.length > 0) {
        for (var i = 0; i < item.list.length; i++) {
          setComboWidth(item.list[i]);
        }
      }
    }
    /**
     * 渲染显示隐藏按钮
     * 
     * @param item
     * @returns
     */


    function setToggleBtn(item) {
      if (item.type == "button" && item.className && item.className.indexOf("toggle") > -1) {
        _m_this.renderHiddenToggleItem(item.name);
      }

      if (item.list && item.list.length > 0) {
        for (var i = 0; i < item.list.length; i++) {
          setToggleBtn(item.list[i]);
        }
      }
    }
    /**
     * setHiddenItems
     * 
     * @param {*}
     *            item
     */


    function setHiddenItems(item) {
      if (item.hidden && item.name) {
        hiddenItems.push(item.name);
      }

      if (item.list && item.list.length > 0) {
        for (var i = 0; i < item.list.length; i++) {
          setHiddenItems(item.list[i]);
        }
      }
    }
    /**
     * setPlaceholder 设置input中的联系方式
     * 
     * @param {*}
     *            id 当前容器的id
     * @param {*}
     *            item 当前记录
     */


    function setPlaceholder(id, item) {
      if (item && item.placeholder) {
        if (item.type == "input") $("#" + id + " input[name='" + item.name + "']").attr("placeholder", item.placeholder);else if (item.type == "select") $("#" + id + " select[name='" + item.name + "']").attr("placeholder", item.placeholder);else if (item.type == "combo") $("#" + id + " input[name='" + item.name + "']").parent().children("input").attr("placeholder", item.placeholder);
      }

      if (item.list && item.list.length > 0) {
        for (var i = 0; i < item.list.length; i++) {
          setPlaceholder(id, item.list[i]);
        }
      }
    }

    this.loadComboData = function (name, cfg) {
      var item = getOptsByName(name, opts.items);

      if (item == null) {
        PlgDialog.msg("找不到组件");
      } else {
        var myCombo = myForm.getCombo(item.name);
        var myconfig = item.remote ? item.remote : {};
        var opss = myconfig ? myconfig.success : null;

        if (cfg) {
          var myconfig = $.extend(true, item.remote, cfg);
        }

        myCombo.clearAll(false);
        var lind = PlgDialog.load(1);

        var success = function success(da) {
          if (da.success == false) {
            PlgDialog.msg("数据加载失败，" + da.message);
            PlgDialog.close(lind);
            return;
          }

          var obj = null;

          if (da.data.list) {
            obj = da.data.list;
          } else {
            obj = da.data;
          }

          obj = parseComboData(obj, myconfig);
          myCombo.load(obj, function () {
            PlgDialog.close(lind);
          });

          if (opss) {
            opss(da);
          }
        };

        myconfig.error = function () {
          PlgDialog.close(lind);
        };

        myconfig.success = success;
        Prolog.ajax(myconfig);
      }
    };

    function parseComboData(obj, cfg) {
      var data = {
        options: []
      };

      for (var i = 0; i < obj.length; i++) {
        var d = obj[i];
        if (cfg.valueField) d["value"] = d[cfg.valueField];
        if (cfg.textField) d["text"] = d[cfg.textField];
        data.options.push(d);
      }

      return data;
    }

    function getOptsByName(name, array) {
      for (var i = 0; i < array.length; i++) {
        var item = array[i];
        if (item.name == name) return item;

        if (item.list) {
          var re = getOptsByName(name, item.list);
          if (re != null) return re;
        }
      }

      return null;
    }

    this.getFormData = function () {
      return myForm.getFormData();
    };

    this.getDForm = function () {
      return myForm;
    };

    this.getInput = function (name) {
      return myForm.getInput(name);
    };

    this.getItemWidth = function (name) {
      return myForm.getItemWidth(name);
    };

    this.getOptions = function (name) {
      return myForm.getOptions(name);
    };

    this.getSelect = function (name) {
      return myForm.getSelect(name);
    };

    this.getCheckedValue = function (name) {
      return myForm.getCheckedValue(name);
    };

    this.getCombo = function (name) {
      return myForm.getCombo(name);
    };

    this.hideItem = function (name, value) {
      myForm.hideItem(name, value);
    };

    this.showItem = function (name, value) {
      myForm.showItem(name, value);
    }; // 显示所有隐藏字段


    this.showAllHItems = function () {
      for (var i = 0; i < hiddenItems.length; i++) {
        myForm.showItem(hiddenItems[i]);
      }

      hh = false;
    }; // 隐藏所有隐藏字段


    this.hideAllHItems = function () {
      for (var i = 0; i < hiddenItems.length; i++) {
        myForm.hideItem(hiddenItems[i]);
      }

      hh = true;
    }; // 显示隐藏隐藏字段


    var hh = true;

    this.toggleHItems = function () {
      if (hh) {
        this.showAllHItems();
        hh = false;
      } else {
        this.hideAllHItems();
        hh = true;
      }

      return !hh;
    };
    /**
     * 添加展开收缩按钮
     */


    this.addHiddenToggleItem = function (pId, pos, insertAfter) {
      var _this = this;

      myForm.addItem(pId, {
        type: "button",
        name: "plg-more-001",
        value: "展开<i class='layui-icon layui-icon-down'></i>",
        className: "link"
      }, pos, insertAfter);
      myForm.attachEvent("onButtonClick", function (name) {
        if (name == "plg-more-001") {
          if (_this.toggleHItems()) {
            _this.setItemLabel("plg-more-001", "收起<i class='layui-icon layui-icon-up'></i>");
          } else {
            _this.setItemLabel("plg-more-001", "展开<i class='layui-icon layui-icon-down'></i>");
          }
        }
      });
    };

    this.renderHiddenToggleItem = function (name) {
      var _this = this;

      _this.setItemLabel(name, "展开<i class='layui-icon layui-icon-down'></i>");

      myForm.attachEvent("onButtonClick", function (na) {
        if (name == na) {
          if (_this.toggleHItems()) {
            _this.setItemLabel(name, "收起<i class='layui-icon layui-icon-up'></i>");
          } else {
            _this.setItemLabel(name, "展开<i class='layui-icon layui-icon-down'></i>");
          }
        }
      });
    };

    this.disableItem = function (name) {
      myForm.disableItem(name);
    };

    this.disableAllItem = function () {
      myForm.forEachItem(function (name) {
        myForm.disableItem(name);
      });
    };

    this.enableItem = function (name) {
      myForm.enableItem(name);
    };

    this.enableAllItem = function (name) {
      myForm.forEachItem(function (name) {
        myForm.enableItem(name);
      });
    };

    this.clear = function () {
      myForm.clear();
    };

    this.addItem = function (pid, itemData, pos, insertAfter) {
      myForm.addItem(pId, itemData, pos, insertAfter);
    };

    this.removeItem = function (name, value) {
      myForm.removeItem(name, value);
    };

    this.reset = function () {
      myForm.reset();
    };

    this.getItemLabel = function (name, value) {
      if (arguments.length == 2) {
        return myForm.getItemLabel(name, value);
      } else {
        return myForm.getItemLabel(name);
      }
    };

    this.getItemValue = function (name) {
      return myForm.getItemValue(name);
    };

    this.setFormData = function (jsonData) {
      myForm.setFormData(jsonData);
    };

    this.setFormItemData = function (name, value) {
      var item = {};
      item[name] = value;
      myForm.setFormData(item);
    };

    this.setItemFocus = function (name) {
      myForm.setItemFocus(name);
    };

    this.setItemHeight = function (name, height) {
      myForm.setItemHeight(name, height);
    };

    this.setItemWidth = function (name, width) {
      myForm.setItemWidth(name, width);
    };

    this.setItemLabel = function (name, label) {
      myForm.setItemLabel(name, label);
    };

    this.setItemValue = function (name, value) {
      myForm.setItemValue(name, value);
    };

    this.setItemReadonly = function (name, state) {
      myForm.setReadonly(name, state);
    };

    this.setItemRequired = function (name, state) {
      myForm.setRequired(name, state);
    };

    this.setItemValidation = function (name, rule) {
      myForm.setValidation(name, rule);
    };

    this.validateItem = function (name) {
      return myForm.validateItem(name);
    };

    this.validate = function () {
      return myForm.validate();
    };

    this.forEachItem = function (callback) {
      myForm.forEachItem(callback(name));
    };

    this.renderTo = function (id) {
      renderTo(id);
    };

    this.on = function (eventName, callback) {
      myForm.attachEvent(eventName, callback);
    };

    this.attachEvent = this.on;

    this.attachComboEvent = function (name, eventName, callback) {
      myForm.getCombo(name).attachEvent(eventName, callback);
    };

    if (opts.renderer) {
      renderTo(opts.renderer);
    }
  };

  window.PlgForm = plgForm;
})(jQuery);
"use strict";

(function () {
  function PlgIeAlert() {
    var userAgent = navigator.userAgent; //取得浏览器的userAgent字符串  

    /*    Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E) */

    var isIE = userAgent.indexOf("compatible") > -1 && userAgent.indexOf("MSIE") > -1; //判断是否IE<11浏览器  

    var isEdge = userAgent.indexOf("Edge") > -1 && !isIE; //判断是否IE的Edge浏览器  

    var isIE11 = userAgent.indexOf('Trident') > -1 && userAgent.indexOf("rv:11.0") > -1;

    if (isIE || isIE11) {
      var obody = document.getElementsByTagName("body")[0];
      obody.innerHTML = IEhtml();
      return false;
    } else if (isEdge) {
      return; //edge
    } else {
        return; //不是ie浏览器
      }
  }

  function IEhtml() {
    return ['<div class="ieReg"><div class="banler"><div class="ie_content"><div class="topbar"><i class="ie_img"></i><span style="color:#cc6600">尊敬的用户：</span>您当前浏览器版本过低，本站功能可能无法正常浏览，请使用或下载以下几种推荐浏览器已达到最佳效果。</div><ul class="bro_list"><li><i class="chrome"></i><p>谷歌浏览器</p></li><li><i class="fires"></i><p>火狐浏览器</p></li><li><i class="Safari"></i><p>Safari苹果浏览器</p></li><li><i class="Edge"></i><p>Microsoft Edge</p></li></ul></div></div><div class="ie_content n_2"></div></div>'].join("");
    ;
  }

  window.onload = function () {
    PlgIeAlert();
  };
})();
"use strict";

(function ($, layui) {
  $.fn.initPlgInputTags = function (options) {
    var pg = new plgInputTags(options);
    var id = $(this).attr("id");
    pg.renderTo(id);
    return pg;
  };

  var plgInputTags = function plgInputTags(params) {
    var self = this;
    var classMain = {
      checkboxName: '',
      layFilter: '',
      data: null,
      dom: null,
      tagsId: 'tags-' + Prolog.createRandomId(),
      meunPanelThis: null,
      setDefaultValue: function setDefaultValue(data) {
        if (!(data && data.length > 0)) {
          console.error('用户传递进来的数据不是数组');
          return false;
        }

        data.map(function (val) {
          if (!val.hasOwnProperty('checked')) {
            val.checked = false;
          }
        });
        this.data = data;
      },
      wrapTemplate: function wrapTemplate() {
        var self = this;
        var temTemplate = '';
        temTemplate += "<div class=\"layui-form-item\">\n        <label class=\"layui-form-label\">\u539F\u59CB\u590D\u9009\u6846</label>\n        <div class=\"layui-input-block\">";
        self.data.forEach(function (val) {
          temTemplate += "<input type=\"checkbox\" \n          name=\"".concat(self.checkboxName, "[").concat(val.alias, "]\" \n          lay-skin=\"primary\" lay-filter=\"").concat(self.layFilter, "\" \n          title=\"").concat(val.text, "\" ").concat(val.checked ? 'checked=""' : '', " />\n          <div class=\"layui-unselect layui-form-checkbox ").concat(val.checked ? 'layui-form-checked' : '', "\" \n          lay-skin=\"primary\"><span>").concat(val.text, "</span>\n          <i class=\"layui-icon layui-icon-ok\"></i></div>\n          ");
        });
        temTemplate += "</div>\n          </div>\n          <div class=\"layui-form-item\">\n          <label class=\"layui-form-label\">\u5DF2\u7ECF\u9009\u4E2D</label>\n          <div class=\"layui-input-block tags\" id=\"".concat(self.tagsId, "\"></div>\n          </div>\n        ");
        return temTemplate;
      } // 设置默认值, checked, 默认false
      // var data = params.data;

    };

    if (!params.checkboxName || !params.layFilter) {
      console.error('请设置checkout的名字,该名字将会是您获取form名称的key');
      return false;
    }

    classMain.checkboxName = params.checkboxName; // classMain.layFilter = params.layFilter;

    classMain.setDefaultValue(params.data);
    this.tagsId = classMain.tagsId;
    this.layFilter = classMain.layFilter = params.layFilter || 'plg-' + Prolog.createRandomId();
    this.wrapTamplate = $(classMain.wrapTemplate());

    if (params.renderer) {
      self.renderTo(params.renderer);
    }
  };

  plgInputTags.prototype.renderTo = function (targetId) {
    var self = this;
    var $targetId = $('#' + targetId);
    var $tagsId = $targetId.find("#" + self.tagsId);
    $targetId.append(self.wrapTamplate);
    var form = layui.form;
    form.render();
    var tagList = []; // 用户标签列表

    var inputTags = {
      init: function init() {
        var temObj = {};
        var checkboxList = $targetId.find(".layui-form-checked");

        if (checkboxList.length) {
          temObj = {
            value: checkboxList.siblings("input").attr("title"),
            name: checkboxList.siblings("input").attr("name")
          };
        }

        if (JSON.stringify(temObj) !== "{}") {
          tagList.push(temObj);
          tagList.forEach(function (v) {
            inputTags.add(v);
          });
        }
      },
      add: function add(temObj) {
        var temTempalte = "<span>\n          <em name=\"".concat(temObj.name, "\">").concat(temObj.value, "</em>\n          <button type=\"button\" class=\"close\">\xD7</button>\n        </span>");
        $('#' + self.tagsId).append(temTempalte);
        var temInputHidden = "<input type=\"hidden\" name=\"".concat(temObj.name, "\" \n          value=\"").concat(temObj.value, "\"/>");
        $targetId.after(temInputHidden);

        if (tagList.indexOf(temObj) === -1) {
          tagList.push(temObj);
        }
      },
      del: function del(temObj) {
        // console.log('del temObj before');
        // console.log(tagList);
        // console.log('del temObj before');
        // console.log('del tagList event');
        // console.log(temObj);
        // console.log('del temObj event');
        // 从tagList删除temObj
        if (tagList && tagList.length > 0) {
          tagList.forEach(function (val, ind) {
            if (val.name === temObj.name) {
              tagList.splice(ind, 1);
            }
          });
        } // 操作完成之后就启动重新渲染
        // 2. 删除tags中的标签  TODO:: 此做法有点对DOM的重新渲染影响比较大
        // $('#inputTags').find('name='+ temObj.name).parent('span').remove();


        $("#" + self.tagsId).empty();
        var temTempalte = "";

        if (tagList && tagList.length > 0) {
          tagList.forEach(function (val, ind) {
            temTempalte += "<span><em name=\"".concat(val.name, "\">").concat(val.value, "</em><button type=\"button\" class=\"close\">\xD7</button></span>");
          });
        }

        $("#" + self.tagsId).append(temTempalte); // 3. 删除input hidden中的标签节点

        $("#" + self.targetId).find('input[name="' + temObj.name + '"]').remove();
      }
    };
    inputTags.init();
    form.on("checkbox(" + self.layFilter + ")", function (data) {
      var isChecked = data.elem.checked;
      var jqueryElem = $(data.elem);
      var temObj = {
        value: jqueryElem.attr("title"),
        name: jqueryElem.attr("name")
      };

      if (isChecked) {
        inputTags.add(temObj);
      }

      if (!isChecked) {
        inputTags.del(temObj);
      } // <span><em>标题一</em><button type="button" class="close">×</button></span>

    });
    $targetId.find("#" + self.tagsId).on("click", ".close", function (e) {
      var temJqueryObj = $(this).siblings("em");
      var temObj = {
        value: temJqueryObj.html(),
        name: temJqueryObj.attr("name")
      };
      inputTags.del(temObj); // 1. 清空checkbox 中选中的，修改状态。重新触发被删除的tags

      var checkedList = self.wrapTamplate.find(".layui-form-checkbox"); // 将类数组转化为数组

      checkedList = Array.prototype.slice.call(checkedList);

      if (checkedList && checkedList.length > 0) {
        checkedList.forEach(function (val, ind) {
          var temHtml = $($(val).find("span")[0]).html();

          if (temObj.value === temHtml) {
            self.wrapTamplate.find('.layui-form-checkbox').eq(ind).trigger("click");
          }
        });
      }
    });
  };

  window.PlgInputTags = plgInputTags;
})(jQuery, layui);
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * hdw
 * 2019.01.28
 * 面板组件
 */
;

(function ($, layui) {
  //PlgPanel.js
  layui.use(["element"], function () {
    function template() {
      var salf = this;
      var skinOBJ = {
        0: "",
        1: "skin_1",
        2: "skin_2"
      };
      if (!skinOBJ[salf.skin]) salf.skin = 0;
      var html = "<div class=\"layui-card PlgPanel ".concat(skinOBJ[salf.skin], " ").concat(salf.className ? salf.className : "", "\" ").concat(salf.id ? "id=".concat(salf.id) : "", "  ").concat(salf.style ? "style=\"".concat(salf.style, "\"") : "", ">\n                       ").concat(salf.header.isShow ? "<div class=\"layui-card-header\">                \n                            <div class=\"title io\">".concat(salf.header.title, "</div>\n                            ").concat(salf.header.moreBtn && salf.header.moreBtn.length > 0 ? "<div class=\"more_group\">\n                                ".concat(salf.header.moreBtn.map(function (item) {
        return "<a class=\"layui-btn layui-btn-sm layui-btn-normal ".concat(item.className ? "".concat(item.className) : "", "\" href=\"javascript:;\"> ").concat(item.icon ? "<i class=\"".concat(item.icon, "\"></i>") : "").concat(item.name, "</a>");
      }), "\n                         </div>") : "", "       \n                        </div>\n                       ") : "", "\n                        <div class=\"layui-card-body\">\n              \n                        </div>\n                    </div>");
      return $(html);
    }

    ;

    function PanelForm() {
      var salf = this;
      if (!salf.defaultBody) return;
      var data = salf.defaultBody,
          html = null;

      if (data.layoutCol < 0 || data.layoutCol > 12) {
        console.error("layoutCol:不能小于0或不能大于12");
      }

      function inputBlock(item, valueBj) {
        if (!item.type) item.type = "text";

        switch (item.type) {
          case "text":
            if (!item.value) {
              item.value = "<span style='color:#c3c3c3'>暂无数据</span>";
            }

            return "<div class=\"text-info ".concat(valueBj ? "bj" : "", "\">").concat(item.value, "</div>");

          case "input":
            if (!item.value) item.value = "";
            return "<input type=\"text\" placeholder=\"\u8BF7\u8F93\u5165\u4FE1\u606F\"\n                        autocomplete=\"off\" class=\"layui-input\" value=\"".concat(item.value, "\">");
        }
      }

      if (data.cols) {
        html = "<form class=\"layui-form cl\" style=\"padding:5px\" lay-filter=\"\">   \n                            ".concat(data.cols.map(function (arr) {
          return "<div class=\"layui-row layui-col-space10\">\n                                    ".concat(arr.map(function (item) {
            return "<div class=\"layui-col-md".concat(item.layoutCol || data.layoutCol, " ").concat(item.offset ? "layui-col-md-offset".concat(item.offset) : "", "\">\n                                            <div class=\"layui-form-item\">\n                                            <label class=\"layui-form-label\">").concat(item.label, "\uFF1A</label>       \n                                            <div class=\"layui-input-block\">\n                                                        ").concat(inputBlock(item, data.valueBj), "\n                                                </div>\n                                            </div>                               \n                                        </div>");
          }).join(""), " \n                        \n                            </div>");
        }).join(""), "\n\n                        </form>");
      } else {
        return;
      }

      return $(html);
    }

    function plgPanel(ele, options) {
      var _this = this;

      _this.id = "PlgPanel" + new Date().valueOf(); //选择器

      var ele, opt; //获取数据入口

      if (arguments.length === 1) {
        opt = arguments[0];

        if (_typeof(opt) === "object") {
          var config = {
            renderer: "",
            className: "",
            style: "",
            skin: 0,
            title: "",
            moreBtn: null,
            empyt: true,
            header: {
              isShow: true,
              title: "",
              moreBtn: null
            },
            defaultBody: null
          };
          Object.assign(_this, config, opt);
          _this.getElement = template.call(_this); //判断是否有defaultBody配置           

          if (_this.defaultBody != null && _this.defaultBody.cols && _this.defaultBody.cols.length > 0) {
            _this.appendPanelBody(PanelForm.call(_this));
          }

          _this.renderTo(_this.renderer);
        }
      } else if (arguments.length === 2) {
        ele = arguments[0];
        opt = arguments[1];

        if (_typeof(opt) === "object") {
          _this.opts = $.extend(true, config, opt);
          _this.getElement = template(_this.opts);

          _this.renderTo(ele);
        }
      }
    }

    ;

    plgPanel.prototype.renderTo = function (ele) {
      if (this.empyt) {
        $("#" + ele).empty();
      }

      $("#" + ele).append(this.getElement);
      return this;
    };

    plgPanel.prototype.appendPanelBody = function (ElementObjcet) {
      var isEmpty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var ele = this.getElement.find(".layui-card-body");

      if (isEmpty) {
        ele.empty();
      }

      console.dir(Object.prototype.toString.call(ElementObjcet));
      console.dir(ElementObjcet[0].nodeType === 1);
      console.dir(typeof ElementObjcet[0].nodeName === 'string'); // console.dir(typeof ElementObjcet )

      console.dir(ElementObjcet[0] instanceof HTMLElement);
      console.dir(ElementObjcet instanceof jQuery);
      console.dir("defaultBody:" + Object.prototype.toString.call(this.defaultBody));
      console.dir("defaultBody:" + Array.isArray(this.defaultBody));
      console.dir(this.defaultBody instanceof HTMLElement);
      ele.append(ElementObjcet);
      return this;
    };

    window.PlgPanel = plgPanel;
    /*         $.fn.PlgPanel = function (options) {
                return new plgPanel(this, options);
             };
     */
  });
})(jQuery, layui);
"use strict";

;

(function ($, layui) {
  $.fn.PlgSelectPlusTags = function (options) {
    return new plgSelectPlusTags(options);
  };

  var temp = function temp() {
    return "<div class=\"layui-input-block plg-select-tags\"></div>";
  };

  var plgSelectPlusTags = function plgSelectPlusTags(options) {
    this.render(options);
  };

  plgSelectPlusTags.prototype.render = function (options) {
    $('#' + options.renderer).after(temp());
    options.el = '#' + options.renderer;
    delete options.renderer;
    return layui.selectPlus.render(options);
  };

  window.PlgSelectPlusTags = plgSelectPlusTags;
})(jQuery, layui);
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

;

(function ($) {
  //var mainpanel;
  //var opts;
  var element = layui.element,
      win = window,
      doc = document;

  function loading() {
    var index = layer.load(2, {
      shade: [0.6, '#fff'] //0.1透明度的白色背景

    });
    return function () {
      layer.close(index);
    };
  }

  var plgSidebar = function plgSidebar(ele, options) {
    var _this = this;

    var ClassMain = {
      dom: null,
      documentPanel: null,
      meunPanelThis: null,
      template: function template(meunPanelThis) {
        var _getData = this.meunPanelThis.getData.parentData;

        if (!_getData) {
          _getData = [];
          console.error("没有数据");
        }

        var renderNav = this.mainNav(_getData);
        var opts = this.opes;
        var tml = $("<div class=\"plg-sidebar\">\n                  \n    <div class=\"main-nav\">\n        <div id=\"meunSoroll\" class=\"layui-side-scroll\">\n\n                <div class=\"plg-logo\" >\n                <a class=\"logo-path ".concat(opts.logo == 'plg' && 'plg-logo', "\" ></a>\n                \n                <i id=\"plg-logo-fold\" class=\"anticon layui-icon layui-icon-shrink-right\"></i>\n                \n                </div>    \n            <!-- \u5DE6\u4FA7\u5BFC\u822A\u533A\u57DF\uFF08\u53EF\u914D\u5408layui\u5DF2\u6709\u7684\u5782\u76F4\u5BFC\u822A\uFF09 -->\n            <div class=\"pr-open\" data-type=\"hoot-click\">\n                <div class=\"layui-layer-setwin\">\n                    <a class=\"layui-icon layui-icon-close\" href=\"javascript:;\"></a>\n                </div>\n                <div class=\"pr-search\">\n                       <span class=\"pr-icon-search-wrapper\"><i class=\"layui-icon layui-icon-search\n\"></i></span>\n\n                    <input type=\"text\" id=\"selectInput\" class=\"pr-search-input\" placeholder=\"\u8BF7\u8F93\u5165\u5173\u952E\u8BCD\">\n\n                    <div class=\"search-tip\">\n                        <p><span>\u4EE5\u4E0B\u662F\u4E0E\u201C<strong></strong>\u201D\u76F8\u5173\u7684\u4EA7\u54C1\uFF1A</span></p></div>\n\n                </div>\n                <div class=\"pr-left\">\n                    <div id=\"keyUpList\" class=\"keyUpList\"></div>\n                    <div class=\"pr-meungroup-list\">\n                    </div>\n                </div>\n                <div class=\"pr-right\">\n                    <div class=\"scroll-nav\">\n                        <ul class=\"right-sidebar\">\n\n                        </ul>\n                    </div>\n                </div>\n            </div>\n            <div class=\"product-all\" data-type=\"hoot-click\">\n                          <span class=\"icon-box\">\n                                 <i class=\"icon iconfont p-icon-all\"></i>\n                          </span>\n                <span class=\"meun-name\">\n                             <a class=\"\" href=\"javascript:;\">\u6240\u6709\u670D\u52A1</a>\n                             <i class=\"right-mover layui-icon layui-icon-right\n\"></i>\n                         </span>\n            </div>\n            <div class=\"nav-last\" data-type=\"hoot-click\">\n                <ul id=\"sidebar\" class=\"sidebar\">\n                    ").concat(renderNav, "\n                </ul>\n                <div class=\"nav-hover-child\" >\n                <!-- \u4E8C\u7EA7\u83DC\u5355 -->\n                <div class=\"layui-side\">\n                        <!--<div class=\"nav-title\"></div>-->\n                        <ul class=\"body-nav\" lay-filter=\"test\"></ul>\n                \n                     </div>\n                 </div>\n\n            </div>\n\n        </div>\n    </div>\n   \n</div>\n"));
        return tml;
      },
      mainNav: function mainNav(parentData) {
        var _this = this;

        var ele = ""; // !item.leaf

        if (!parentData[0]) {
          parentData[0] = [];
          console.error("数据加载失败");
        }

        parentData[0].filter(function (item) {
          if (item.parentMenuId === "0") {
            // language=HTML
            ele += "\n                        <li class=\"s-item\" id=".concat(item.id, " menu-id=").concat(item.menuId, ">\n                               <span class=\"icon-box\">\n                                 <i class=\"").concat(item.imagePath, "\"></i>\n                             </span>\n                              <span class=\"meun-name\"><a href=\"").concat(!item.leaf ? "javascript:;" : item.path, "\">").concat(item.name, "</a></span>\n                         </li>                    \n                            \n                      ");
          }
        });
        return ele;
      },
      resetOpenMenuList: function resetOpenMenuList(ele, data) {
        var _this = this;

        var group = $("<div class=\"pr-meun-group\"></div><div class=\"pr-meun-group\"></div><div class=\"pr-meun-group\"></div>"); //插入右边的导航

        $(_this.documentPanel[0]).find(".right-sidebar").html("").append(_this.mainNav(data));
        data[0].forEach(function (item, inxex) {
          var ele = "<div class=\"list-item\" id=".concat(item.menuId, "><a href=\"").concat(!item.leaf ? 'javascript:;' : item.path, "\" menu-id=").concat(item.menuId, " parentmenuid=").concat(item.parentMenuId, " class=\"list-title\">").concat(item.name, "</a>");
          data[item.menuId] && data[item.menuId].forEach(function (citem) {
            ele += "<div class=\"menu-text\">\n                                            <a href=".concat(citem.path || "javascript:;", "\n                                             menu-id=").concat(citem.menuId, "\n                                             parentmenuid=").concat(citem.parentMenuId, "\n                                             leaf=").concat(citem.leaf, "                                     \n                                             >\n                                             ").concat(citem.name, "\n                                            </a>\n                        </div>");

            if (data[citem.menuId]) {
              data[citem.menuId].forEach(function (ditem) {
                ele += "<div class=\"menu-text\">\n                                                 <a href=".concat(ditem.path || "javascript:;", " \n                                                  menu-id=").concat(ditem.menuId, " \n                                                  parentmenuid=").concat(ditem.parentMenuId, "\n                                                  leaf=").concat(ditem.leaf, ">\n                                                    ").concat(ditem.name, "\n                                                    </a>\n                                                 </div>");
              });
            }
          });
          ele += "</div>";

          if (inxex % 3 === 0) {
            group.eq(0).append(ele);
          } else if (inxex % 3 === 1) {
            group.eq(1).append(ele);
          } else if (inxex % 3 === 2) {
            group.eq(2).append(ele);
          }
        });
        group.find(".menu-text>a[leaf='false']").hide();
        ele.append(group);
      },
      setOpenAll: function setOpenAll(getData) {
        var _this = this;

        var list = _this.dom.meungroupList,
            parentDatas = getData.parentData;
        var keyUpList = $(_this.documentPanel[0]).find("#keyUpList");

        _this.resetOpenMenuList(list, parentDatas);

        var regCH = new RegExp("[\\u4E00-\\u9FFF]+", "g");
        $(_this.documentPanel[0]).find("#selectInput").keyup(function (e) {
          var val = $(this).val();
          val = val.toUpperCase();

          if (!val) {
            // list.html("");
            $(this).next(".search-tip").hide();
            list.show();
            keyUpList.html("").hide();
            return; //输入框中没有内容，则退出
          }

          $(this).next(".search-tip").show().find("strong").text(val);
          list.hide();
          var ele = "";

          for (var key in getData.mapAll) {
            var item = getData.mapAll[key];
            var str = regCH.test(val) ? item.name.indexOf(val) : item.PY_code.indexOf(val);

            if (str >= 0 && item.leaf) {
              ele += "<div class=\"pr-meun-group\">\n                                    <div class=\"list-item\">\n                                        <div class=\"menu-text\">\n                                            <a href=".concat(item.path || "javascript:;", " >\n                                             ").concat(item.name, "\n                                            </a>\n                                         </div>\n                                         </div>\n                                    </div>");
            }
          }

          list.hide();
          keyUpList.html("").show().append(ele);
        });
      },
      //获取菜单top值
      meunTopObj: function meunTopObj(obj) {
        var _this = this;

        var list = _this.dom.meungroupList.find(".list-item");

        obj = {};
        list.each(function (index, item) {
          var key = item.id;
          obj[key] = parseInt(item.offsetTop);
        });
        return obj;
      },
      removerShowList: function removerShowList() {
        var _this = this,
            list = _this.dom.meungroupList,
            _getData = _this.meunPanelThis.getData,
            parentDatas = _getData.parentData;

        _this.dom && this.dom.meunSoroll.removeClass("showList");
      },
      clickChild: function clickChild(callbakc) {
        var _this = this;

        var othis;
        var bodyNav = _this.dom.bodyNav; //ul

        var _getData = _this.meunPanelThis.getData; //点击二级菜单列表

        _this.dom.bodyNav.on("click", "a", function (e) {
          e.stopPropagation(); //阻止事件冒泡

          e.preventDefault();
          othis = $(this); //a

          var mid = othis.attr("menu-id");

          _this.dom.meungroupList.find("a[menu-id='" + mid + "']").trigger("click");
        }); //点击给展开所以菜单列表


        _this.dom.meungroupList.on("click", "a", function (e) {
          e.stopPropagation(); //阻止事件冒泡x

          e.preventDefault();
          othis = $(this);
          var mid = $(this).attr("menu-id");
          var bodyNav_this = bodyNav.find("a[menu-id='" + mid + "']"),
              //parents = $this.parents(".body-nav"),
          bodyNav_parent = bodyNav_this.parent(),
              //li
          bodyNav_child = bodyNav_this.siblings('.nav-child'),
              callbakcData = {
            getCurrent: _getData.mapAll[mid]
          };
          var pid = othis.parents(".list-item").attr("id"),
              leaf = _getData.mapAll[mid].leaf,
              href = othis.attr("href"); //右边的导航

          othis.parents(".pr-open").find(".right-sidebar .s-item[menu-id=" + pid + "] a").trigger("click");

          _this.updateChildMeun(pid, mid);

          if (leaf) {
            _this.dom.meunSoroll.find(".nav-last").attr("data-show", "");

            _this.removerShowList();
          }

          callbakc && callbakc(callbakcData, e);
        });
      },
      EventHanlder: function EventHanlder() {
        var _this = this;

        $(document).on("click", function () {
          _this.dom.meunSoroll.hasClass("showList") && _this.removerShowList();
        }); //控制菜单展开收缩

        _this.dom.documentPanel.find("#plg-logo-fold").click(function (event) {
          if ($(this).hasClass("layui-icon-shrink-right")) {
            $(this).removeClass("layui-icon-shrink-right").addClass("layui-icon-spread-left");
            $("body").addClass("plg-open-hover");
          } else {
            $(this).removeClass("layui-icon-spread-left").addClass("layui-icon-shrink-right");
            $("body").removeClass("plg-open-hover");
          }
        });

        _this.dom.meunSoroll.find(".nav-last").hover(function (event) {
          _this.removerShowList();

          if (_this.dom.bodyNav.find("li").length > 0) {
            $(this).attr("data-show", "show-child");
          }

          return;
        }, function () {
          $(this).attr("data-show", "");
        });

        _this.dom.meunSoroll.on("click", "[data-type='hoot-click']", function (e) {
          e.stopPropagation(); //阻止事件冒泡

          e.preventDefault();
          var eve = e.target;

          switch ($(this).attr("class")) {
            case "product-all":
              _this.dom.meunSoroll.toggleClass("showList");

              break;

            case "pr-open":
              if ($(eve).parents(".pr-left").length > 0 || eve.nodeName != "A") return;

              if (eve.parentNode.className == "layui-layer-setwin") {
                _this.removerShowList();

                return;
              }

              var meunTop = _this.meunTopObj();

              var sItem = $(eve).parents(".s-item");
              var thisHref = sItem.attr("menu-id"),
                  list = $(".pr-meungroup-list").find(".list-item");
              sItem.addClass("active").siblings().removeClass("active");
              list.each(function () {
                $(this)[0].id == thisHref ? $(this).addClass("select") : $(this).removeClass("select");
              });

              for (var key in meunTop) {
                if (key == thisHref) {
                  $(".pr-left").animate({
                    scrollTop: meunTop[key]
                  });
                }
              }

              break;

            case "nav-last":
              //点一级菜单加载二级菜单
              var parents = $(eve).parents(".s-item"),
                  menuid = parents.attr("menu-id");
              if (!menuid) return;
              var leaf = Boolean(_this.meunPanelThis.getData.mapAll[menuid].leaf);

              _this.dom.meunSoroll.find(".nav-last").attr("data-show", "");

              _this.removerShowList();

              if ($(eve).parents("#sidebar").length > 0) {
                _this.dom.meungroupList.find("a[menu-id='" + menuid + "']").trigger("click");
              }

              if (leaf) {
                return;
              }

              ;
              setTimeout(function () {
                _this.dom.meunSoroll.find(".nav-last").attr("data-show", "show-child");
              }, 200);
              break;

            default:
              return false;
          }
        });

        var tabArray = [];
      },
      updateChildMeun: function updateChildMeun(pid, mid) {
        var _this = this,
            pid = pid,
            parNav = $("[menu-id=" + pid + "]");

        parNav.addClass("active").siblings().removeClass("active");
        var _getData = _this.meunPanelThis.getData;

        _this.dom.bodyNav.empty();

        if (pid) {
          if (_getData.mapAll[pid].leaf && _getData.mapAll[mid].parentMenuId == 0) {
            return;
          }

          var parentData = _getData.parentData;
          parentData[pid] && parentData[pid].forEach(function (item) {
            var oliClass = "item h-link";

            if (mid) {
              if (item.menuId == mid) {
                oliClass = "item h-link active-this itemeds";
              }
            }

            ;
            var oli = $("<li>", {
              "class": oliClass
            });
            var oa = $("<a>", {
              "href": item.path || "javascript:;",
              "menu-id": item.menuId,
              "leaf": item.leaf,
              "level": item.level,
              "id": item.id,
              "parentMenuId": item.parentMenuId
            }).text(item.name);
            oli.append(oa);

            if (!item.leaf && parentData[item.parentMenuId] && parentData[item.parentMenuId].length > 0) {
              var navchild = '<dl class="nav-child">';
              parentData[item.menuId] && parentData[item.menuId].forEach(function (citem) {
                navchild += "<dd class= ".concat(mid && citem.menuId == mid ? "active-this" : "", " ><a href=").concat(citem.path || "javascript:;", " leaf=").concat(citem.leaf, " \nmain-id=").concat(item.parentMenuId, " parentMenuId=").concat(citem.parentMenuId, " menu-id=").concat(citem.menuId, ">").concat(citem.name, "</a></dd>");
              });
              navchild += "</dl>";
              oa.append("<i class=\"right-mover layui-icon layui-icon-right\"></i>");
              oli.append(navchild);

              if (mid) {
                oli.find("dd").each(function (index, item) {
                  if ($(item).attr("class") == "active-this") {
                    oli.addClass("active-this").addClass("itemeds");
                    return oli.find(".nav-child").show();
                  }
                });
              }
            }

            _this.dom.bodyNav.append(oli);
          });
        }

        ;
      },
      initPanel: function initPanel(meunPanelThis, opes) {
        var _this = this;

        _this.meunPanelThis = meunPanelThis;
        var _getData = _this.meunPanelThis.getData;
        _this.opes = opes;
        _this.documentPanel = _this.template(_this);
        if (_this.documentPanel) _this.dom = {
          documentPanel: _this.documentPanel,
          meunSoroll: _this.documentPanel.find("#meunSoroll"),
          bodyNav: _this.documentPanel.find(".body-nav"),
          meungroupList: _this.documentPanel.find(".pr-meungroup-list"),
          prLeft: _this.documentPanel.find(".pr-left"),
          $tabli: $(".layui-tab-title li"),
          $nav_hover_child: _this.documentPanel.find(".nav-hover-child")
        };

        _this.setOpenAll(_getData); //事件注册


        _this.EventHanlder();

        return _this.documentPanel;
      }
    };

    var getFun = function getFun() {
      return ClassMain;
    };

    _this.getFun = getFun();
    var config = {
      url: null,
      route: false,
      menuClick: null //获取数据入口

    };

    if (arguments.length == 1) {
      _this.options = arguments[0];
      _this.options = $.extend(true, config, _this.options);

      _this.init(_this.options);
    } else if (arguments.length == 2) {
      _this.ele = arguments[0];
      _this.options = arguments[1];
      _this.options = $.extend(true, config, _this.options);

      _this.init(_this.options);

      _this.renderTo(_this.ele);
    }
  };

  plgSidebar.prototype.config = {
    isTrigger: false,
    url: "",
    logo: null
  };

  plgSidebar.prototype.setMapData = function (url) {
    var closeLoad = loading();
    var dataAll,
        mapAll = null,
        parentData = null;

    function mapdata(dataAll) {
      /*  layer.load(0, {
           shade: true
       }); */
      var map = {};
      dataAll.forEach(function (item) {
        var parent = "";

        if (!map[item.parentMenuId]) {
          map[item.parentMenuId] = [];
        }

        map[item.parentMenuId].push(item);
      });
      return map;
    }

    var mapAll = {}; //    var token = window.localStorage.getItem("token");

    Prolog.syncAjax({
      type: 'get',
      url: url,

      /*     beforeSend: function (request) {
              if (token != null) {
                  request.setRequestHeader("Authorization", token);
              }
          }, */
      success: function success(res) {
        if (res.success) {
          dataAll = res.data;
          dataAll.forEach(function (item) {
            item.PY_code = pinyin.makePy(item.name)[0];
          });
          parentData = mapdata(dataAll);
          dataAll.forEach(function (item) {
            mapAll[item.menuId] = item;
          });
        }
      },
      error: function error(err) {
        //  closeLoad()
        //console.log(err)
        layer.msg("数据加载失败!");
      },
      dataType: 'json'
    });
    closeLoad();
    return {
      dataAll: dataAll,
      mapAll: mapAll,
      parentData: parentData
    };
  };
  /*    var closeLoad= loading();
  
     setTimeout(function(){
         closeLoad()
       //  layer.close(closeLoad)
     },2000) */


  plgSidebar.prototype.init = function (options) {
    var _this = this;

    var _class = this.getFun;

    if (_typeof(_this.options) === "object") {
      _this.opts = $.extend(true, _this.config, _this.options);

      if (_this.opts.url != "") {
        _this.getData = _this.setMapData(_this.opts.url);
        _this.getElement = _class.initPanel(_this, _this.opts);

        if (typeof _this.opts.menuClick === 'function') {
          _class.clickChild(_this.opts.menuClick);
        } else {
          _class.clickChild();
        }
      }
    }

    return this;
  }; //熏染模板到节点


  plgSidebar.prototype.renderTo = function (domId) {
    var documentPanel = this.getFun.documentPanel;
    $("#" + domId).append(documentPanel);

    if (this.opts.isTrigger) {
      var menuid = $("#" + domId).find(".sidebar li:first-child").addClass("active").attr("menu-id");
      this.getFun.updateChildMeun(menuid);
    }

    return this;
  };

  window.PlgSideAccordion = plgSidebar;

  $.fn.initPlgSideAccordion = function (options) {
    /*  var closeLoad= loading(); */
    return new plgSidebar(this, options);
  };
})(jQuery);
"use strict";

;

(function ($) {
  var element = layui.element,
      win = window,
      doc = document;

  function filterData(pid, Data) {
    return Object.values(Data).filter(function (item) {
      return item.parentMenuId == pid;
    });
  }

  function mapResetOpenMenuList(mapData) {
    var index = 0;
    var group = $("<div class=\"pr-meun-group\"></div><div class=\"pr-meun-group\"></div><div class=\"pr-meun-group\"></div>");
    var treeData = filterData("0", mapData); //递归

    var recursive = function recursive(pid) {
      var str = "";
      var child = filterData(pid, mapData);
      child.forEach(function (ditem) {
        str += "<div class=\"menu-text\" py-code=".concat(ditem.PY_code, ">\n                  <a href=").concat(ditem.hash ? "#" + ditem.hash : "javascript:;", "\n                   parentmenu-id=").concat(ditem.parentMenuId, "\n                   menu-id=").concat(ditem.menuId, "\n                   leaf=").concat(ditem.leaf, ">\n                   ").concat(ditem.name, "</a>\n                 </div>");
        if (!ditem.leaf) str += recursive(ditem.menuId);
      });
      return str;
    };

    for (var key in treeData) {
      var ele = "<div class=\"list-item ".concat(treeData[key].isActive ? "select" : '', "\" id=").concat(treeData[key].menuId, ">\n                    <a menu-id=").concat(treeData[key].menuId, " parentmenu-id=").concat(treeData[key].parentMenuId, " class=\"list-title\">\n                      ").concat(treeData[key].name, "</a>"); //遍历二级菜单

      ele += recursive(treeData[key].menuId);
      ele += "</div>";

      if (index % 3 === 0) {
        group.eq(0).append(ele);
      } else if (index % 3 === 1) {
        group.eq(1).append(ele);
      } else if (index % 3 === 2) {
        group.eq(2).append(ele);
      }

      index++;
    }

    $(group).find(".menu-text>a[leaf='false']").hide();
    return $(group);
  } //渲染一级菜单
  //渲染二级和三级菜单


  function mapUpdateChildrenNan(id, mapData, dom) {
    //  vipspa.indexId=id;
    var parent = mapData[mapData[id].parentMenuId];

    if (parent) {
      if (parent.parentMenuId !== "0") {
        parent = mapData[parent.parentMenuId];
      }
    } else {
      parent = mapData[id];
    }

    function tree(pid) {
      var data = [];
      Object.values(mapData).forEach(function (item) {
        if (pid == item.parentMenuId) {
          data.push(item);

          if (!item.leaf) {
            return item.children = tree(item.menuId);
          }
        }
      });
      return data;
    }

    parent.children = tree(parent.menuId);
    var treeData = parent;
    var sidebarLi = "<ul class=\"body-nav\" parentmenu-id=".concat(parent.menuId, " name=").concat(parent.name, ">");
    treeData = treeData.children;

    for (var key in treeData) {
      sidebarLi += "<li class=\"item h-link ".concat(treeData[key].isActive ? "active-this" : '', " ").concat(treeData[key].isActive && treeData[key].children ? "itemeds" : '', "\">\n            <a href=\"").concat(treeData[key].blank ? treeData[key].path : treeData[key].hash ? "#" + treeData[key].hash : "javascript:;", "\"  ").concat(treeData[key].blank ? "target=_blank" : "", " menu-id=").concat(treeData[key].menuId, " leaf=\"").concat(treeData[key].leaf, "\" level=\"").concat(treeData[key].level, "\">").concat(treeData[key].name, "\n            ").concat(treeData[key].children && !treeData[key].leaf ? "<i class=\"right-mover layui-icon layui-icon-right\"></i>" : '', " \n            </a>\n            ").concat(treeData[key].children && !treeData[key].leaf ? "<dl class=\"nav-child\" parentmenu-id=".concat(treeData[key].menuId, ">            \n                        ").concat(treeData[key].children.map(function (childItem, index, arr) {
        return "<dd ".concat(childItem.isActive ? "class=\"active-this\"" : '', ">\n                            <a href=").concat(childItem.blank ? childItem.path : childItem.hash ? "#" + childItem.hash : "javascript:;", "\n                            ").concat(childItem.blank ? "target=_blank" : "", " leaf=").concat(childItem.leaf, " menu-id=").concat(childItem.menuId, "  level=").concat(childItem.level, ">").concat(childItem.name, "</a></dd>");
      }).join(""), "          \n                  </dl>") : '', " \n            </li>");
    }

    sidebarLi += "</ul>";
    dom && dom.bodyNav.html(sidebarLi);
    return sidebarLi;
  } //摸版
  //渲染一级菜单


  function mapUpdateMainNav(mapData) {
    var sidebarLi = "";
    Object.values(mapData).filter(function (item) {
      if (item.parentMenuId == "0") {
        sidebarLi += "<li class=\"s-item ".concat(item.isActive ? "active" : '', "\">\n                <span class=\"icon-box\"><i class=\"").concat(item.imagePath, "\"></i></span>\n                <span class=\"meun-name\"><a href=\"").concat(item.leaf ? "#" + item.hash : "javascript:;", "\"  menu-id=").concat(item.menuId, ">").concat(item.name, "</a></span>\n                </li>");
      } else {
        return;
      }
    });
    return sidebarLi;
  }

  function TemplateMap(mapData, opts) {
    if (!mapData) {
      mapData = [];
    } //一级菜单


    var sidebarLi = mapUpdateMainNav(mapData); //打开全部的菜单

    var group = mapResetOpenMenuList(mapData); //   console.log(vipspa.indexId)

    var tpl = $("<div class=\"plg-sidebar\">                          \n            <div class=\"main-nav\">\n                <div id=\"meunSoroll\" class=\"layui-side-scroll\">\n                        <div class=\"plg-logo\" >\n                        <a class=\"logo-path ".concat(opts.logo == 'plg' && 'plg-logo', "\" ></a>            \n                        <i id=\"plg-logo-fold\" class=\"anticon layui-icon layui-icon-shrink-right\"></i>          \n                        </div>    \n                    <!-- \u5DE6\u4FA7\u6253\u5F00\u5168\u90E8\u5BFC\u822A\u533A\u57DF -->\n                    <div class=\"pr-open\" data-type=\"hoot-click\">\n                        <div class=\"layui-layer-setwin\">\n                            <a class=\"layui-icon layui-icon-close\" href=\"javascript:;\"></a>\n                        </div>\n                        <div class=\"pr-search\">\n                            <span class=\"pr-icon-search-wrapper\"><i class=\"layui-icon layui-icon-search\n            \"></i></span>\n\n                            <input type=\"text\" id=\"selectInput\" class=\"pr-search-input\" placeholder=\"\u8BF7\u8F93\u5165\u5173\u952E\u8BCD\">\n                            <div class=\"search-tip\">\n                                <p><span>\u4EE5\u4E0B\u662F\u4E0E\u201C<strong></strong>\u201D\u76F8\u5173\u7684\u4EA7\u54C1\uFF1A</span></p></div>\n\n                        </div>\n                        <div class=\"pr-left\">\n                            <div id=\"keyUpList\" class=\"keyUpList\"></div>\n                            <div class=\"pr-meungroup-list\">\n                                <!-- \u5168\u90E8\u83DC\u5355\u5217\u8868--->\n                         \n                                \n                            </div>\n                        </div>\n                        <div class=\"pr-right\">\n                            <div class=\"scroll-nav\">\n                                <ul class=\"right-sidebar\">\n                                     ").concat(sidebarLi, "\n\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"product-all\" data-type=\"hoot-click\">\n                                <span class=\"icon-box\">\n                                        <i class=\"icon iconfont p-icon-all\"></i>\n                                </span>\n                        <span class=\"meun-name\">\n                                    <a  href=\"javascript:;\">\u6240\u6709\u670D\u52A1</a>\n                                    <i class=\"right-mover layui-icon layui-icon-right\n            \"></i>\n                                </span>\n                    </div>\n                    <div class=\"nav-last\" data-show=\"\">\n                        <ul id=\"sidebar\" class=\"sidebar\">\n                           <!--\u4E00\u7EA7\u83DC\u5355-->\n                           ").concat(sidebarLi, "\n                        </ul>\n                     <div class=\"nav-hover-child\" >\n                        <!-- \u4E8C\u7EA7\u83DC\u5355 -->\n                        <div class=\"layui-side\">                 \n                        \n                                      <!-- \u5F53\u524Dhover\u4E8C\u7EA7\u83DC\u5355\u5217\u8868--->\n                                      ").concat(vipspa.indexId ? mapUpdateChildrenNan(vipspa.indexId, mapData) : "", "\n                                                                   \n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            </div>\n            ")); //       

    tpl.find(".pr-meungroup-list").append(group);
    return $(tpl);
  }

  var plgSidebar = function plgSidebar(options) {
    var _this = this;

    _this.options = options;
    var config = {
      renderer: null,
      url: null,
      ajaxInit: {
        url: null,
        type: "get",
        dataType: "json"
      },
      logo: "",
      route: false,
      menuClick: null //获取数据入口

    };
    _this.options = $.extend(true, config, _this.options); //获取数据

    var loaddata = LoadData.call(this, _this.options.ajaxInit); //   vipspa.treeData = loaddata.treeData;

    Object.defineProperties(vipspa, {
      mapData: {
        get: function get(val) {
          return loaddata.mapData;
        },
        set: function set(newValue) {
          try {
            vipspa.indexId = vipspa.routerMap[vipspa.parse(location.hash).url].menuId;
          } catch (e) {
            console.error(e);
            console.error("vipspa.router.defaults:hash of error"); // ...
          } finally {
            _this.document = TemplateMap(newValue, _this.options);

            _this.init(_this.document);

            if (_this.options.renderer) {
              _this.renderTo(_this.options.renderer);
            }
          }
        }
      }
    }); // loaddata.treeData[_this.options.index].isActive=true;
    // vipspa.treeData=loaddata.treeData ;
    //   vipspa.mapData=loaddata.mapData;
  }; //事件监听


  function EventHanlder(dom) {
    var _this = this;

    var opts = this.options; //   var treeData= vipspa.treeData;

    var mapData = vipspa.mapData;
    $(document).on("click", function () {
      dom.meunSoroll.hasClass("showList") && removerShowList(dom.meunSoroll);
    }); //控制菜单展开收缩

    dom.logoFold.click(function (event) {
      if ($(this).hasClass("layui-icon-shrink-right")) {
        $(this).removeClass("layui-icon-shrink-right").addClass("layui-icon-spread-left");
        $("body").addClass("plg-open-hover");
      } else {
        $(this).removeClass("layui-icon-spread-left").addClass("layui-icon-shrink-right");
        $("body").removeClass("plg-open-hover");
      }
    }); //控制菜单hover

    dom.navLast.hover(function (event) {
      var id = $(this).find("li.s-item.active a").attr("menu-id");

      if (id && vipspa.mapData[id].leaf) {
        dom.navLast.attr("data-show", "");
        return;
      }

      removerShowList(dom.meunSoroll);
      $(this).attr("data-show", "show-child");
    }, function () {
      $(this).attr("data-show", "");
    }); //打开所有菜单点击事件

    dom.prLeft.on("click", ".menu-text > a", function (event) {
      event.preventDefault();
      location.hash = $(this).attr("href");
      var id = $(this).attr("menu-id");
      var pid = $(this).attr("parentmenu-id");

      function result(pid) {
        var obj = mapData[pid];

        if (obj.parentMenuId !== "0") {
          return result(obj.parentMenuId);
        }

        ;
        mapUpdateChildrenNan(id, mapData, dom);
        var slfe = dom.bodyNav.find("a[menu-id='".concat(id, "']")); // arr.unshift(slfe.text().replace(/[\ \r\n]/g,""));

        if (slfe.parent().is("dd")) {
          //arr.unshift(slfe.parents("dl.nav-child").prev().text().replace(/[\ \r\n]/g,""))
          slfe.parents("li.item ").addClass("itemeds");
          slfe.parents("dl.nav-child").show();
        } //arr.unshift(slfe.parents(".body-nav").attr("name").replace(/[\ \r\n]/g,""))  


        slfe.parent().addClass("active-this").siblings().removeClass("active-this");
        return pid;
      }

      pid = result(pid);
      removerShowList(dom.meunSoroll);
    }); //一级菜单事件

    dom.sidebar.on("click", "li", function (event) {
      var id = $(this).find("a").attr("menu-id");
      var i = $(this).index(); // dom.sidebar.empty().append(updateMainNav(treeData))

      $(this).addClass("active").siblings().removeClass("active");
      opts.index = i;

      if (vipspa.mapData[id].leaf) {
        dom.navLast.attr("data-show", "");
        location.hash = $(this).find("a").attr("href");
        return;
      }

      event.preventDefault();
      dom.navLast.attr("data-show", "");
      mapUpdateChildrenNan(id, mapData, dom);
      setTimeout(function () {
        dom.navLast.attr("data-show", "show-child");
      }, 200);
    }); //点击二级hover菜单事件

    dom.bodyNav.on("click", "li>a", function (event) {
      event.stopPropagation(); //阻止事件冒泡

      var slfe = $(this),
          leaf = slfe.attr("leaf") == "true",
          child = slfe.siblings("dl.nav-child");
      slfe.parent().addClass("active-this").siblings().removeClass("active-this").find('dd').removeClass("active-this").removeClass("itemeds");
      opts.menuClick && opts.menuClick(slfe);

      if (slfe.parent().is("dd")) {
        slfe.parents("li.item").addClass("active-this").siblings().removeClass("active-this").removeClass("itemeds");
      } //如果是二级菜单


      if (!leaf && child.length > 0) {
        slfe.parent().addClass("active-this").siblings().removeClass("active-this").removeClass("itemeds");
        child.slideToggle("fast");
        slfe.parent().toggleClass("itemeds").siblings().children('.nav-child').slideUp();
        return false;
      }

      if ($(this).attr("target") == "_blank") {
        return;
      }

      if ($(this).attr("href") !== "javascript:;") {
        location.hash = $(this).attr("href"); //  vipspa.indexId=slfe.attr("menu-id");
      } else {
        event.preventDefault();
      } //  var arr=[];itemeds

    });
    dom.meunSoroll.on("click", "[data-type='hoot-click']", function (event) {
      event.stopPropagation(); //阻止事件冒泡

      event.preventDefault();
      var eve = event.target;

      switch ($(this).attr("class")) {
        case "product-all":
          //关闭 小X
          dom.meunSoroll.toggleClass("showList");
          break;

        case "pr-open":
          //滚动
          eve.parentNode.className == "layui-layer-setwin" && removerShowList(dom.meunSoroll);
          var meunTop = meunTopObj(dom.meungroupList);
          var sItem = $(eve).parents(".s-item");
          var thisHref = sItem.find("a").attr("menu-id"),
              list = dom.meungroupList.find(".list-item");
          sItem.addClass("active").siblings().removeClass("active");
          list.each(function () {
            $(this)[0].id == thisHref ? $(this).addClass("select") : $(this).removeClass("select");
          });

          for (var key in meunTop) {
            if (key == thisHref) {
              $(".pr-left").animate({
                scrollTop: meunTop[key]
              });
            }
          }

          break;

        default:
          return false;
      }
    });
  } //搜索条事件


  function setOpenKeyup(dom) {
    var regCH = new RegExp("[\\u4E00-\\u9FFF]+", "g");
    var keyUpList = dom.prLeft.find("#keyUpList");
    var list = dom.meungroupList.find(".menu-text");
    dom.meunSoroll.find("#selectInput").keyup(function (e) {
      var tip = $(this).next(".search-tip");
      var val = $(this).val();
      val = val.toUpperCase();

      if (!val) {
        tip.hide();
        dom.meungroupList.show();
        keyUpList.html("").hide();
        return; //输入框中没有内容，则退出
      }

      tip.show().find("strong").text(val);
      dom.meungroupList.hide();
      keyUpList.html("").show();
      list.each(function (i, item) {
        var str = regCH.test(val) ? $(item).find("a").text().indexOf(val) : $(item).attr("py-code").indexOf(val);

        if (str >= 0 && $(item).find("a").attr("leaf") == "true") {
          keyUpList.append("<div class=\"pr-meun-group\"><div class=\"list-item\">".concat(item.outerHTML, "</div></div>"));
        }
      });
    });
  }

  ; //获取菜单top值

  function meunTopObj(meungroupList) {
    var _this = this;

    var list = meungroupList.find(".list-item");
    var obj = {};
    list.each(function (index, item) {
      var key = item.id;
      obj[key] = parseInt(item.offsetTop);
    });
    return obj;
  }

  ;

  function removerShowList(dom, className) {
    if (!className) {
      className = "showList";
    }

    dom.removeClass(className);
  }

  plgSidebar.prototype.init = function (document) {
    var _this = this;

    var $dom = {
      sidebar: document.find("#sidebar"),
      logoFold: document.find("#plg-logo-fold"),
      meunSoroll: document.find("#meunSoroll"),
      navLast: document.find("#meunSoroll .nav-last"),
      bodyNav: document.find(".nav-hover-child .layui-side"),
      meungroupList: document.find(".pr-meungroup-list"),
      prLeft: document.find(".pr-left"),
      nav_hover_child: document.find(".nav-hover-child") //事件注册

    };
    EventHanlder.call(_this, $dom);
    setOpenKeyup($dom);
    return _this;
  }; //熏染模板到节点


  plgSidebar.prototype.renderTo = function (domId) {
    this.options.renderer = domId;
    $("#" + this.options.renderer).empty().append(this.document);
    return this;
  }; //请求数据


  function LoadData(object) {
    var _this = this;

    var routeSetting = {};
    var close = PlgDialog.loading2();
    var treedata;
    object.success = function (response) {
      if (response.success) {
        var resultName = function resultName(mid) {
          var arr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
          var idarr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
          var mapData = treedata.mapData;
          var item = mapData[mid];
          arr.unshift(item.name);
          idarr.unshift(item.menuId);

          if (item.parentMenuId != 0) {
            return resultName(item.parentMenuId, arr, idarr);
          }

          return {
            arr: arr,
            idarr: idarr
          };
        }; //路由配置


        treedata = toTree(response.data);
        response.data.forEach(function (item) {
          if (item.blank) {
            return;
          }

          item.PY_code = pinyin.makePy(item.name)[0]; // item.isActive=false;

          if (item.leaf && item.path) {
            //去首字母
            //如果没有配hash
            if (!item.hash) {
              item.hash = item.path.substr(1).split("/");
              item.hash = item.hash[item.hash.length - 2] + "/" + item.hash[item.hash.length - 1];

              if (item.hash.indexOf("=") != -1) {
                item.hash = item.hash.match("([^=]+)$")[0];
              }
            }

            ;
            var obj = resultName(item.menuId);
            routeSetting[item.hash] = {
              templateUrl: item.iframe ? item.path : item.path + ".html",
              iframe: item.iframe || false,
              controller: item.srcPath ? item.srcPath + ".js" : null,
              name: item.name,
              menuId: item.menuId,
              parent_name: obj.arr,
              stateArr: obj.idarr
            };
            obj = null;
          }
        });
        vipspa.routerMap = routeSetting; //Object.assign( vipspa.routerMap,routeSetting);
      } else {
        layer.msg("数据加载失败!");
      }

      close();
    }, object.error = function (XMLHttpRequest, textStatus, errorThrown) {
      console.error(XMLHttpRequest, textStatus, errorThrown);
      close();
    };
    Prolog.syncAjax(object);
    return treedata;
  }

  ; //返加树型结构对象

  function toTree(data) {
    // 删除 所有 children,以防止多次调用
    data.forEach(function (item) {
      delete item.children;
      delete item.type;
      delete item.queryId;
      delete item.operateType;
      delete item.lastModifyTime;
      delete item.helpCode;
      delete item.creatorName;
      delete item.creatorId;
      delete item.createTime;
      delete item.modifierId;
      delete item.modifierName;
      delete item.sort;
    }); // 将数据存储为 以 menuId 为 KEY 的 map 索引数据列

    var map = {};
    data.forEach(function (item) {
      map[item.menuId] = item;
    });
    return {
      mapData: map
    };
  }

  window.PlgSideAccordionRoute = plgSidebar;

  $.fn.initPlgSideAccordion = function (options) {
    /*  var closeLoad= loading(); */
    return new plgSidebar(this, options);
  };
})(jQuery);
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

;

(function ($, layui) {
  //PlgTabs.js
  layui.use(["element"], function () {
    var element = layui.element;

    var template = function template(opts) {
      var skinArr = {
        normal: "layui-tab",
        brief: "layui-tab layui-tab-brief",
        card: "layui-tab layui-tab-card",
        plgtabs: "layui-tab layui-tab-brief plgtabs "
      };

      var itemlist = function itemlist(content) {
        if (content) {
          var rp = "";
          var ra = "";
          content.forEach(function (item, inxex) {
            rp += "<li lay-id = ".concat(item.id, " class=\"").concat(opts.indexActive === inxex ? "layui-this" : "", "\" >").concat(item.title, "</li>");
            ra += "<div class=\"layui-tab-item  ".concat(opts.indexActive === inxex ? "layui-show" : "", "\" data-fade=\"\">").concat(item.template, "</div>");
          });
          return {
            title: rp,
            content: ra
          };
        } else {
          return "";
        }
      };

      itemlist = itemlist(opts.content);
      var closeBtn = "\n            <ul class=\"plg-tab-close-all\" lay-filter=\"plg-tab-close-all\">\n              <div class=\"plg-tab-close-item\">\n                  <a href=\"javascript:;\" class=\"layui-icon layui-icon-more\"></a>\n                 <dl class=\"child\">\n                  <dd><a href=\"javascript:;\">\u5173\u95ED\u5176\u5B83\u6807\u7B7E\u9875</a></dd>\n                  <dd><a href=\"javascript:;\">\u5173\u95ED\u5F53\u524D\u6807\u7B7E\u9875</a></dd>\n                  <dd><a href=\"javascript:;\">\u5173\u95ED\u6240\u6709\u6807\u7B7E\u9875</a></dd>\n                </dl>   \n                </li>\n            </ul>";
      var tp = "\n                <div class=\"".concat(skinArr[opts.skin], "\" ").concat(opts.allowClose ? "lay-allowClose=\"true\"" : "", " \n                    ").concat(opts.filter ? "lay-filter=\"" + opts.filter + "\"" : "", ">\n                    ").concat(opts.closeAll ? closeBtn : "", "\n                    <ul class=\"layui-tab-title\">\n                    </ul>\n                    <div class=\"layui-tab-content\"></div>\n                </div>");
      return $(tp);
    };

    var plgTabs = function plgTabs(options) {
      var _this = this;

      _this.preIndex = -1;
      var config = {
        time: 100,
        renderer: null,
        filter: "plgTabs-" + Prolog.createRandomId(),
        //选择器
        indexActive: 0,
        closeAll: false,
        //是否显示关闭全部按钮
        skin: "brief",
        fadeIn: false,
        //是否开启滑动切换
        allowClose: false,
        //是否带删除
        content: [
          /* {
                              title:null,
                              template:null,
                              id:"lay-"+ Prolog.createRandomId(),
                              url:null          
                          } */
        ]
      };
      var ele, opt; //获取数据入口

      opt = arguments[0];

      if (_typeof(opt) === "object") {
        _this.opts = $.extend(true, config, opt);
        _this.getElement = template(_this.opts); //显示右边可关闭按钮

        if (_this.opts.closeAll) {
          _this.getElement.find(".plg-tab-close-all").hover(function () {
            $(this).find(".child").show();
          }, function () {
            $(this).find(".child").hide();
          });

          _this.getElement.find(".plg-tab-close-all .child").on('click', "dd", function (e) {
            e.preventDefault();
            var oa = $(this).index();
            var oli = $(this).parents(".plg-tab-close-all").next().children('li');
            oli.each(function (index, item) {
              var $this = $(item);

              if ($this.index() !== 0) {
                if (!$this.hasClass("layui-this")) {
                  if (oa === 0) {
                    _this.deleteTabs($this.attr("lay-id"));
                  }
                } else {
                  if (oa === 1) {
                    _this.deleteTabs($this.attr("lay-id"));
                  }
                }

                if (oa === 2) {
                  _this.deleteTabs($this.attr("lay-id"));
                }
              }
            });
            $(this).parents(".child").hide();
          });
        }
      }

      _this.opts.renderer && _this.renderTo(this.opts.renderer);
    };

    plgTabs.prototype.renderTo = function (ele) {
      $("#" + ele).append(this.getElement);

      var _this = this;

      this.opts.content.forEach(function (item, index) {
        var yes = false;

        if (_this.opts.indexActive === index) {
          yes = true;
        }

        console.log(yes);

        _this.addTabs(item, yes);
      });
      var oli = this.getElement.find(".layui-tab-title > li");
      var layid = oli.eq(_this.opts.indexActive).attr("lay-id");

      _this.changeTabs(layid);

      this.element.render("nav"); //渲染到页面

      this.element.render("tab", this.opts.filter); //计算总宽度得到li的数量

      this.on();
      return this;
    };

    function getNum(titleObj) {
      var count = titleObj.width() - 15;
      var count01 = titleObj.find("li").eq(0).outerWidth();
      var count02 = titleObj.prev() ? titleObj.prev().outerWidth() : 0;
      var liw = 140;
      var liNum = Math.floor(count - count01 - count02) / liw; /// //console.log('count :',Math.floor(liNum) );

      return Math.floor(liNum);
    }

    ;
    var pindex = -1; //动态添加tabss

    plgTabs.prototype.addTabs = function (obj, boole) {
      var closeLoad = PlgDialog.loading2();
      obj.title = "<span class=\"name\">".concat(obj.title, "</span>");

      var _this = this;

      if (!boole) {
        boole = null;
      }

      var isChange = boole; //将上次的选中的下标存下来  

      this.preIndex = this.getElement.find(".layui-tab-title li.layui-this").index();
      var oli = this.getElement.find(".layui-tab-title li"); //获取当前的li数量

      var curLi = Number(oli.length);
      var define = {
        title: "<span class=\"name\">\u65B0\u6807\u9898</span>",
        content: "",
        id: "lay-" + Prolog.createRandomId(),
        iframe: false
      };
      var opts = $.extend(true, define, obj);

      if (opts.url && !opts.iframe) {
        Prolog.ajax({
          type: "get",
          url: opts.url,
          dataType: "html",
          success: reandTpl,
          error: function error(XMLHttpRequest, textStatus, errorThrown) {
            layer.msg("数据请求失败");
            closeLoad();
          }
        });
      } else if (opts.template && !opts.iframe) {
        reandTpl(opts.template);
      } else {
        //iframe为true
        opts.template = "<iframe class=\"plg-iframeClass\" frameborder=\"no\" src=\"".concat(opts.url, "\"></iframe>");
        reandTpl(opts.template);
        closeLoad();
        return;
      }

      _this.preIndex = pindex = _this.getElement.find(".layui-tab-title>.layui-this").index();

      function reandTpl(data) {
        try {
          opts.content = data;

          _this.element.tabAdd(_this.opts.filter, opts);

          isChange && _this.changeTabs(opts.id);
        } catch (e) {
          console.error(e.name + ": " + e.message);
          console.error(e.stack);
        } finally {
          _this.getElement.find(".layui-tab-content .layui-tab-item").attr("data-fade", "");

          var liNum = getNum(_this.getElement.find(".layui-tab-title"));
          curLi > liNum && oli.eq(1) && _this.deleteTabs(oli.eq(1).attr("lay-id"));
          closeLoad();
        }
      } //  layer.close(loading);

    }; //切换到指定tabss


    plgTabs.prototype.changeTabs = function (layid, callback) {
      var id;
      var reg = /^[0-9]+.?[0-9]*$/;
      var eleObj;

      if (reg.test(layid)) {
        //通过下标找到layid
        eleObj = this.getElement.find(".layui-tab-title>li").eq(layid);
        id = eleObj.attr("lay-id");
      } else {
        id = layid;
        eleObj = this.getElement.find(".layui-tab-title>li[lay-id='" + id + "']");
      }

      pindex = this.getElement.find(".layui-tab-title>.layui-this").index();
      this.element.tabChange(this.opts.filter, id); //记录上一次下标

      this.preIndex = pindex; //是否开启滑动切换

      if (this.opts.fadeIn) {
        this.getElement.find(".layui-tab-content >.layui-tab-item").attr("data-fade", "");
        var itme = this.getElement.find(".layui-tab-content >.layui-tab-item.layui-show");

        if (itme.index() > this.preIndex) {
          //console.log("=>")
          itme.attr("data-fade", "left");
          ;
        } else if (itme.index() == this.preIndex) {
          return false;
        } else {
          //console.log("<=")
          this.element.tabChange(this.opts.filter, id);
          itme.attr("data-fade", "right");
        }

        setTimeout(function () {
          itme.attr("data-fade", "");
        }, this.opts.time);
      }

      ;

      if (typeof callback === "function") {
        callback(eleObj);
      }

      ;
      return this;
    }; //删除指定tabss


    plgTabs.prototype.deleteTabs = function (layid) {
      this.element.tabDelete(this.opts.filter, layid); //删除：

      return this;
    };

    plgTabs.prototype.element = layui.element;

    plgTabs.prototype.on = function (callback, eventName) {
      var _this = this;

      if (eventName != null) {
        this.element.on(eventName + "(" + this.opts.filter + ")", function (data) {
          if (typeof callback === "function") {
            callback(data);
          }

          _this.preIndex = data.index;
        });
      } else {
        this.element.on("tab(" + this.opts.filter + ")", function (data) {
          if (typeof callback === "function") {
            callback(data);
          }

          _this.preIndex = data.index;
        });
      }

      return _this;
    };

    window.PlgTabs = plgTabs;

    $.fn.initPlgTabs = function (options) {
      var id = $(this).attr("id");
      return new plgTabs(options).renderTo(id);
    };
  });
})(jQuery, layui);
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

;

(function ($) {
  //PlgZtree.js
  var tree = $.fn.zTree;

  var getData = function getData(opts) {
    var close = Prolog.loading2();
    var obj = {}; //配置tree

    opts.success = function (res) {
      //console.log(res)
      if (res.success) {
        //只把父节点拿出来
        obj = res.data.map(function (item) {
          item.isParent = true;
          return item;
        });
      } else {
        layer.msg("数据加载失败!");
      }

      close();
    };

    opts.error = function () {
      close();
    };

    Prolog.syncAjax(opts);
    return obj;
  };

  function Expand(event, treeId, treeNode) {
    //如果是一级父菜单
    console.log(treeId);

    if (!treeNode.tId) {
      var obj = this.getZTreeObj(treeId);
      var NOdes = obj.getNodes();

      for (var key in NOdes) {
        var td = NOdes[key];

        if (td.tId != treeNode.tId) {
          obj.expandNode(td, false, false, false);
        } else {
          obj.expandNode(td, true);
        }
      }
    }

    ;
  }

  var plgZtree = function plgZtree(ele, options) {
    var _this = this;

    var config = {
      initAjax: null,
      skin: "",
      toolBar: false,
      toolBar2: {
        isShow: false,
        btn: null
      },
      renderer: null,
      setData: null,
      isExpand: false,
      setting: {
        treeId: Prolog.createRandomId(),
        view: {
          selectedMulti: false
        },
        data: {
          key: {
            title: "name"
          },
          simpleData: {
            enable: true,
            idKey: "menuId",
            pIdKey: "parentMenuId",
            rootPId: "0",
            id: 'id'
          }
        },
        callback: {// onExpand: Expand,
        }
      }
    };
    var ele, opt, object; //获取数据入口

    if (arguments.length === 1) {
      opt = arguments[0];

      if (_typeof(opt) === "object") {
        _this.opts = $.extend(true, config, opt);

        if (opt.setting && opt.setting.callback) {
          if (typeof opt.setting.callback.onExpand === "function") {
            _this.opts.setting.callback.onExpand = function (event, treeId, treeNode) {
              Expand.bind(_this)(event, treeId, treeNode);
              opt.setting.callback.onExpand(event, treeId, treeNode);
            };
          }

          ;
        }

        ;

        if (!_this.opts.setDate && _this.opts.initAjax) {
          _this.opts.setData = getData(_this.opts.initAjax);
        }
      }
    } else if (arguments.length === 2) {
      ele = arguments[0];
      opt = arguments[1];
    }

    _this.opts.renderer && _this.renderTo(this.opts.renderer); //求父级div的高度值

    setTimeout(window.onresize = function () {
      var pObj = $("#" + _this.opts.renderer);
      var toolbarBtnHeight = 0;

      if (_this.toolbarBtn2) {
        toolbarBtnHeight = _this.toolbarBtn2.height();
      }

      var parentHeight = parseInt(pObj.parent().height() - toolbarBtnHeight);
      pObj.find(".ztree").css({
        "width": "100%",
        "height": parentHeight,
        "overflow-y": "auto",
        "pading-bottom": "20px"
      });
    }, 0);
  }; //克隆tree 的方法


  for (var key in tree) {
    plgZtree.prototype[key] = tree[key];
  }

  plgZtree.prototype.renderTo = function (ele) {
    $("#" + ele).empty();

    var _this = this;

    this.opts.skin && $("#" + ele).addClass(this.opts.skin);
    var objUl = $("<ul>", {
      class: "ztree",
      id: _this.opts.setting.treeId
    });
    this.treeObj = this.init(objUl, this.opts.setting, this.opts.setData); //默认展开第一个菜单

    this.opts.isExpand && this.treeObj.expandNode(this.treeObj.getNodes()[0], true, false, true, true);

    if (this.opts.toolBar) {
      _this.toolbarBtn = btnGroup(_this);
      $("#" + ele).append(_this.toolbarBtn);
    }

    if (this.opts.toolBar2.isShow && this.opts.toolBar2.btn && this.opts.toolBar2.btn.length > 0) {
      _this.toolbarBtn2 = btnGroup2(_this);
      $("#" + ele).append(_this.toolbarBtn2);
    }

    $("#" + ele).append(objUl);
    return this;
  };

  var newCount = 1;
  /*  plgZtree.prototype.on = function (eventName, callback) {
        var _this = this;
     //  var toolbarBtn = btnGroup();
       var zTree = this.treeObj;
       if(eventName=="addTreeNodeClick"){
           var addBtn = this.toolbarBtn.children().eq(2);
           callback && addBtn.click(function (event) {
           var nodes = zTree.getSelectedNodes();
           var treeNode = nodes;
           callback(event, zTree, treeNode)
        })
        }else if(eventName=="delTreeNodeClick"){
           var delBtn = this.toolbarBtn.children().eq(0);
           callback && delBtn.click(function (event) {
           var nodes = zTree.getSelectedNodes();
           var treeNode = nodes;
           callback(event, zTree, treeNode);
       })
        }else if(eventName=="editTreeNodeClick"){
           var delBtn = this.toolbarBtn.children().eq(1);
           callback && delBtn.click(function (event) {
               var nodes = zTree.getSelectedNodes();
               var treeNode = nodes;
               callback(event, zTree, treeNode);
           })
       }
     }; */

  var nodeObj = {
    id: Prolog.createRandomId(),
    name: "新菜单",
    systemId: null,
    menuId: "m00" + Prolog.createRandomId(),
    parentMenuId: null,
    operateType: 0,
    level: 1,
    enable: true,
    leaf: false,
    path: "",
    sort: 0
  };

  function btnGroup2(_this) {
    var obj = _this.opts.toolBar2.btn;
    var btn = $("\n        <div class=\"toolbar layui-row layui-col-space10 cl\">\n         ".concat(obj.map(function (item) {
      return "<div class=\"hook layui-col-md".concat(12 / obj.length, "\">\n            <a class=\"layui-btn ").concat(item.skin ? item.skin : '', "\" href=\"javascript:void(0)\">\n            <i class=\"").concat(item.icon, "\"></i>").concat(item.text, "</a>\n          </div>");
    }).join(""), "   \n        \n      </div>"));
    var zTree = _this.treeObj;
    obj.forEach(function (item, index) {
      btn.find(".hook").eq(index).find('a').click(function (event) {
        var nodes = zTree.getSelectedNodes();
        var treeNode = nodes;
        item.EventCallback && item.EventCallback(event, zTree, treeNode);
      });
    });
    return btn;
  }

  function btnGroup(_this) {
    var btn = $("\n\n                 <div class=\"toolbar layui-row layui-col-space10 cl\">\n\n\n                 <div class=\"layui-col-md4\">\n                 <a class=\"layui-btn layui-btn-primary\" href=\"javascript:void(0)\">\n                 <i class=\"layui-icon layui-icon-delete\"></i>\u5220\u9664\n                 </a>\n             </div>\n             <div class=\"layui-col-md4\">\n               \n             <a class=\"layui-btn layui-btn-primary\" href=\"javascript:void(0)\" >\n                 <i class=\"layui-icon layui-icon-edit\"></i>\u7F16\u8F91</a>\n          </div>\n                 <div class=\"layui-col-md4\">\n            \n                     <a class=\"layui-btn  layui-btn-normal\"  href=\"javascript:void(0)\">\n                           <i class=\"layui-icon layui-icon-add-1\"></i>\u589E\u52A0\n                   </a>\n                 </div>\n       \n               </div>\n        \n               \n               \n             \n             ");
    return btn;
  } //添加菜单


  function add(event) {
    var zTree = this.treeObj;
    var nodes = zTree.getSelectedNodes();
    var treeNode = nodes[0];
    nodeObj.parentMenuId = treeNode.menuId;
    treeNode = zTree.addNodes(treeNode, nodeObj);
    zTree.selectNode(treeNode[0]);
  }

  function del(event) {
    //console.log(this)
    var zTree = this.treeObj;
  }

  window.PlgZtree = plgZtree;
})(jQuery);
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

layui.define('form', function (exports) {
  var $ = layui.$,
      form = layui.form,
      hint = layui.hint(),
      // 字符常量
  MOD_NAME = 'selectPlus',
      SELECT = 'layui-form-select',
      SELECTED = 'layui-form-selected',
      selectPlus = {
    index: layui.selectPlus ? layui.selectPlus.index : 0,
    // 设置全局项
    set: function set(options) {
      var that = this;
      that.config = $.extend({}, that.config, options);
      return that;
    },
    // 事件监听
    on: function on(events, callback) {
      return layui.onevent.call(this, MOD_NAME, events, callback);
    }
  },
      // 操作当前实例
  thisIns = function thisIns() {
    var that = this,
        options = that.config;
    return {
      // 获取数据
      getChecked: function getChecked() {
        return that.getChecked.call(that);
      },
      // 配置数据
      config: options
    };
  },
      // 构造器
  Class = function Class(options) {
    var that = this;
    that.index = ++selectPlus.index;
    that.config = $.extend({}, that.config, selectPlus.config, options);
    that.render();
  },
      // 渲染inputTags
  renderInputTags = function renderInputTags(el, data) {
    var temStr = '';
    data.forEach(function (val) {
      temStr += "<span>\n          <em>".concat(val, "</em>\n          <button type=\"button\" class=\"close\">\xD7</button>\n        </span>");
    });
    $(el).siblings('.plg-select-tags').html(temStr);
  }; //默认配置


  Class.prototype.config = {
    type: 'checkbox',
    valueSeparator: '/',
    labelSeparator: '  ---  ',
    data: [],
    valueName: 'title',
    label: [],
    values: [],
    url: '',
    method: 'get',
    where: '',
    contentType: '',
    headers: '',
    response: 'data',
    parseData: null,
    config: {
      checkedName: 'SELECTPLUS_CHECKED',
      indexName: 'SELECTPLUS_INDEX'
    },
    error: ''
  }; //渲染视图

  Class.prototype.render = function () {
    var that = this,
        options = that.config;
    typeof options.el === 'string' ? options.el = $(options.el) : options.el; // 渲染元素

    options.reElem = $('<div class="layui-unselect layui-form-select">' + '<div class="layui-select-title">' + '<input type="text" placeholder="请选择" value="" readonly="" class="layui-input layui-unselect">' + '<i class="layui-edge"></i>' + '</div>' + '<dl class="layui-anim layui-anim-upbit">' + '<dd lay-value="" class="layui-select-tips layui-hide">请选择</dd>' + '</dl>' + '</div>'); // 事件

    options.reElem.find('.layui-select-title').on('click', function (e) {
      !$(this).parent().hasClass(SELECTED) ? $(document).find('.' + SELECT).removeClass(SELECTED) : "";
      $(this).parent().toggleClass(SELECTED);
    });
    $(document).on('click', function (e) {
      $(e.target).parents('.' + SELECT).length <= 0 && options.reElem.hasClass(SELECTED) ? options.reElem.removeClass(SELECTED) : "";
    });
    !Array.isArray(options.values) ? options.values = [options.values] : ""; // 查找 表单的 filter

    options.filter = options.el.parents('.layui-form').attr('lay-filter');
    options.el.append(options.reElem);

    if (options.url) {
      // 获取后端数据
      this.pullData();
    } else {
      that.renderData(); // 数据渲染
    }

    options.el.on('click', '.layui-select-title', function () {
      // console.log('在此处开始')
      var $title = $(this),
          $dd0 = $title.next().find('dd').eq(0);

      if (!$dd0.hasClass('layui-hide')) {
        $dd0.addClass('layui-hide');
      }

      $title.find('input').val(options.values.join(options.valueSeparator));
    });
  };

  Class.prototype.pullData = function () {
    var that = this,
        options = that.config;
    $.ajax({
      type: options.method || 'get',
      url: options.url,
      contentType: options.contentType,
      data: options.where || {},
      dataType: 'json',
      headers: options.headers || {},
      success: function success(res) {
        //如果有数据解析的回调，则获得其返回的数据
        if (typeof options.parseData === 'function') {
          res = options.parseData(res) || res[options.response];
        } // 如果是数组，则覆盖options.data


        if (Array.isArray(res)) {
          options.data = that.formatData(res);
          options.error = '';
          that.renderData();
        } else {
          options.error = '数据格式不对';
        }
      },
      error: function error(e, m) {
        options.error = '数据接口请求异常：' + m;
      }
    });
  }; // 格式化数据


  Class.prototype.formatData = function (data) {
    var that = this,
        options = that.config,
        valueName = options.valueName,
        values = options.values,
        checkedName = options.config.checkedName,
        indexName = options.config.indexName;
    layui.each(data, function (i, item) {
      if (_typeof(item) !== 'object') {
        data[i] = {
          title: item
        };
      }

      data[i][indexName] = i;
      if (!data[i][checkedName]) data[i][checkedName] = false;
      layui.each(values, function (index, value) {
        if (data[i][valueName] === value) {
          data[i][checkedName] = true;
        }
      });
    });
    values.splice(0);
    return data;
  }; // 渲染数据


  Class.prototype.renderData = function (data) {
    var that = this,
        options = that.config,
        type = options.type,
        id = that.index,
        data = data ? that.formatData(data) : that.formatData(options.data),
        items = {
      // 多选
      checkbox: function checkbox(config, data, id) {
        var CLASSNAME = 'layui-form-checkbox',
            CHECKED = 'layui-form-checked',
            el = config.reElem.find('dl'),
            valueName = config.valueName,
            checkedName = config.config.checkedName,
            indexName = config.config.indexName,
            values = config.values,
            label = config.label,
            filter = config.filter,
            labelSeparator = config.labelSeparator,
            valueSeparator = config.valueSeparator,
            sum = 0; // 添加选项   XXX, 此处可以使用一次str，可以节省一次dom的操作

        el.append($('<dd lay-value="全选"></dd>'));
        layui.each(data, function (i, item) {
          el.append($('<dd lay-value="' + item[valueName] + '"></dd>'));
        });
        var allEle = el.find('dd').eq(1); // 添加多选框

        allEle.nextAll().each(function (index) {
          var $dd = $(this),
              item = data[index],
              layuiValue = item[valueName],
              title = layuiValue;

          if (label.length > 0) {
            title = "";
            layui.each(label, function (i, n) {
              title += item[n];
              i < label.length - 1 ? title += labelSeparator : ''; // i < (label.length - 1) ? (title +=  (labelSeparator + '</span>')): '';
            });
          }

          var checkbox = $('<input type="checkbox" name="' + MOD_NAME + 'checkbox' + id + '"  yw-index="' + item[indexName] + '" lay-skin="primary" title="' + title + '" layui-value="' + layuiValue + '">');

          if (item[checkedName]) {
            checkbox.prop('checked', true);
            values.push(layuiValue);
            sum++;
          }

          $dd.html(checkbox);
        });
        var allcheckbox = $('<input type="checkbox"  selectplus-all  lay-skin="primary" title="全选" layui-value="全选">');
        sum === data.length ? allcheckbox.prop('checked', true) : "";
        allEle.html(allcheckbox); // console.log('开启了初始化模式');
        // console.log('config.tagsContainer');
        // console.log(config);
        // console.log('config.tagsContainer');

        renderInputTags(config.el, values);
        allEle.parent().prev().find('input').val(values.join(valueSeparator)); // 添加事件

        allEle.on('click', function (event) {
          var $all = $(this),
              checked = event.target.nodeName === 'DD' ? $all.find('.' + CLASSNAME).toggleClass(CHECKED).hasClass(CHECKED) : $all.find('input').prop('checked'); // 禁止下拉框收回

          $all.parents('.' + SELECT).addClass(SELECTED); // 设置选中状态 

          $all.find('input').prop('checked', checked);
          $all.nextAll().each(function () {
            var dd = $(this);
            checked ? dd.find('.' + CLASSNAME).addClass(CHECKED) : dd.find('.' + CLASSNAME).removeClass(CHECKED);
            dd.find('input').prop('checked', checked);
          }); // 显示选中数据

          layui.event.call($all, MOD_NAME, 'checkbox' + '(' + MOD_NAME + ')', {
            type: "checkbox",
            ele: $all,
            eleChecked: checked,
            isAll: checked
          });
        }); // console.log('事件的监听....');

        config.el.siblings('.plg-select-tags').on('click', '.close', function (e) {
          // console.log('触发点击事件...');
          // console.log(this);
          // console.log('触发点击事件...')
          // console.log($(this).siblings('em').html());
          // if(el.find('.layui-form-select').hasClass('layui-form-selected')){
          // }
          // 此处需要判断当前的select checkbox是否展开，如果展开则，第一次点击的是关闭
          var currentHtml = $(this).siblings('em').html(); // console.log( typeof allEle.nextAll());
          // console.log(allEle.nextAll());

          var selectList = Array.prototype.slice.call(allEle.nextAll());
          selectList.forEach(function (val, ind) {
            if (val.innerText === currentHtml) {
              // console.log('currentHtml::' + currentHtml);
              // console.log('ind::' + ind);
              // console.log('立即执行的事件....');
              el.find('dd').eq(ind + 2).off().on('click', function (event) {
                // console.log(event.target);
                // event.stopPropagation();
                // console.log('立即执行的事件');
                // console.log('index::' + $(this).index());
                if ($(this).index() === ind + 2) {
                  var $dd = $(this),
                      checked = event.target.nodeName === 'DD' ? $dd.find('.' + CLASSNAME).toggleClass(CHECKED).hasClass(CHECKED) : $dd.find('input').prop('checked'); // console.log('出发点击事件');
                  // 禁止下拉框收回

                  $dd.parents('.' + SELECT).addClass(SELECTED); // 设置选中状态

                  $dd.find('input').prop('checked', checked); // console.log('2222');
                  // 判断全选

                  var $all = $dd.parents('dl').find('dd').eq(1),
                      $dds = $all.nextAll(),
                      sum = 0;
                  $dds.each(function () {
                    $(this).find('input').prop('checked') ? sum++ : '';
                  }); // console.log('1111');

                  if (sum === $dds.length) {
                    // console.log('全选');
                    $all.find('input').prop('checked', true);
                    $all.find('.' + CLASSNAME).addClass(CHECKED);
                  } else {
                    // console.log('非全选');
                    $all.find('input').prop('checked', false);
                    $all.find('.' + CLASSNAME).removeClass(CHECKED);
                  } // console.log('00000');
                  // 显示选中数据


                  layui.event.call($all, MOD_NAME, 'checkbox' + '(' + MOD_NAME + ')', {
                    type: "checkbox",
                    ele: $dd,
                    eleChecked: checked,
                    isAll: sum === $dds.length
                  }); // console.log('aaaaa');
                }
              }).trigger('click');
            }
          });
        });
        allEle.nextAll().on('click', function (e) {
          // console.log('nextAll()此处是点击事件');
          // console.log(this);
          // console.log($(this));
          // console.log('nextAll()此处是点击事件');
          var $dd = $(this),
              checked = event.target.nodeName === 'DD' ? $dd.find('.' + CLASSNAME).toggleClass(CHECKED).hasClass(CHECKED) : $dd.find('input').prop('checked'); // 禁止下拉框收回

          $dd.parents('.' + SELECT).addClass(SELECTED); // 设置选中状态

          $dd.find('input').prop('checked', checked); // 判断全选

          var $all = $dd.parents('dl').find('dd').eq(1),
              $dds = $all.nextAll(),
              sum = 0;
          $dds.each(function () {
            $(this).find('input').prop('checked') ? sum++ : '';
          });

          if (sum === $dds.length) {
            $all.find('input').prop('checked', true);
            $all.find('.' + CLASSNAME).addClass(CHECKED);
          } else {
            $all.find('input').prop('checked', false);
            $all.find('.' + CLASSNAME).removeClass(CHECKED);
          } // 显示选中数据


          layui.event.call($all, MOD_NAME, 'checkbox' + '(' + MOD_NAME + ')', {
            type: "checkbox",
            ele: $dd,
            eleChecked: checked,
            isAll: sum === $dds.length
          });
        }); // 渲染多选框
        // el.next().find('dl').addClass('yw-selectPlus');

        form.render('checkbox', filter);
      },
      // 单选
      radio: function radio(config, data, id) {
        var CLASSNAME = 'layui-form-radio',
            CHECKED = 'layui-form-radioed',
            ICON = ['&#xe643;', '&#xe63f;'],
            CHECKED_ICON = 'layui-anim-scaleSpring',
            elID = config.el,
            el = config.reElem.find('dl'),
            valueName = config.valueName,
            checkedName = config.config.checkedName,
            indexName = config.config.indexName,
            checkedData = data.filter(function (item) {
          return item[checkedName] === true;
        }),
            values = config.values,
            label = config.label,
            filter = config.filter,
            labelSeparator = config.labelSeparator,
            valueSeparator = config.valueSeparator; // 添加选项

        layui.each(data, function (i, item) {
          el.append('<dd lay-value="' + item[valueName] + '"></dd>');
        });
        form.render('select', options.filter); // 渲染单选框

        el.find('dd').eq(0).nextAll().each(function (index) {
          var $dd = $(this),
              item = data[index],
              layuiValue = item[valueName],
              title = layuiValue;

          if (label.length > 0) {
            title = "";
            layui.each(label, function (i, n) {
              title += item[n];
              i < label.length - 1 ? title += labelSeparator : '';
            });
          }

          var dd = $('<input type="radio" name="' + MOD_NAME + 'radio' + id + '"  yw-index="' + item[indexName] + '" lay-skin="primary" title="' + title + '" layui-value="' + layuiValue + '">');

          if (checkedData.length > 0 && checkedData[0][indexName] === item[indexName]) {
            dd.prop('checked', true);
            values.push(layuiValue);
            $dd.parent().prev().find('input').val(values.join(valueSeparator));
          }

          $dd.html(dd);
        }); // el.next().find('dl').addClass('yw-selectPlus');

        form.render('radio', filter); // 事件

        el.find('dd').on('click', function (event) {
          var $dd = $(this);
          $dd.find('.' + CLASSNAME).addClass(CHECKED).find('i').addClass(CHECKED_ICON).html(ICON[0]);
          $dd.find('input').prop('checked', true);
          $dd.siblings().find('.' + CLASSNAME).removeClass(CHECKED).find('i').removeClass(CHECKED_ICON).html(ICON[1]);
          $dd.siblings().find('input').prop('checked', false); // 显示选中数据

          layui.event.call($dd, MOD_NAME, 'radio' + '(' + MOD_NAME + ')', {
            type: "radio",
            ele: $dd,
            eleChecked: true,
            isAll: false
          });
        });
      }
    }; // 选择时触发的事件

    layui.onevent.call(that, MOD_NAME, type + '(' + MOD_NAME + ')', that.checked.bind(that));
    items[type] ? items[type](options, data, id) : hint.error('不支持的' + type + '表单渲染');
  }; // 选中数据处理


  Class.prototype.checked = function (res) {
    var that = this,
        options = that.config,
        data = options.data,
        checkedName = options.config.checkedName,
        type = res.type,
        isAll = res.isAll,
        ele = res.ele,
        eleChecked = res.eleChecked,
        filter = options.el.attr('lay-filter');

    if (type === 'checkbox') {
      options.values = [];
      ele.parents('dl').find('[type="checkbox"]').each(function (i) {
        var $dd = $(this),
            ywIndex = $dd.attr('yw-index'),
            checked = $dd.prop('checked');
        ywIndex ? data[ywIndex][checkedName] = checked : "";
        checked && ywIndex ? options.values.push($dd.attr('layui-value')) : "";
      }); // 此处做input框的渲染功能

      renderInputTags(config.el, options.values);
      ele.parent().prev().find('input').val(options.values.join(options.valueSeparator));
      layui.event.call(ele, MOD_NAME, MOD_NAME + '(' + filter + ')', {
        checked: eleChecked,
        isAll: isAll,
        values: options.values,
        checkedData: data.filter(function (item) {
          return item[checkedName] === true;
        }),
        ele: ele
      });
    } else if (type === 'radio') {
      var index = ele.find('input').attr('yw-index'),
          value = ele.find('input').attr('layui-value');
      options.values = [value];
      ele.parent().prev().find('input').val(value);
      layui.each(data, function (i, item) {
        item[checkedName] = false;
      });
      data[index][checkedName] = true;
      layui.event.call(ele, MOD_NAME, MOD_NAME + '(' + filter + ')', {
        value: value,
        checkedData: data[index],
        ele: ele
      });
    }
  }; // 获取选中数据


  Class.prototype.getChecked = function () {
    var that = this,
        options = that.config,
        data = options.data,
        checkedName = options.config.checkedName;
    return {
      values: options.values,
      data: data.filter(function (item) {
        return item[checkedName] === true;
      })
    };
  }; // 核心入口


  selectPlus.render = function (options, tagsContainer) {
    var ins = new Class(options, tagsContainer);
    return thisIns.call(ins);
  };

  exports('selectPlus', selectPlus);
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
